[
  {
    "videoId": "37zTpG4tDxA",
    "title": "Detect API Call Duration Changes During Cypress Tests",
    "description": "This video shows how the plugin cypress-magic-backend can detect and warn you about API network calls that suddenly changed their duration. For example, if a \"GET /todos\" call took 500ms before and now takes 1100ms, the plugin will warn you about it. Find the plugin and more details at https://github.com/bahmutov/cypress-magic-backend",
    "publishedAt": "2025-01-14T17:18:52Z",
    "url": "https://youtu.be/37zTpG4tDxA"
  },
  {
    "videoId": "_1fnFiPMYf8",
    "title": "Record And Replay Several API Definitions",
    "description": "The plugin cypress-magic-backend lets you define multiple explicit API routes to intercept, see https://github.com/bahmutov/cypress-magic-backend?tab=readme-ov-file#configuration In this video, I show how to better target \"GET and POST calls to /todos\" and \"DELETE calls to /todos/:id\" APIs",
    "publishedAt": "2025-01-12T18:58:43Z",
    "url": "https://youtu.be/_1fnFiPMYf8"
  },
  {
    "videoId": "VklJ76TfeQk",
    "title": "Run Tests Separately Using cypress-magic-backend Playback Mode",
    "description": "One nice side benefit of using cypress-magic-backend plugin in the Playback mode is that you can now run tests that depend on the backend state independently of each other. This video shows how running the second test by itself in a spec where the first test sets everything up is now working.",
    "publishedAt": "2025-01-10T21:38:50Z",
    "url": "https://youtu.be/VklJ76TfeQk"
  },
  {
    "videoId": "ZhF0SDC1Q0g",
    "title": "Make E2E Tests Super Fast With cypress-magic-backend Plugin",
    "description": "This video introduces the plugin \"cypress-magic-backend\" that can record all your API network calls and then replay them. This is useful when you want to concentrate your testing on the front-end code, or the backend is too slow or even unavailable during tests. Find the plugin at https://github.com/bahmutov/cypress-magic-backend and the example shown in the branch \"video1\" of the repo https://github.com/bahmutov/cypress-magic-backend-example",
    "publishedAt": "2025-01-10T14:59:43Z",
    "url": "https://youtu.be/ZhF0SDC1Q0g"
  },
  {
    "videoId": "OxZHBG1OUww",
    "title": "Lesson d2: Halloween pumpkins",
    "description": "This is a video from a free lesson in my online course teaching test-driven development using Cypress where I code a small web calculator https://cypress.tips/courses/tdd-calculator In this lesson, we replace the orange operator button backgrounds with an image of a pumpkin. We confirm the image is downloaded by the browser, it is applied via the CSS property \"background-image\" plus the button becomes larger when the user hovers over it. Check out the full course if you want to see more lessons or do the hands-on exercises. Until Nov 11th, 2024 you can use the promo code TDDHALLOWEEN to get 25% off this course.",
    "publishedAt": "2024-10-31T15:06:10Z",
    "url": "https://youtu.be/OxZHBG1OUww"
  },
  {
    "videoId": "TQyDJuwLJGs",
    "title": "Same Height",
    "description": "This video shows Cypress test that confirms that the element does not change its height after some user action. You need to compare heights as numbers and with a tolerance. Find the full recipe at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2024-10-23T18:23:58Z",
    "url": "https://youtu.be/TQyDJuwLJGs"
  },
  {
    "videoId": "YCyOxdBfYQM",
    "title": "Vertical Center",
    "description": "This video shows how the Cypress test can confirm the vertical alignment of two elements. We get the bounding client rectangle from both elements and then compare the centers' values. We use \"closeTo\" assertion since floating-point values might disagree by a tiny amount. We can simplify the test using \"cypress-map\" plugin and even make the entire chain retryable. Find the source code at https://glebbahmutov.com/cypress-examples/recipes/vertical-center.html",
    "publishedAt": "2024-10-22T16:21:43Z",
    "url": "https://youtu.be/YCyOxdBfYQM"
  },
  {
    "videoId": "5OTqNxJyhxo",
    "title": "Test Layout Shift",
    "description": "This video shows how you can detect even 1 pixel layout shifts during testing. All you need is to \"remember\" the starting \"offsetTop / offsetLeft\" properties and then check them again after interacting with the page. Find the full recipe at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2024-09-30T15:52:13Z",
    "url": "https://youtu.be/5OTqNxJyhxo"
  },
  {
    "videoId": "52KW-t2wWaE",
    "title": "Find Elements Without An Attribute",
    "description": "This video shows how to find all the elements that do not have a specific attribute. For example, let's find all buttons that don't have attribute \"data-cy\"\ncy.get(\"button:not([data-cy])\")\nFind the recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2024-09-17T16:43:43Z",
    "url": "https://youtu.be/52KW-t2wWaE"
  },
  {
    "videoId": "JpqU7Y-BVxc",
    "title": "Retry Network Requests",
    "description": "This video shows how to use plugins cypress-recurse and cy-spok to retry calling the backend until it responds with the expected result. Read the blog post https://glebbahmutov.com/blog/retry-network-requests/ for all source code. Find the plugins at https://github.com/bahmutov/cypress-recurse and https://github.com/bahmutov/cy-spok",
    "publishedAt": "2024-09-13T14:55:09Z",
    "url": "https://youtu.be/JpqU7Y-BVxc"
  },
  {
    "videoId": "qdBM08WBU_Q",
    "title": "Parse The Account Number Explained",
    "description": "This video solves a Cypress test problem the user asked. The application shows an account number: a 9-digit number. The test should wait for the number and then compare its value. I explain the problem with the initial solution and then show how to write this test. Find the full code at https://glebbahmutov.com/cypress-examples/recipes/parse-account-number.html",
    "publishedAt": "2024-09-06T20:12:55Z",
    "url": "https://youtu.be/qdBM08WBU_Q"
  },
  {
    "videoId": "ngmB4r4-m6U",
    "title": "Skip Dependent Cypress Tests On Failure",
    "description": "If your Cypress tests depend on each other, if a test fails, all tests after that fail. I wrote a plugin https://github.com/bahmutov/cypress-skip-this-test that automatically skips the tests if any of the previous tests in the same suite fails. This video shows the plugin in action. For more details, see the blog post https://glebbahmutov.com/blog/skip-dependent-tests-on-failure/",
    "publishedAt": "2024-09-05T15:38:45Z",
    "url": "https://youtu.be/ngmB4r4-m6U"
  },
  {
    "videoId": "sdYs0AKx7ng",
    "title": "Testing window.close Method From Cypress",
    "description": "This video shows how to set a \"window.close\" method stub using cy.window and cy.stub method calls. Then we can click on the button and confirm the method call was indeed made. Find the full code at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2024-08-29T17:00:22Z",
    "url": "https://youtu.be/sdYs0AKx7ng"
  },
  {
    "videoId": "f9o1WgmY3Jw",
    "title": "Check If All Images Have Loaded Using cy.each Command",
    "description": "You can check multiple images on the page to verify they load using Cypress \"cy.get(...).each\" command. Inside, you can verify the property \"naturalWidth\" or \"naturalHeight\" and if it is above zero, then the image has loaded.\nexpect($el, `image ${k + 1}`)\n    .to.have.prop('naturalWidth')\n    .be.greaterThan(0)\nYou can find the full source code at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2024-07-25T14:28:08Z",
    "url": "https://youtu.be/f9o1WgmY3Jw"
  },
  {
    "videoId": "L-fyfaUUXFA",
    "title": "Run Just The Last Failed Tests Using cypress-plugin-last-failed",
    "description": "In this video, I am showing the new plugin https://github.com/dennisbergevin/cypress-plugin-last-failed that lets you run only the last failed tests in the interactive and non-interactive modes. The source code is in the repo https://github.com/bahmutov/demo-cypress-plugin-last-failed branch \"demo1\"",
    "publishedAt": "2024-06-28T15:53:14Z",
    "url": "https://youtu.be/L-fyfaUUXFA"
  },
  {
    "videoId": "XlXQm2sybQQ",
    "title": "cy.root Command Example",
    "description": "This video shows an example of \"cy.root\" command that allows checking attributes of the parent \"cy.within\" element. Find the full example in a recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2024-06-14T17:21:16Z",
    "url": "https://youtu.be/XlXQm2sybQQ"
  },
  {
    "videoId": "tIabUupPo-A",
    "title": "Refactor Cypress Api Tests Part 4: Use deep.include Assertion",
    "description": "In this video, I refactor the user spec tests. We will combine multiple tests into a single one using \"deep.include\" assertion to check one or many known properties of an object. Then we will improve the page object method, and then I will switch to use cy-spok plugin to simplify checking nested properties. Find the code in the branch \"refactor-user-spec\" of the repo https://github.com/bahmutov/cypress-conduit-api",
    "publishedAt": "2024-06-14T12:18:56Z",
    "url": "https://youtu.be/tIabUupPo-A"
  },
  {
    "videoId": "YIkOirPEQRM",
    "title": "Refactor Cypress Api Tests Part 3: Use cypress-map",
    "description": "In this video, I simplify the tests and the \"beforeEach\" hooks using query commands from the cypress-map plugin. Find the starting code in the repo https://github.com/bahmutov/cypress-conduit-api and the cypress-map plugin documentation in the repo https://github.com/bahmutov/cypress-map",
    "publishedAt": "2024-06-11T20:19:53Z",
    "url": "https://youtu.be/YIkOirPEQRM"
  },
  {
    "videoId": "yS9G0xe4yOc",
    "title": "Refactor Cypress Api Tests Part 2: Set Up The IntelliSense",
    "description": "I am continuing to refactor API tests in the repo https://github.com/bahmutov/cypress-conduit-api In this short video I set up the IntelliSense to give my correct types for \"cy\" global object and \"cy.api\" custom command. For more details, see https://glebbahmutov.com/blog/use-typescript-with-cypress/",
    "publishedAt": "2024-06-11T19:49:42Z",
    "url": "https://youtu.be/yS9G0xe4yOc"
  },
  {
    "videoId": "zGO3LNx-agk",
    "title": "Refactor Cypress API Tests Part 1: Use cy-spok Plugin",
    "description": "In this video, I refactor API tests found in the repo https://github.com/EvgeniiDolzhenko/cypress-conduit-api You can find my refactoring in the branch \"refactor1\" of the repo https://github.com/bahmutov/cypress-conduit-api\n- I will use cy-spok plugin https://github.com/bahmutov/cy-spok to write more powerful and shorter assertions for the response objects\n- I will remove \"cy.then\" callbacks that simply check a property in the current subject\n- I will validate the env settings value before using it\nFor more lessons showing cy-spok and cypress-plugin-api, see my \"Cypress Plugins\" course https://cypress.tips/courses/cypress-plugins\nVSCode color theme: \"Dark Theme by Marcelo\"",
    "publishedAt": "2024-06-11T16:34:47Z",
    "url": "https://youtu.be/zGO3LNx-agk"
  },
  {
    "videoId": "loYkE80cJEc",
    "title": "Cypress Quiz With Yevhen Laichenkov",
    "description": "In this video, Yevhen Laichenkov and I discuss his https://cypressquiz.com/ fun project. We go through the questions and try to answer each one, discussing the intricacies of some Cypress commands. Check out Yevhen's work at:\n- https://github.com/elaichenkov\n- https://www.linkedin.com/in/elaichenkov\nWe also mentioned several other resources:\n- https://cypress.tips/search\n- https://docs.cypress.io/",
    "publishedAt": "2024-06-07T16:18:43Z",
    "url": "https://youtu.be/loYkE80cJEc"
  },
  {
    "videoId": "-9pGivsOho8",
    "title": "Better Scroll Behavior In Your Tests",
    "description": "By default, Cypress scrolls elements to the top of the viewport before clicking or typing. Often this hides important information, and I prefer to change the scroll behavior to scroll the element to the center of the viewport. See https://on.cypress.io/interacting-with-elements#scrolling for details and find the example shown in this video in the repo https://github.com/bahmutov/scroll-behavior-example",
    "publishedAt": "2024-06-06T16:50:25Z",
    "url": "https://youtu.be/-9pGivsOho8"
  },
  {
    "videoId": "eQJyz2UEMvY",
    "title": "cy.then Callback With Retries Inside",
    "description": "The \"cy.then\" command does not retry its callback function, but the code inside the callback can still use normal Cypress commands with retries. This video shows one such example and then refactors it for simplicity. Find the full recipe on my site https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2024-06-04T18:43:57Z",
    "url": "https://youtu.be/eQJyz2UEMvY"
  },
  {
    "videoId": "NWc-sI-gPkA",
    "title": "Bonus 132: Prove the Qwik event handler download",
    "description": "A video showing how to confirm on-demand JavaScript downloads used by Qwik framework to speed up the applications. The full lesson with source code is available in the course \"Cypress Network Testing Exercises\" https://cypress.tips/courses/network-testing",
    "publishedAt": "2024-04-15T15:26:04Z",
    "url": "https://youtu.be/NWc-sI-gPkA"
  },
  {
    "videoId": "9PA6NGuTW3g",
    "title": "Required Input Attributes",
    "description": "This video shows how to check the input elements with the \"required\" attribute. We can confirm the elements that have this attribute and we can cross-reference them with their label elements. Find the full recipe at https://glebbahmutov.com/cypress-examples/recipes/required-attributes.html",
    "publishedAt": "2024-04-05T15:56:44Z",
    "url": "https://youtu.be/9PA6NGuTW3g"
  },
  {
    "videoId": "L4EQT2L7yLY",
    "title": "Cypress Flaky Test Exercise: Level 9",
    "description": "Often an application shows a random greeting popup when the user visits the page. This video shows how to investigate it and set the local storage item to prevent the popup from opening. Find the source code in the branch \"level9\" of the repo https://github.com/bahmutov/flaky-test-cypress",
    "publishedAt": "2024-03-27T15:15:59Z",
    "url": "https://youtu.be/L4EQT2L7yLY"
  },
  {
    "videoId": "jU6-FtlL5KU",
    "title": "Cypress Flaky Test Exercise: Level 8",
    "description": "This video shows a situation when the iframe inside the app takes a little bit longer to load, causing a problem. I show how to access the elements inside the iframe with command retry-ability (avoid using cy.then). Find the source code in the branch \"level8\" of the repo https://github.com/bahmutov/flaky-test-cypress and read the blog post \"Working with iframes in Cypress\" https://www.cypress.io/blog/2020/02/12/working-with-iframes-in-cypress",
    "publishedAt": "2024-03-26T15:35:53Z",
    "url": "https://youtu.be/jU6-FtlL5KU"
  },
  {
    "videoId": "tza6cM9E_q0",
    "title": "Cypress Flaky Test Exercise: Level 7",
    "description": "In this video, there is some flaky due to the UI updating before the app actually makes the \"POST /students\" call to save the data. I fix the flake for good by spying on the network call using the cy.intercept command. The starting code is in the repo https://github.com/bahmutov/flaky-test-cypress in the branch \"level7\". For more examples and flake exercises, read the blog post https://glebbahmutov.com/blog/cypress-flaky-tests-exercises/ For more \"cy.intercept\" exercises, see my course \"Cypress Network Testing Exercises\" https://cypress.tips/courses/network-testing",
    "publishedAt": "2024-03-23T18:50:57Z",
    "url": "https://youtu.be/tza6cM9E_q0"
  },
  {
    "videoId": "ae6QkkWUTog",
    "title": "Cypress Flaky Test Exercise: Level 6",
    "description": "In this video, the flake comes from the application slowly loading the data while the test is adding the first record. How would you fix it? Find the starting source code in the repo https://github.com/bahmutov/flaky-tes... branch \"level6\" If you like hands-on testing coding challenges, check out my Cypress/Playwright courses at https://cypress.tips/courses",
    "publishedAt": "2024-03-19T13:16:46Z",
    "url": "https://youtu.be/ae6QkkWUTog"
  },
  {
    "videoId": "BsOIhxEVe4s",
    "title": "Cypress Flaky Test Exercise: Level 5",
    "description": "This video shows a flaky Cypress test caused by the app re-rendering part of the page and removing the element the test is using. Find the starting source code in the repo https://github.com/bahmutov/flaky-test-cypress in the branch \"level5\". For more hands-on Cypress exercises, check out my courses at https://cypress.tips/courses",
    "publishedAt": "2024-03-15T13:28:06Z",
    "url": "https://youtu.be/BsOIhxEVe4s"
  },
  {
    "videoId": "iHjPHX2rYiM",
    "title": "Cypress Flaky Test Exercise: Level 4",
    "description": "In this video, the flake comes from the application \"losing\" the first couple of letters when the user types the email address. How would you fix it? Find the starting source code in the repo https://github.com/bahmutov/flaky-test-cypress branch \"level4\" If you like hands-on testing coding challenges, check out my Cypress/Playwright courses at https://cypress.tips/courses",
    "publishedAt": "2024-03-14T13:19:31Z",
    "url": "https://youtu.be/iHjPHX2rYiM"
  },
  {
    "videoId": "MbsEUQPMDzw",
    "title": "Cypress Flaky Test Exercise: Level 3",
    "description": "In this exercise, I show how a typical test with \"Command - Command - Command\" can lead to flake when the application is slow to react to a particular command. By adding an assertion we can make the test runner \"wait\" as long as needed for the app to \"catch up\". Find the starting code in the repo https://github.com/bahmutov/flaky-test-cypress branch \"level3\" If you like hands-on testing coding challenges, check out my Cypress/Playwright courses at https://cypress.tips/courses",
    "publishedAt": "2024-03-13T21:47:33Z",
    "url": "https://youtu.be/MbsEUQPMDzw"
  },
  {
    "videoId": "bWR6zFGywMI",
    "title": "Cypress Flaky Test Exercise: Level 2",
    "description": "In this video, I show how to run the same test N times to \"burn\" it to see if it has flake. We can run the test using a regular JavaScript \"for loop\", or by using \"Cypress._.times\" utility function, or even by installing a plugin https://github.com/bahmutov/cy-grep Find the starting source code in the repo https://github.com/bahmutov/flaky-test-cypress branch \"level2\" If you like hands-on testing coding challenges, check out my Cypress/Playwright courses at https://cypress.tips/courses",
    "publishedAt": "2024-03-13T21:45:19Z",
    "url": "https://youtu.be/bWR6zFGywMI"
  },
  {
    "videoId": "iHDZ53gLltc",
    "title": "Cypress Flaky Test Exercise: Level 1",
    "description": "I have set up several examples of Cypress flaky tests in the repo https://github.com/bahmutov/flaky-test-cypress This video shows the \"level 1\" exercise and my solution to fix the test for good. If you like hands-on testing coding challenges, check out my Cypress/Playwright courses at https://cypress.tips/courses",
    "publishedAt": "2024-03-13T16:47:11Z",
    "url": "https://youtu.be/iHDZ53gLltc"
  },
  {
    "videoId": "RKgSBN2fk_s",
    "title": "cy.difference Command With Predicates",
    "description": "This video shows the cy.difference command from cypress-map. The command can compare object values against expected values. It can also check values by passing them through predicate functions. Find the source code in the repo https://github.com/bahmutov/cypress-prices-check and the cypress-map plugin at https://github.com/bahmutov/cypress-map",
    "publishedAt": "2024-03-07T16:21:10Z",
    "url": "https://youtu.be/RKgSBN2fk_s"
  },
  {
    "videoId": "WKVaJjst_-8",
    "title": "Check Multiple Properties At Once Using cy.difference Query",
    "description": "This video shows custom query commands from cypress-map plugin. I explain how the \"cy.difference\" command can help compare a large object of extracted text from the page and show a nice error message if several values are different. Read the blog post \"Check Fees And Totals Using Cypress\" https://glebbahmutov.com/blog/check-fees-using-cypress/ and find the source code in the repo https://github.com/bahmutov/cypress-prices-check Plugin cypress-map can be found at https://github.com/bahmutov/cypress-map",
    "publishedAt": "2024-03-07T16:18:49Z",
    "url": "https://youtu.be/WKVaJjst_-8"
  },
  {
    "videoId": "hDTpRhcOmjs",
    "title": "Refactor A Test Part 4: A Better Delete Method",
    "description": "In this video, I refactor the page object method that deletes a customer.\n- add a log message\n- use cy.contains(selector, text) rather than the longer cy.get(selector).contains(text)\n- explicit \"confirm\" stub and check that the stub was called with expected argument\n- confirm the application routes to the correct URL after deleting\ndelete() {\n  cy.log('**deleting the customer**');\n  cy.on(\n    'window:confirm',\n    cy\n      .stub()\n      .returns(true)\n      // @ts-expect-error\n      .as('confirm')\n  );\n  cy.contains('button', 'Delete').click();\n  cy.get('@confirm').should('have.been.calledOnceWith', 'Really delete?');\n  cy.location('pathname').should('eq', '/customer');\n}\nFind the original code at https://github.com/bahmutov/basta-spring-2024-cypress-and-playwright",
    "publishedAt": "2024-03-01T21:17:44Z",
    "url": "https://youtu.be/hDTpRhcOmjs"
  },
  {
    "videoId": "VHLJA_9EJx0",
    "title": "Refactor A Test Part 3: Checking A Paginated List",
    "description": "This is part 3 of refactoring Cypress tests. In this video, I show writing a recursive test that checks a paginated list shown by the app to ensure the deleted user name does not appear in the list. But there are a couple of pitfalls in the application that make writing such tests hard(er). I summarized these tough cases and how to solve them in my blog post \"Solve Tough Pagination Cases Using Cypress\" https://glebbahmutov.com/blog/solve-tough-pagination-cases-using-cypress/ Find the full source code in the repo https://github.com/bahmutov/basta-spring-2024-cypress-and-playwright",
    "publishedAt": "2024-02-29T20:17:22Z",
    "url": "https://youtu.be/VHLJA_9EJx0"
  },
  {
    "videoId": "KrcTbp7lV4A",
    "title": "Refactor A Test Part Two: Data-Driven Tests For Multiple Viewports",
    "description": "In this video, I refactor another spec to replace manual data-driven testing with cypress-each plugin. Find the source code at https://github.com/bahmutov/basta-spring-2024-cypress-and-playwright and the final code in the branch \"updated\" Find the plugin at https://github.com/bahmutov/cypress-each",
    "publishedAt": "2024-02-27T16:56:15Z",
    "url": "https://youtu.be/KrcTbp7lV4A"
  },
  {
    "videoId": "CgmKKs8nmjE",
    "title": "Refactor A Test: Part One",
    "description": "In this video I refactor a couple of tests from the presentation \"Cypress And Playwright\" https://speakerdeck.com/rainerhahnekamp/basta-spring-2024-cypress-und-playwright to how I would code them. Find the initial tests in the repo https://github.com/bahmutov/basta-spring-2024-cypress-and-playwright and the refactored tests in the branch \"updated\". Part 2 is coming",
    "publishedAt": "2024-02-27T14:02:23Z",
    "url": "https://youtu.be/CgmKKs8nmjE"
  },
  {
    "videoId": "H04FSnH-6U0",
    "title": "Click Button If Enabled Using cypress-if And cypress-await Plugins",
    "description": "This video shows how to do conditional testing (click a button only if it is enabled) using my plugins cypress-if and cypress-await.\n// cypress-if solution\ncy.contains('button', 'Click Me')\n  // tests using Chai assertion \"be.enabled\"\n  .if('enabled')\n  .click()\n  .should('have.text', 'Clicked')\n  .else('Nothing to click')\n// cypress-await solution\nconst enabled = cy.contains('button', 'Click Me').invoke('is', ':enabled')\ncy.log(`enabled? ${enabled}`)\nif (enabled) {\n  cy.contains('button', 'Click Me').click().should('have.text', 'Clicked')\n} else {\n  cy.log('Nothing to click')\n}\n\nPlugins repos are https://github.com/bahmutov/cypress-if and https://github.com/bahmutov/cypress-await Look for a blog post with code examples for this video by following https://glebbahmutov.com/blog/",
    "publishedAt": "2024-02-21T15:59:47Z",
    "url": "https://youtu.be/H04FSnH-6U0"
  },
  {
    "videoId": "F5uoYgCenFg",
    "title": "Check If A Button Is Enabled Before Clicking",
    "description": "An example of conditional testing: clicking a button if it is enabled. \ncy.contains('#btn', 'Click Me').invoke('is', ':enabled') ...\nFind the full source code at https://glebbahmutov.com/cypress-examples/recipes/conditional-testing.html",
    "publishedAt": "2024-02-20T18:26:51Z",
    "url": "https://youtu.be/F5uoYgCenFg"
  },
  {
    "videoId": "Kl6H3258wCQ",
    "title": "Quick Toast Test",
    "description": "In this video I am showing how Cypress can test the Toast element from the demo page https://primeng.org/toast We will \"catch\" the popup so we can inspect it in the DOM snapshots to find the right selector and the structure. Then we will confirm the popup has \"successful\" attribute, then the popup goes away. Find the full source code at https://github.com/bahmutov/cypress-toast-example",
    "publishedAt": "2024-02-15T16:40:21Z",
    "url": "https://youtu.be/Kl6H3258wCQ"
  },
  {
    "videoId": "SC6p0LTRg9Y",
    "title": "Click In Parallel",
    "description": "This video shows how you can click on a button while Cypress is running another command. We can use jQuery \"trigger\" method to send the \"click\" event while a Cypress command is running. This is certainly a rare case, but maybe you need this feature. I also show how to access elements using their id from the \"window\" object, both from the application code and from the test code. Find the full code at https://glebbahmutov.com/cypress-examples/recipes/click-in-parallel.html",
    "publishedAt": "2024-02-08T15:50:57Z",
    "url": "https://youtu.be/SC6p0LTRg9Y"
  },
  {
    "videoId": "zB2LYB0yFwQ",
    "title": "Remove Class From Sampled Elements",
    "description": "This video shows how to randomly pick two elements and then remove class \"Secret\" from them using jQuery method \"$.removeClass\". We are going to use cy.sample command from https://github.com/bahmutov/cypress-map plugin. Full source code is at https://glebbahmutov.com/cypress-examples\n// cy.sample commands comes from the cypress-map\ncy.get('#names li').sample(2).invoke('removeClass', 'secret')\n// verify the the result\ncy.get('#names li.secret').should('have.length', 2)\ncy.get('#names li:not(.secret)').should('have.length', 2)",
    "publishedAt": "2024-02-05T19:54:16Z",
    "url": "https://youtu.be/zB2LYB0yFwQ"
  },
  {
    "videoId": "gZtTN9LaD7U",
    "title": "Use cy.second and cy.third Commands",
    "description": "I have added cy.second and cy.third queries to my cypress-map plugin to make writing tests more natural. The plugin documentation is at https://github.com/bahmutov/cypress-map\ncy.get('...').second().should('have.text', '...')",
    "publishedAt": "2024-01-30T16:06:48Z",
    "url": "https://youtu.be/gZtTN9LaD7U"
  },
  {
    "videoId": "HWePftvroI4",
    "title": "Simplify Cypress Parallel Workflow With A Reusable cypress-split Workflow",
    "description": "This video shows how to simplify cypress-map GitHub Actions workflow that uses cypress-split plugin to run Cypress specs in parallel. We are using the \"split\" workflow from https://github.com/bahmutov/cypress-workflows that abstracts all the complexity of running multiple testing containers. For more examples, see the course https://cypress.tips/courses/cypress-split",
    "publishedAt": "2024-01-26T19:56:19Z",
    "url": "https://youtu.be/HWePftvroI4"
  },
  {
    "videoId": "jvBzNs0pRXU",
    "title": "Cut Cypress Execution In Half By Running Tests In Parallel Using cypress-split And GitHub Actions",
    "description": "This video shows how I apply cypress-split plugin to cut the execution time of my Cypress specs in cypress-map repo by half. No external services needed. For more, see the course https://cypress.tips/courses/cypress-split\n- https://github.com/bahmutov/cypress-split\n- https://github.com/bahmutov/cypress-map",
    "publishedAt": "2024-01-25T19:53:31Z",
    "url": "https://youtu.be/jvBzNs0pRXU"
  },
  {
    "videoId": "15F5cK4V-vo",
    "title": "Checkbox Input Element Value",
    "description": "This video shows the difference between the value of a checkbox and its \"checked\" property in Cypress tests. Find the full code at https://glebbahmutov.com/cypress-examples/recipes/input-element-value.html",
    "publishedAt": "2024-01-25T16:13:20Z",
    "url": "https://youtu.be/15F5cK4V-vo"
  },
  {
    "videoId": "1gmudzqQWFg",
    "title": "Input Element Value",
    "description": "This video shows different ways of getting the input HTML element value in Cypress tests:\n- regular element text\n- string input element's value\n- number input element's value\n- checking if the value is stable\nFind the full list of examples with code at https://glebbahmutov.com/cypress-examples/recipes/input-element-value.html",
    "publishedAt": "2024-01-25T15:39:43Z",
    "url": "https://youtu.be/1gmudzqQWFg"
  },
  {
    "videoId": "sxCZKuAdTGY",
    "title": "Select An Option Manually By Setting An Attribute",
    "description": "Sometimes an option can have characters that break the cy.select command. This video shows how you can escape the selector and change the value by invoking the jQuery \"attr\" method on the option. You should also make sure the element is visible and enabled before acting on it to make sure you act like a human user. Find the full source code at https://glebbahmutov.com/cypress-examples/recipes/selected-value.html",
    "publishedAt": "2024-01-23T18:36:24Z",
    "url": "https://youtu.be/sxCZKuAdTGY"
  },
  {
    "videoId": "0axmFrUzNc0",
    "title": "Split The cy.within Block",
    "description": "If the outer element is fully replaced, the cy.within might have the stale element and never find the new content, forcing all commands inside the within callback to fail. This video shows an example of this situation when there are assertions before the cy.within command. I show a couple of solutions. My favorite solution is to split the cy.within callback and move all commands after the action that makes the element re-render to the outside of the first within callback. Find the full source code at https://glebbahmutov.com/cypress-examples/recipes/within-does-not-retry.html",
    "publishedAt": "2024-01-22T19:19:31Z",
    "url": "https://youtu.be/0axmFrUzNc0"
  },
  {
    "videoId": "GrRUnQ2r7Wk",
    "title": "Element's Text Becomes Stable",
    "description": "In this video, I show a custom Cypress query command that checks if the text remains the same for N milliseconds. There is an example implementation plus using cy.sample command from my cypress-map plugin https://github.com/bahmutov/cypress-map Find the full recipe at https://glebbahmutov.com/cypress-examples/recipes/element-is-stable.html",
    "publishedAt": "2024-01-20T23:54:10Z",
    "url": "https://youtu.be/GrRUnQ2r7Wk"
  },
  {
    "videoId": "3BjwoG1dW7o",
    "title": "Query Multiple Elements In Order",
    "description": "If you query multiple elements in order, you can easily attach a single \"should(callback)\" and verify the contents of the found elements. In my video, I need the numbers in 3 elements to add up to the value shown in the 4th element, with elements loading dynamically. Find the full example at https://glebbahmutov.com/cypress-examples/recipes/query-multiple-elements.html and for the best solution I use \"cy.getInOrder\" query command from the plugin https://github.com/bahmutov/cypress-map",
    "publishedAt": "2024-01-17T20:14:57Z",
    "url": "https://youtu.be/3BjwoG1dW7o"
  },
  {
    "videoId": "MvPd_NR11hU",
    "title": "Confirm Input Labels Using DOM Element Property",
    "description": "DOM input elements have a property \"labels\" that links the label elements for that input element. In this video, I show how to access a single label and how to check each label one by one. Find the full source code at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2024-01-17T16:51:59Z",
    "url": "https://youtu.be/MvPd_NR11hU"
  },
  {
    "videoId": "lyiGPnJ2-3g",
    "title": "Conditional Accept",
    "description": "In this video, I show how I would run one of the two possible testing flows depending on the dialog the application shows (a case of A/B testing). We will use jQuery OR selector and then check which case we hit using jQuery \"is(selector)\" method. Depending on the match, we can run different Cypress commands. Find the full source code at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2024-01-16T18:20:51Z",
    "url": "https://youtu.be/lyiGPnJ2-3g"
  },
  {
    "videoId": "Tv0turO2ywA",
    "title": "Use Sanity Assertions",
    "description": "This video shows how to compare two numbers shown on the page. There are few different cases I consider:\n- two static numbers\n- a number could be a NaN\n- numbers are loaded dynamically\n- why negative assertions are dangerous\n- using known data\nFind the full source code at https://glebbahmutov.com/cypress-examples/recipes/use-sanity-assertions.html",
    "publishedAt": "2024-01-12T20:30:41Z",
    "url": "https://youtu.be/Tv0turO2ywA"
  },
  {
    "videoId": "Pn-nGTHiCds",
    "title": "Select DOM Elements Using CSS OR Selector",
    "description": "This video shows how to use CSS OR selector comma operator to grab multiple elements from the page. Remember: the order of the elements will be the order of the elements in the document NOT in the order specified in the selector. I also show how to expand the number of selected elements inside the jQuery subject by invoking the jQuery method \"add\" https://api.jquery.com/add/ Find this recipe at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2024-01-12T15:15:46Z",
    "url": "https://youtu.be/Pn-nGTHiCds"
  },
  {
    "videoId": "ir3pNnyGVM4",
    "title": "Checkboxes With Confirmation",
    "description": "Imagine that the application asks the user to confirm before checking the box. This video shows how to check each unchecked box and assert the \"window.confirm\" method was called with the right message by using Cypress method stub. Find the full recipe at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2024-01-10T18:26:16Z",
    "url": "https://youtu.be/ir3pNnyGVM4"
  },
  {
    "videoId": "s7qFSFa4eT8",
    "title": "Check All Boxes",
    "description": "This video shows how to deal with multiple checkboxes in your Cypress tests. We will select them, test their values, check the boxes, etc. Find the full recipe at https://glebbahmutov.com/cypress-examples/ and the cypress-map plugin at https://github.com/bahmutov/cypress-map",
    "publishedAt": "2024-01-09T15:27:13Z",
    "url": "https://youtu.be/s7qFSFa4eT8"
  },
  {
    "videoId": "48fmryvaTNE",
    "title": "Attributes Vs Properties",
    "description": "This video explains the difference between HTML attributes and DOM element properties and how to check each type from the Cypress tests. Find the full recipe at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2024-01-05T19:55:19Z",
    "url": "https://youtu.be/48fmryvaTNE"
  },
  {
    "videoId": "uJF2tnxN1dk",
    "title": "Check Broken Images On The Page",
    "description": "This video shows how Cypress test can check if an image on the page truly loads or not. I am showing the solution for a single image or for all images on the page. Find the full source code in the recipe \"Image Has Loaded\" at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2024-01-04T21:23:24Z",
    "url": "https://youtu.be/uJF2tnxN1dk"
  },
  {
    "videoId": "mdNuuKl2dpw",
    "title": "DOM Element With ID Becomes Property Of The Window Object",
    "description": "If you have a DOM element with \"id=value\" attribute, then it is automatically attached to the DOM \"window\" object under the property \"value\". Find the full source code at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-12-20T17:36:04Z",
    "url": "https://youtu.be/mdNuuKl2dpw"
  },
  {
    "videoId": "Cn3Xx4w0OeQ",
    "title": "Parse RGB Color With Retries",
    "description": "This video shows how to build a chain of query commands that extract the CSS color of an element which is a string like \"rgb(red, green, blue)\" and then parse it using named capturing groups, then convert strings into numbers and assert each number. Because we use only queries, the entire chain will retry until the element does change its color into the expected red-only value. Find the full source code at https://glebbahmutov.com/cypress-examples/. Tip: I use \"cypress-map\" plugin to bring queries like cy.print and cy.map into my specs https://github.com/bahmutov/cypress-map",
    "publishedAt": "2023-12-19T16:46:08Z",
    "url": "https://youtu.be/Cn3Xx4w0OeQ"
  },
  {
    "videoId": "Tm3y2Lw2Jic",
    "title": "Select Hidden Or Visible Elements",
    "description": "This video shows jQuery selectors \":hidden\" and \":visible\" you can use in your Cypress tests. For example, to find hidden LI elements inside the parent with id \"people\" you could write cy.get('#people li:hidden') Similarly, to find visible elements you can use cy.get('#people li:visible') Find the full example at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-12-18T16:20:05Z",
    "url": "https://youtu.be/Tm3y2Lw2Jic"
  },
  {
    "videoId": "lnYd0cPnCa8",
    "title": "Refactor Cypress Tests Checking Alerts And Modals",
    "description": "This video shows a quick refactoring of Cypress tests that check alerts and modals. Find the \"before\" and \"after\" source code in the repo https://github.com/bahmutov/webdriverSite For more information:\n- sinon spies and stubs https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html\n- negative assertions https://glebbahmutov.com/blog/negative-assertions/\n- cy.intercept and network testing: my course https://cypress.tips/courses/network-testing\n- command - action - command - action approach to writing E2E tests see my open source Cypress Basics workshop https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2023-12-04T17:38:32Z",
    "url": "https://youtu.be/lnYd0cPnCa8"
  },
  {
    "videoId": "iktuHW7tyiY",
    "title": "Handle Telephone And Other Custom Protocol Links In Cypress Tests",
    "description": "In this video, I show how you can confirm the A links are leading to the right telephone numbers when the app sets window.navigator.href=\"tel:+1...\" which usually open another application that is registered to handle \"tel:\" links. Find the full source code at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-12-01T18:00:32Z",
    "url": "https://youtu.be/iktuHW7tyiY"
  },
  {
    "videoId": "wIEW7jSzDVQ",
    "title": "Set Aliased Value TypeScript Type Value In Cypress Tests",
    "description": "Whenever you get an aliased value using cy.get(alias name) command, it assumes by default that the value is a jQuery object. But if you store an alias to a string, for example, TypeScript will complain:\ncy.wrap(\"hello\").as(\"greeting\")\ncy.get(\"@greeting\")\n// TypeScript thinks you are checking a jQuery object :(\n  .should(\"equal\", \"hello\")\nThis video shows a fix from my course \"Testing The Swag Store\" https://cypress.tips/courses/swag-store where I declare the type for the yielded value when calling \"cy.get\". Since YouTube does not allow angular brackets, I will use LT and RT strings\ncy.get LT string RT (\"@greeting\")\n  // TS knows the current value is a string\n  .should(\"equal\", \"hello\")\nFor more tips, read my blog post \"Cypress v10 Tips and Tricks\" https://glebbahmutov.com/blog/cypress-v10-tips/",
    "publishedAt": "2023-11-22T18:22:14Z",
    "url": "https://youtu.be/wIEW7jSzDVQ"
  },
  {
    "videoId": "28Q9aJFpgwQ",
    "title": "Wrap Asynchronous Function",
    "description": "In this video, I show how Cypress can call asynchronous functions and then use their results without any boilerplate code, just using cy.wrap or cy.then commands. Find the full source code at https://glebbahmutov.com/cypress-examples/recipes/wrap-promises.html and read the \"The Zen Of Cypress Data Setup\" blog post at https://glebbahmutov.com/blog/setup-cypress-data/",
    "publishedAt": "2023-11-14T15:28:32Z",
    "url": "https://youtu.be/28Q9aJFpgwQ"
  },
  {
    "videoId": "70kRnoMuzds",
    "title": "Filter Elements And Items With Retries",
    "description": "This video shows how to filter DOM elements using the cy.filter command and how to filter items in an array using the cy.invoke command that uses the \"filter\" Array method. Find the full source code in the repo https://github.com/bahmutov/cypress-map Tip: by chaining these query command we retry getting the data or elements if the assertion fails.",
    "publishedAt": "2023-11-06T16:27:58Z",
    "url": "https://youtu.be/70kRnoMuzds"
  },
  {
    "videoId": "lWWzQFt-0BI",
    "title": "Check Cards Test Refactoring",
    "description": "🎉🎉🎉🎉🎉 Cypress Tips video 500 🎉🎉🎉🎉🎉\nIn this video, I refactor an example test to be shorter and to work correctly. Find the full refactoring at https://glebbahmutov.com/cypress-examples and I will probably write a blog post about it, follow RSS feed at https://glebbahmutov.com/blog/",
    "publishedAt": "2023-11-01T16:31:43Z",
    "url": "https://youtu.be/lWWzQFt-0BI"
  },
  {
    "videoId": "YpbkEBE42QI",
    "title": "Find The Right Item Using The cy.within Command Or The Parent Selector",
    "description": "Sometimes finding an item can give a wrong match. In this video, I explain my strategy for finding the right item inside the right parent element. You can either use cy.within or combine selectors to target both the right parent and the item.\ncy.get('#items').within(function () {\n  // there should be several items\n  cy.get('li').should('have.length.above', 0)\n  // find the product we are looking for\n  cy.contains('li', 'Apples')\n    // and confirm its \"data\" attributes\n    .should('have.attr', 'data-product-id', '190')\n    .and('have.attr', 'data-price', '299')\n})\nFind the full recipe with more solutions at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-10-25T16:46:36Z",
    "url": "https://youtu.be/YpbkEBE42QI"
  },
  {
    "videoId": "sppI7xabyoA",
    "title": "Confirm That Every Element With A Data Attribute Has The HREF Attribute Too",
    "description": "Imagine you want to find all elements that have some \"data-*\" attribute and confirm they also have \"href\" attribute. How would you select them? This video shows how to select all elements using wildcard selector \"*\" and then filter the elements using cy.filter command before checking each element using cy.each. Find the full example at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-10-19T15:57:43Z",
    "url": "https://youtu.be/sppI7xabyoA"
  },
  {
    "videoId": "8IXrq9BEWSg",
    "title": "Compare Two Lists Of Elements Examples",
    "description": "Imagine we have two lists of LI elements on the page and want to confirm that the items:\n- have the same exact text in the same order\n- or have the same text regardless of the order\n- or one list is a subset of another list\n- or lists load dynamically\nThis video shows and explains how to write Cypress tests in each case. Find the source code and lots more examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-10-18T13:38:35Z",
    "url": "https://youtu.be/8IXrq9BEWSg"
  },
  {
    "videoId": "Emvz1PDRl3M",
    "title": "Cy Within Command Does Not Retry",
    "description": "This video shows an example of cy.within using a stale DOM element, causing the test to fail. I explain why this happens and how to solve it. Find the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-10-17T16:47:38Z",
    "url": "https://youtu.be/Emvz1PDRl3M"
  },
  {
    "videoId": "6KmpQjBduY8",
    "title": "last-of-type And first-of-type CSS Selectors Examples",
    "description": "Two less-known CSS selectors that let you pick one element among siblings quickly: \":last-of-type\" and \":first-of-type\". \ncy.get('dl dd:last-of-type')\n  .should('have.css', 'border')\n  .should('be.a', 'string')\n  .should('include', 'solid')\ncy.get('dt:first-of-type').should('have.text', 'Vegetables:')\nFind more examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-10-11T16:05:09Z",
    "url": "https://youtu.be/6KmpQjBduY8"
  },
  {
    "videoId": "xUiCl0p8J84",
    "title": "Table Pagination Solution Using Plain DOM Methods",
    "description": "This is another solution to the Cypress Pagination Challenge using plain JavaScript DOM methods and a \"while\" loop. Find the code at https://glebbahmutov.com/blog/cypress-pagination-challenge/",
    "publishedAt": "2023-10-06T16:42:16Z",
    "url": "https://youtu.be/xUiCl0p8J84"
  },
  {
    "videoId": "KFgXqV0zuDw",
    "title": "Lesson n2: Table Pagination Solution",
    "description": "This is a solution to the Cypress Pagination Challenge https://cypress.tips/courses/cypress-plugins/lessons/n1 using plain Cypress syntax recursion. Find the source code and derivation in the blog post and in the free lesson \"Lesson n2: Table pagination solution\" https://cypress.tips/courses/cypress-plugins/lessons/n2 Find the starting source code in the repository https://github.com/bahmutov/cypress-pagination-challenge For more, read the blog post https://glebbahmutov.com/blog/cypress-pagination-challenge/",
    "publishedAt": "2023-09-29T15:04:58Z",
    "url": "https://youtu.be/KFgXqV0zuDw"
  },
  {
    "videoId": "ZJcJNwli10I",
    "title": "Check N Items Or That Nothing Was Found",
    "description": "This video explains how to verify that the dynamic list loads 3 items OR shows \"Nothing found\" zero state element. Find the full source code at https://glebbahmutov.com/cypress-examples/recipes/number-of-elements.html Note: \":contains(text)\" is a jQuery selector, not a built-in CSS selector",
    "publishedAt": "2023-09-22T13:16:15Z",
    "url": "https://youtu.be/ZJcJNwli10I"
  },
  {
    "videoId": "qL5R0C-0_-Y",
    "title": "Zero Or Three Elements After Loading The Data",
    "description": "This video shows a more advanced test case: confirming the number of list elements shown by the application after the initial data load when there could be zero items. We can use a separate HTML attribute to signal from the application the load has finished, and this simplifies and speeds up the test. Find the full source code at https://glebbahmutov.com/cypress-examples/recipes/number-of-elements.html",
    "publishedAt": "2023-09-18T22:32:08Z",
    "url": "https://youtu.be/qL5R0C-0_-Y"
  },
  {
    "videoId": "uKpJZbEc6HY",
    "title": "Confirm The Number Of Elements In Different Scenarios",
    "description": "This video shows how to confirm / print the number of elements in the list in various scenarios:\n- static list\n- dynamic list\n- list loads slowly\n- print the number of elements\n- number of elements could be one of different values\n- number of elements should follow a rule\nFind these recipes at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-09-12T13:26:00Z",
    "url": "https://youtu.be/uKpJZbEc6HY"
  },
  {
    "videoId": "hmbx_f5Nlfs",
    "title": "Disable ServiceWorker In Cypress Test",
    "description": "In Cypress v13 the ServiceWorker serving the index page seems to break the cy.visit command. This video shows a workaround: disabling the ServiceWorker in your browser. You can find this workaround in the blog post \"Cypress Tips And Tricks\" https://glebbahmutov.com/blog/cypress-tips-and-tricks/ that you can find by searching my site https://cypress.tips/search",
    "publishedAt": "2023-09-08T13:54:49Z",
    "url": "https://youtu.be/hmbx_f5Nlfs"
  },
  {
    "videoId": "uB__3tHRHyA",
    "title": "Set Up Cypress Test Replay On GitHub Actions",
    "description": "This is the first test of Cypress Test Replay v13.1.0 using GitHub Actions CI. Find the source code in repo https://github.com/bahmutov/type-placeholders",
    "publishedAt": "2023-09-05T21:25:31Z",
    "url": "https://youtu.be/uB__3tHRHyA"
  },
  {
    "videoId": "Z4nDKbWMkJc",
    "title": "Type Placeholders Into The Form: manpm and cypress-await example",
    "description": "This video shows how Cypress can read the \"placeholder\" attributes and type them into the input fields. I also show how cypress-await plugin can help simplify the test syntax. For more, see https://github.com/bahmutov/type-placeholders\n- manpm is at https://github.com/bahmutov/manpm\n- cypress-await is at https://github.com/bahmutov/cypress-await",
    "publishedAt": "2023-09-05T18:48:13Z",
    "url": "https://youtu.be/Z4nDKbWMkJc"
  },
  {
    "videoId": "iRJJqijuFYI",
    "title": "Validate Email Format Using Built-in Browser Input Element",
    "description": "We can quickly check if a string follows the email standard by creating a temporary DOM input type=email element, setting its value, and then checking its validity. Find this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-08-22T19:59:08Z",
    "url": "https://youtu.be/iRJJqijuFYI"
  },
  {
    "videoId": "IQpc3pJM49g",
    "title": "See All Chrome Browser Command Line Flags Cypress Uses To Launch The Browser",
    "description": "Cypress sets a lot of command line switches to control the launched browser to ensure consistent testing behavior. You can see these flags by opening the special URL \"chrome://version\". If you want to modify or add new flags, see Cypress docs at https://on.cypress.io/browser-launch-api For more tips, check out \"Cypress v10 Tips & Tricks\" https://glebbahmutov.com/blog/cypress-v10-tips/",
    "publishedAt": "2023-08-21T22:01:29Z",
    "url": "https://youtu.be/IQpc3pJM49g"
  },
  {
    "videoId": "opOopVq5AmA",
    "title": "cypress-await Sync Mode Example",
    "description": "This video shows how my plugin https://github.com/bahmutov/cypress-await sync mode preprocessor can automatically transform Cypress specs to allow direct assignment of values in Cypress to avoid a pyramid of callbacks. This plugin allows you to simply get the value:\nconst text = cy.get(selector).invoke('text')\nconst n = cy.wait(alias).its('response.body.length')\nFind the full application example at https://github.com/bahmutov/cypress-todomvc-await-example and read the blog post \"Use Async Await In Cypress Specs\" https://glebbahmutov.com/blog/use-async-await-in-cypress-specs/",
    "publishedAt": "2023-08-18T17:23:16Z",
    "url": "https://youtu.be/opOopVq5AmA"
  },
  {
    "videoId": "xvoVVya5_Rc",
    "title": "Add A Cypress Test To Confirm The Filtered List Of Projects",
    "description": "In this video, I start testing my personal website https://glebbahmutov.com/ to make sure it shows the correct number of projects when filtered by the user.",
    "publishedAt": "2023-08-16T16:46:43Z",
    "url": "https://youtu.be/xvoVVya5_Rc"
  },
  {
    "videoId": "DgUIfQLFOcM",
    "title": "Cypress Pagination Challenge",
    "description": "I have set up a small web example to challenge you to write a Cypress test. Can you click on the \"Next\" button until you get to the last page of the data table using plain Cypress syntax or any plugins? Find the starting code at https://github.com/bahmutov/cypress-pagination-challenge and try your hand at writing Cypress tests. I will start announcing my solutions in September by posting them as lessons to my \"Cypress Plugins\" course first https://cypress.tips/courses/cypress-plugins and then making them public after a few days. Can you come up with a better solution? I am sure you can try!",
    "publishedAt": "2023-08-14T12:44:24Z",
    "url": "https://youtu.be/DgUIfQLFOcM"
  },
  {
    "videoId": "PLP5Bq7KHTk",
    "title": "cypress-if Plugin Supports Cypress v12+: Close The Popup Dialog If It Is Visible",
    "description": "This short video shows the new release of cypress-if plugin for writing conditional logic in Cypress tests. The plugin finally supports Cypress v12+ thanks to the pull request https://github.com/bahmutov/cypress-if/pull/65 \nThe test to conditionally close the popup dialog is:\ncy.get('aside.banner')\n  .if('visible')\n  .wait(1000)\n  .contains('button', 'Agree')\n  .click()\n  .else()\n  .log('**not visible**')\ncy.get('aside.banner').should('not.be.visible')\nFor more see the plugin's README https://github.com/bahmutov/cypress-if",
    "publishedAt": "2023-08-08T14:19:15Z",
    "url": "https://youtu.be/PLP5Bq7KHTk"
  },
  {
    "videoId": "5faeSbvCJQY",
    "title": "Await Cypress Command Results",
    "description": "It would be really cool if one could write something like this in Cypress specs using the \"await\" syntax to get the results:\nawait cy.visit('/')\nconst n = await cy.get('#projects-count').invoke('text').then(parseInt)\ncy.log(n)\nexpect(n, 'number of projects').to.be.within(350, 400)\nNow it is possible. I will publish the code later. If you want to stay tuned, subscribe to this youtube channel and to my monthly newsletter at https://cypresstips.substack.com/ The code for this video is in https://github.com/bahmutov/cy-await but this is very very very ALPHA",
    "publishedAt": "2023-08-05T20:34:29Z",
    "url": "https://youtu.be/5faeSbvCJQY"
  },
  {
    "videoId": "my1s6US7KKY",
    "title": "Prepare To Spy On A Method Added Dynamically",
    "description": "This video teaches you two things:\n- how to wait for the method to exist before spying on it\n- how to start spying on the method _immediately_ when the application creates it.\nFind the full recipe at https://glebbahmutov.com/cypress-examples/#spies-and-stubs",
    "publishedAt": "2023-08-03T16:21:00Z",
    "url": "https://youtu.be/my1s6US7KKY"
  },
  {
    "videoId": "4tiwHmi3pdk",
    "title": "Shrink The Time Gap",
    "description": "This video shows how to guard against unexpected elements that might appear during the test execution. Find the full discussion in the blog post \"Shrink The Time Gap\" at https://glebbahmutov.com/blog/shrink-the-time-gap/ The final solution checks if the element goes away, and then checks for the final state to appear without any time delay by using the \"timeout:0\" option:\ncy.contains('button', 'load').click()\ncy.contains('button', 'Loading')\ncy.contains('button', 'Loading').should('not.exist')\ncy.contains('Loaded', { timeout: 0 })",
    "publishedAt": "2023-07-31T14:55:14Z",
    "url": "https://youtu.be/4tiwHmi3pdk"
  },
  {
    "videoId": "sVb5MU2AkqE",
    "title": "Confirm Sorted Attributes",
    "description": "If you need to get an attribute from each DOM element, and you don't care about the order, you should compare sorted arrays. This video shows how to grab a \"data-...\" attribute using plain Cypress syntax and cypress-map plugins. Find the full recipe at https://glebbahmutov.com/cypress-examples Here is the cypress-map solution\n// the expected SKU numbers\nconst skus = ['00991C', '00100C', '00500A', '0044B'].sort()\ncy.get('#purchases li')\n  .map('dataset.sku')\n  .invoke('sort')\n  .print()\n  .should('deep.equal', skus)",
    "publishedAt": "2023-07-28T18:19:45Z",
    "url": "https://youtu.be/sVb5MU2AkqE"
  },
  {
    "videoId": "qCqzS3LtSeI",
    "title": "Dispatch Custom HTML Events From Cypress Tests",
    "description": "Sometimes an element on the page subscribes to custom events. You can dispatch events using plain HTML method \"el.dispatchEvent\" or by using Cypress command \"cy.trigger\"\ncy.get('#signal').then(function ($el) {\n  $el[0].dispatchEvent(new CustomEvent('go'))\n})\n// using cy.trigger\ncy.get('#signal').trigger('warn')\nFind the full example recipe at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-07-27T17:23:17Z",
    "url": "https://youtu.be/qCqzS3LtSeI"
  },
  {
    "videoId": "tMeKIIfEhyo",
    "title": "Iterate Over DOM Elements Using cy.each, jQuery each and map, and cypress-map Plugin Commands",
    "description": "This video shows how to iterate over DOM elements found using commands like cy.each, jQuery methods, and queries from my plugin \"cypress-map\". Find the full iteration recipe with all these tests at https://glebbahmutov.com/cypress-examples and the plugin at https://github.com/bahmutov/cypress-map",
    "publishedAt": "2023-07-26T15:46:26Z",
    "url": "https://youtu.be/tMeKIIfEhyo"
  },
  {
    "videoId": "hMzqiSUVGwA",
    "title": "Escape Regular Expression Text When Using cy.contains Command",
    "description": "This video shows how to escape special characters like \"$\", \"[]\", and \"^\" when creating regular expressions to use with cy.contains command. You can escape the characters yourself or use the Lodash method Cypress._.escapeRegExp bundled with Cypress to do it for you\nconst suffix = '$/day'\nconst regex = new RegExp(Cypress._.escapeRegExp(suffix))\ncy.contains(regex).should('have.id', 'rate')\nFind the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-07-25T18:04:02Z",
    "url": "https://youtu.be/hMzqiSUVGwA"
  },
  {
    "videoId": "QfOR5IwndiE",
    "title": "Test AG Grid Table Using Cypress And Cypress-Map Plugin",
    "description": "This video shows how I would confirm the column of values in the AG Grid table component using Cypress with cypress-map plugin. For more information, see:\n- https://github.com/bahmutov/cypress-map\n- https://cypress.tips/courses\n- https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-07-24T15:38:33Z",
    "url": "https://youtu.be/QfOR5IwndiE"
  },
  {
    "videoId": "zdjjBRt6Z74",
    "title": "Verify Cypress Component Prop Calls Using Stubs, cypress-map, and cy-spok",
    "description": "This video shows how to mount a react-number-format component in a Cypress component spec and pass a Sinon stub as a prop. Then we can interact with the component: clear it, then type a number. We can verify the stub was called correctly in several ways. My favorite is to use either cypress-map command \"cy.map\" (https://github.com/bahmutov/cypress-map) and \"deep.equal\" assertion, or by using cy-spok plugin (https://github.com/bahmutov/cy-spok). You should also read the blog post \"Testing React Number Format Component Example\" https://glebbahmutov.com/blog/test-react-number-format/",
    "publishedAt": "2023-07-20T18:15:19Z",
    "url": "https://youtu.be/zdjjBRt6Z74"
  },
  {
    "videoId": "OXiEJDjozQo",
    "title": "Remove Numbers From Strings",
    "description": "This video shows how to take multiple elements, remove numbers from each text, trim those strings, and confirm them. \ncy.get('#fruit li') // jQuery Element[]\n  .map('innerText') // string[]\n  .mapInvoke('replace', /[\\d\\s]/g, '') // string[]\n  .should('deep.equal', ['Apples', 'Grapes', 'Kiwi'])\nThe retryable query commands \"cy.map\" and \"cy.mapInvoke\" come from my plugin https://github.com/bahmutov/cypress-map The full example is at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-07-20T15:34:01Z",
    "url": "https://youtu.be/OXiEJDjozQo"
  },
  {
    "videoId": "oNMmMZWOQnA",
    "title": "Cypress vs Playwright Course Announcement",
    "description": "We live in the golden age of web application testing. We have two leading testing tools Cypress and Playwright being actively developed and widely used. This course teaches both tools using the same web application examples. I will try highlighting the differences between the two test runners and the strengths of each one. The course lessons are available at https://cypress.tips/courses",
    "publishedAt": "2023-07-19T17:51:36Z",
    "url": "https://youtu.be/oNMmMZWOQnA"
  },
  {
    "videoId": "B6LqwUHXCcg",
    "title": "Compare Text In An Element Against Several Possible Values Using oneOf Assertion",
    "description": "You can confirm an element has text that matches string A OR string B OR string C etc using the Chai \"oneOf\" assertion.\ncy.get('#guest-name')\n  .invoke('text')\n  .should('be.oneOf', ['Joe', 'Mary', 'Anna'])\nI prefer the above code to a regular expression. Find this example at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-07-18T14:15:05Z",
    "url": "https://youtu.be/B6LqwUHXCcg"
  },
  {
    "videoId": "x9fTpOwp600",
    "title": "Filter And Parse Table Cells To Confirm The Sum Of Prices",
    "description": "In this video, I show how to get the right cells from the table, parse their text, and then confirm the sum of prices is equal to $8. Find the full recipe at https://glebbahmutov.com/cypress-examples\nfunction sumCaPrices(state) {\n  return cy\n    .get('table#prices tbody tr td:nth-child(2)')\n    .filter(function (k, el) { return el.innerText.startsWith(state) })\n}\nsumCaPrices('CA')\n  .map('innerText')\n  .mapInvoke('split', '$')\n  .mapInvoke('at', 1)\n  .map(Number)\n  .reduce(function (sum, current) { return sum + current }, 0)\n  .should('equal', 8)\nTip: cy.map, cy.mapInvoke, cy.print, cy.reduce come from my plugin https://github.com/bahmutov/cypress-map",
    "publishedAt": "2023-07-17T14:41:30Z",
    "url": "https://youtu.be/x9fTpOwp600"
  },
  {
    "videoId": "T2Ez3jt6Kpc",
    "title": "Cypress Random Data And Custom Commands Example",
    "description": "In this video, I show using NPM module \"Chance\" to generate random sentences to use during Cypress end-to-end tests. The video shows the difference between generating random data inside a custom command vs passing the generated text as an argument. Find the source code in the repo https://github.com/bahmutov/cypress-random-data",
    "publishedAt": "2023-07-06T14:16:13Z",
    "url": "https://youtu.be/T2Ez3jt6Kpc"
  },
  {
    "videoId": "9uHEBxx_CDI",
    "title": "Test Element Overflow Using A Custom Cypress Chai Assertion",
    "description": "In this video, I add a custom Chai assertion that checks if a DOM element is overflowing with content. Find the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-06-29T17:55:00Z",
    "url": "https://youtu.be/9uHEBxx_CDI"
  },
  {
    "videoId": "BWuWf8mqe3k",
    "title": "The Text Of Each Element Starts With The Given String",
    "description": "Let's confirm the search results when searching for text \"mi\" all start with this text (ignoring the case)\ncy.get('[name=state]').type('mi')\ncy.get('#search-results li')\n  .should('exist')\n  .each(function ($li, k) {\n    const text = $li.text()\n    expect(text, `state ${k + 1}`).to.match(/^mi/i)\n  })\nFind this example at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-06-28T13:48:34Z",
    "url": "https://youtu.be/BWuWf8mqe3k"
  },
  {
    "videoId": "DHtWLKueA3o",
    "title": "Find Input Element By The Current Value",
    "description": "This video shows how to find an input element by its \"value\" attribute. You can find elements using the exact static value, or its prefix, or suffix, or even matching part of the string value. But what about the input elements with the value set dynamically by the application? You no longer have the attribute to select the element, you must filter the input elements yourself. For example, to find the input element with the string \"0\" in its current value you could write:\ncy.get('input#area').type('404')\ncy.get('input')\n  .filter(function (k, input) {\n    return input.value.includes('0')\n  })\n  .should('have.value', '404')\nThis recipe comes from http://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-06-16T17:33:00Z",
    "url": "https://youtu.be/DHtWLKueA3o"
  },
  {
    "videoId": "BQKO6w5EST0",
    "title": "Click And Count Each Element",
    "description": "Imagine you have a table. Each row has a button that you must click to reveal a number in the next cell. We need to get those numbers from every row and add them all up and confirm the total sum is 18. This video shows how to correctly use cy.each and cy.then command to order all actions. Find this recipe at http://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-06-15T17:37:04Z",
    "url": "https://youtu.be/BQKO6w5EST0"
  },
  {
    "videoId": "87yWwGk40Ok",
    "title": "Conditional Count Elements After They Have Been Loaded",
    "description": "This video shows examples of conditional testing when we check the number of elements - and those elements might not exist, or might be loaded by the application after a timeout. Find the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-06-14T15:39:45Z",
    "url": "https://youtu.be/87yWwGk40Ok"
  },
  {
    "videoId": "ZslHKPtwIhA",
    "title": "Spying On The Console Log Method",
    "description": "We can spy on the console.log calls the application makes. We can even confirm that event listeners registered using \"once: true\" option in fact fire only for the first user event and do not fire after that. Find the full source code at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-06-13T15:31:15Z",
    "url": "https://youtu.be/ZslHKPtwIhA"
  },
  {
    "videoId": "_rlsKq6YscQ",
    "title": "Store Values Using Should Callback Function",
    "description": "Cypress retries querying commands like cy.contains and cy.get. You can attach assertions to the command to retry the command until the assertion passes: cy.get('#output').should('have.text', '42') You can even have \".should(callback)\" to write your own logic to check the current subject element. For example, you could store all values you see during retries and then later validate the seen values:\ncy.log('**shows 5 messages**')\nconst messages = new Set()\ncy.contains('button', 'Start').click()\ncy.get('#output').should(function ($el) {\n  const text = $el.text()\n  messages.add(text)\n  expect(text).to.equal('42')\n})\ncy.wrap(messages).then(Array.from).should('have.length.gte', 5)\nFind this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-06-12T20:34:05Z",
    "url": "https://youtu.be/_rlsKq6YscQ"
  },
  {
    "videoId": "6vw47x6Nqc0",
    "title": "Check N Checkboxes",
    "description": "This video shows how to check multiple checkboxes and how to validate the number of checked and clear boxes in your Cypress tests\n// there are no checked boxes at first\ncy.get('input[type=checkbox]:checked').should('have.length', 0)\nconst n = Cypress._.random(1, 5)\ncy.log(`checking the first ${n} boxes`)\nfor (let k = 0; k less than n; k += 1) {\n  cy.get('input[type=checkbox]').eq(k).check()\n}\ncy.get('input[type=checkbox]:checked').should('have.length', n)\n// clear boxes\ncy.get('input[type=checkbox]:not(:checked)').should(\n  'have.length',\n  5 - n,\n)\nFind this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-06-12T19:53:14Z",
    "url": "https://youtu.be/6vw47x6Nqc0"
  },
  {
    "videoId": "rFUf7xdtt-I",
    "title": "Cypress Component Testing Vs RTL and MSW: The Missing Comparison Part",
    "description": "This video shows Murat Ozcan's \"Cypress Component Testing vs React Test Library - the complete comparison\" blog post (https://dev.to/muratkeremozcan/cypress-component-testing-vs-react-test-library-the-complete-comparison-28gn) and shows what I think is the most important part of comparing the two approaches for testing React components: the developer experience. Jest (with RTL) use the terminal JSDom, while Cypress gives you the real browser with time traveling debugger, making debugging errors so so so much simpler in Cypress. The test component examples come from the repo https://github.com/muratkeremozcan/tour-of-heroes-react-vite-cypress-ts For more, read my blog post https://glebbahmutov.com/blog/my-vision-for-component-tests/",
    "publishedAt": "2023-06-09T20:23:08Z",
    "url": "https://youtu.be/rFUf7xdtt-I"
  },
  {
    "videoId": "bxUqLri-ywI",
    "title": "Search My Cypress Courses",
    "description": "I have finally scraped all my courses and added a search widget to https://cypress.tips/search and https://cypress.tips/courses pages that lets you search them. You can find any lesson, even from the courses you are not enrolled in yet.",
    "publishedAt": "2023-06-08T14:57:19Z",
    "url": "https://youtu.be/bxUqLri-ywI"
  },
  {
    "videoId": "iX5EKZtKKvQ",
    "title": "Add Cypress AUTWindow Properties",
    "description": "In this video, I show how to set the TypeScript properties for the application's window during Cypress tests. For example, you might need to pass something to the application from a Cypress test, but TS would complain that the property \"window.foo\" is invalid. By setting the \"foo\" property in the interface Cypress.AUTWindow you can let your TS compiler know about the optional property \"foo\" used by the test. This lesson comes from my course \"Testing The Swag Store\" https://cypress.tips/courses/swag-store",
    "publishedAt": "2023-06-06T16:17:58Z",
    "url": "https://youtu.be/iX5EKZtKKvQ"
  },
  {
    "videoId": "nDXAaWdj6tw",
    "title": "cy.contains And Regular Expressions Examples",
    "description": "You can use the versatile cy.contains command to find elements on the page by text. You can also:\n- ignore the text case using \"matchCase: false\" option\n- use regular expressions\n- construct a regular expression if the string to find comes from a variable\nFor example:\nconst value = 'hello'\nconst regex = new RegExp('^' + value, 'i')\ncy.contains('#greeting', regex)\nFind this and many more examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-06-05T14:05:50Z",
    "url": "https://youtu.be/nDXAaWdj6tw"
  },
  {
    "videoId": "QkwYEQmf-VI",
    "title": "Find Table Column Index",
    "description": "You can find the index of a DOM element among its siblings. For example, to confirm that the \"Age\" column is the third column of the table, you can invoke the jQuery \"index\" method and confirm the yielded value\ncy.contains('table thead th', 'Age')\n  .invoke('index')\n  .should('equal', 3)\nFind this example and many more at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-06-04T16:52:03Z",
    "url": "https://youtu.be/QkwYEQmf-VI"
  },
  {
    "videoId": "hLHYacIUO9I",
    "title": "Built-in Existence Assertion",
    "description": "Cypress querying commands like cy.get, cy.find, cy.contains have a built-in existence assertion. The following commands are equivalent:\ncy.get('selector').should('exist')\n// same as\ncy.get('selector')\nIf you are not sure if the element is there or not, you can disable the built-in existence assertion by providing your own \"should(callback)\" \n\ncy.get('#parentz').should(function ($el) {\n  if ($el && $el.length) {\n    expect($el.text()).to.equal('Hello')\n  }\n})\n\nFind this example at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-05-30T14:07:42Z",
    "url": "https://youtu.be/hLHYacIUO9I"
  },
  {
    "videoId": "6iQZhtXSag8",
    "title": "Simplify Sum Of Numbers Example To Avoid Callback Pyramid Of Doom",
    "description": "This example shows using custom query commands and aliases to simplify a pyramid of cy.then callbacks. The final solution is short and sweet and can be found at https://glebbahmutov.com/cypress-examples\nCypress.Commands.addQuery('lastNumber', function () {\n  const regex = /\\d+$/g\n  return function ($el) {\n    return parseInt($el.text().match(regex).pop())\n  }\n})\n// last digits of the string\ncy.get('#counts').lastNumber().as('all')\n\n// show drafts\ncy.get('input#draft').check()\ncy.get('#counts').lastNumber().as('draft')\n\n// show published\ncy.get('input#published').check()\ncy.get('#counts')\n  .lastNumber()\n  .then(function (published) {\n    expect(this.draft + published, 'draft + published').to.equal(\n      this.all,\n    )\n  })",
    "publishedAt": "2023-05-26T15:43:51Z",
    "url": "https://youtu.be/6iQZhtXSag8"
  },
  {
    "videoId": "xvImOlCSul4",
    "title": "Confirm The Same Text In A Couple Of Elements",
    "description": "You can confirm two elements on the page have the same text:\ncy.get('h2#one')\n  .invoke('text')\n  .then(function (text) {\n    cy.contains('#subject', text)\n  })\nRemember: any time you get something from the page, you must use the value inside \"cy.then(callback)\" function\nIf you have more than two elements, it works the same way. For example, let's pick a random SELECT option and then confirm the text is shown in two places:\ncy.get('#fruit option')\n  .should('have.length.greaterThan', 2)\n  .mapInvoke('getAttribute', 'value')\n  .print()\n  .sample()\n  .print('picked %o')\n  .then(function (name) {\n    cy.get('#fruit').select(name)\n    cy.contains('#selected-fruit', name)\n    cy.contains('#name', name)\n  })\nNote: commands cy.mapInvoke, cy.print, cy.sample come from https://github.com/bahmutov/cypress-map plugin. \nFind this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-05-25T14:43:15Z",
    "url": "https://youtu.be/xvImOlCSul4"
  },
  {
    "videoId": "xvvL3GRjXCY",
    "title": "Pick A Random Menu Link",
    "description": "This video shows how to pick a random menu navigation link and click on it and check if we are navigating to the page. \ncy.contains('main', 'Index page')\n// cy.sample comes from cypress-map plugin\ncy.get('nav a').sample().click()\ncy.location('pathname').should(\n  'match',\n  /\\/menu\\/[a-d]\\/index\\.html/,\n)\nIf you cannot use cypress-map plugin, you can still pick a random element using the following code:\ncy.get('nav a')\n  .then(function ($a) {\n      return Cypress._.sample($a.toArray())\n   })\n  .click()\nFind this code in https://github.com/bahmutov/cypress-recurse repo. Find more exercises in my Cypress Plugins course https://cypress.tips/courses/cypress-plugins (see the lesson \"Lesson i8: Randomly pick a menu\")",
    "publishedAt": "2023-05-18T16:01:24Z",
    "url": "https://youtu.be/xvvL3GRjXCY"
  },
  {
    "videoId": "B_oOHtuUJwc",
    "title": "Go To The Previous Page While Possible Using cypress-recurse",
    "description": "This video shows the answer to https://github.com/bahmutov/cypress-recurse/issues/174 I show how to visit the page, navigate using \"Next\" links, then go back to the very first page using cypress-recurse commands. We click \"Prev\" links until the link is not found. Find the initial and solved code in the repo https://github.com/bahmutov/test-prev-button",
    "publishedAt": "2023-05-17T14:37:22Z",
    "url": "https://youtu.be/B_oOHtuUJwc"
  },
  {
    "videoId": "Ym3t8FXQxis",
    "title": "Use The Current Cypress Test Title",
    "description": "In Cypress you can get the current test title or the full title with its parent suite names included using the \"Cypress.currentTest\" object. For example, you can normalize the name to use as the data in the test itself:\n// normalize the full test title to remove characters\n// and maybe make it into a single string like \"foo-bar-baz-...\"\nconst title = Cypress._.kebabCase(\n  Cypress._.deburr(Cypress.currentTest.titlePath.join(' '))\n)\nThis example comes from https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2023-05-11T17:50:16Z",
    "url": "https://youtu.be/Ym3t8FXQxis"
  },
  {
    "videoId": "2rn3fsR8xp0",
    "title": "Cypress Asynchronous Unit Tests Using Sinon.js And Chai",
    "description": "This video shows how to code an asynchronous unit test that runs in the browser. While the test does not use Cypress commands, it uses Sinon.js and Chai libraries bundled with Cypress. Find the full code at https://github.com/bahmutov/cypress-recurse Tip: you can use the \"retry\" function from cypress-recurse to retry functions in the browser or Node code. Please read the blog post https://glebbahmutov.com/blog/cypress-twilio/ to see the \"retry\" function in the real-world example.\n\nconst fn = getTo(3, 500)\nconst log = Cypress.sinon.stub()\n\n// call fn until it returns value 3?\nconst result = await retry(fn, function (n) { return n === 3 }, {\n  log,\n  limit: 5,\n})\nexpect(result, 'result').to.equal(3)\nexpect(log, 'log spy').to.be.calledThrice\nexpect(log.firstCall.args).to.deep.equal([\n  {\n    attempt: 1,\n    limit: 5,\n    value: 1,\n    successful: false,\n  },\n])\nexpect(log.secondCall.args).to.deep.equal([\n  {\n    attempt: 2,\n    limit: 5,\n    value: 2,\n    successful: false,\n  },\n])\nexpect(log.thirdCall.args).to.deep.equal([\n  {\n    attempt: 3,\n    limit: 5,\n    value: 3,\n    successful: true,\n  },\n])",
    "publishedAt": "2023-05-11T14:24:06Z",
    "url": "https://youtu.be/2rn3fsR8xp0"
  },
  {
    "videoId": "NIM068CdnbU",
    "title": "Find The Table Row With The Given Text And Print Its Index",
    "description": "Let's write a short test that finds a table row with text. If the text is not there, the test fails. If the text is present, we get the index of the row by invoking the jQuery \"index\" method and using cy.log or cy.print to print it to the Command Log.\ncy.contains('tr', 'Charles')\n  .invoke('index')\n  // cypress-map\n  .print('Found row %d')\nFind this example at http://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-05-08T11:55:26Z",
    "url": "https://youtu.be/NIM068CdnbU"
  },
  {
    "videoId": "V24_8oGXwy8",
    "title": "Use cy.wrap Command To Wrap Promises In Your Cypress Tests",
    "description": "You can use cy.wrap command to make Cypress test wait for the promise to. resolve: cy.wrap(Promise.resolve(42)).should('equal', 42) You can even wait for multiple promises by wrapping the \"Promise.all([p1, p2, ...])\" array. The resolved values become the subject of the Cypress command chain. See the full recipe at http://glebbahmutov.com/cypress-examples/ and read the blog post \"The Zen Of Cypress Data Setup\" https://glebbahmutov.com/blog/setup-cypress-data/",
    "publishedAt": "2023-05-04T16:40:09Z",
    "url": "https://youtu.be/V24_8oGXwy8"
  },
  {
    "videoId": "n-cHJ6tNOKk",
    "title": "Compute And Compare SHA-256 From HTML",
    "description": "In this video, I show how to use the browser's built-in crypto module to compute SHA-256 hash code from the element's HTML text. We can even make it into a reusable child command. Find the full source code in the SHA recipe at http://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-04-26T17:27:58Z",
    "url": "https://youtu.be/n-cHJ6tNOKk"
  },
  {
    "videoId": "I-Wh-3HTwZY",
    "title": "Cypress TodoMVC Questions Answered",
    "description": "In this video, I answer 4 questions asked about testing TodoMVC application\n- the Todo item selector\n- asserting the number shown\n- confirm text from multiple items\n- confirming the text\nSee the full source code in the blog post https://glebbahmutov.com/blog/cypress-todomvc-questions/\nFor more, see examples in https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-04-24T20:14:48Z",
    "url": "https://youtu.be/I-Wh-3HTwZY"
  },
  {
    "videoId": "bwMFsmWM4fM",
    "title": "Empty And Non-empty Elements On The Page",
    "description": "We can find all empty elements on the page or its parts using \":empty\" CSS selector. Empty elements have no children elements and no text inside. We can also find all non-empty elements by combining \":not(:empty)\" selectors. Here is an example from https://glebbahmutov.com/cypress-examples recipe:\n\n// find all elements using wildcard selector\ncy.get('*').should('have.length', 7)\n// find all empty elements and confirm their node names\ncy.get(':empty').should('have.length', 2)\n  // cy.map comes from https://github.com/bahmutov/cypress-map\n  .map('nodeName')\n .should('deep.equal', [...])\n// find all non-empty elements\ncy.get(':not(:empty)').should('have.length', 5)",
    "publishedAt": "2023-04-20T14:37:20Z",
    "url": "https://youtu.be/bwMFsmWM4fM"
  },
  {
    "videoId": "ODkNYjf1hbs",
    "title": "Lesser Known Chai Assertions Like Satisfy A Predicate",
    "description": "There are lots of built-in Chai assertions that are almost unknown. This video shows one such example \"should satisfy a predicate\" assertion. For example, if we want to confirm the number of elements is even, we could write\nfunction isEven(num) {\n  return num % 2 === 0\n}\ncy.get('#people li')\n  .its('length')\n  .should('satisfy', isEven, 'number of people should be even')\nThis example comes from my site https://glebbahmutov.com/cypress-examples/recipes/lesser-known-chai-assertions.html",
    "publishedAt": "2023-04-17T21:28:31Z",
    "url": "https://youtu.be/ODkNYjf1hbs"
  },
  {
    "videoId": "l1XIn0TopQg",
    "title": "Cypress Hook And Aliases Example",
    "description": "This video refactors getting numerical inputs and confirming the correct sum is shown on the page. The final solution uses \"beforeEach\" hook and aliases to make the tests as readable as possible. Find the code at https://github.com/bahmutov/cypress-multiple-aliases\nbeforeEach(function () {\n  cy.visit('public/index.html')\n  cy.get('[name=a]')\n    .should('have.prop', 'valueAsNumber')\n    .as('a')\n    // log the number to the Command Log\n    .should('be.finite')\n  cy.get('[name=b]')\n    .should('have.prop', 'valueAsNumber')\n    .as('b')\n    .should('be.finite')\n})\n\nit('has values set', function () {\n  cy.contains('#result', this.a + this.b)\n})",
    "publishedAt": "2023-04-12T17:26:54Z",
    "url": "https://youtu.be/l1XIn0TopQg"
  },
  {
    "videoId": "t8BSY2czges",
    "title": "Confirm All HTML data- Attributes At Once By Using The dataset Property",
    "description": "If you have multiple \"data-...\" attributes on your HTML element, you can grab them all using the \"dataset\" property. This property has all camel-cased string values. If you want to confirm the entire set, you first convert it into a plain object and then use \"deep.equal\" assertion\ncy.get('article#electric-cars')\n  .should('have.prop', 'dataset')\n  .then(JSON.stringify)\n  .then(JSON.parse)\n  .should('deep.include', {\n    columns: '3',\n    indexNumber: '12314',\n  })\nThis recipe is at http://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-04-10T14:33:03Z",
    "url": "https://youtu.be/t8BSY2czges"
  },
  {
    "videoId": "kkI2smDVlqo",
    "title": "Test Microsoft FAST Design Library Select Web Component",
    "description": "This video shows a quick end-to-end test for a Select component from the Microsoft Web UI design library called FAST. The example component is available at https://explore.fast.design/components/fast-select and the full source code for this video can be found at https://github.com/bahmutov/cypress-fast-example",
    "publishedAt": "2023-04-05T18:00:19Z",
    "url": "https://youtu.be/kkI2smDVlqo"
  },
  {
    "videoId": "X0uiViQoAO0",
    "title": "Select Invalid Option",
    "description": "This video shows how we can reach the error handling code by modifying the page before selecting an invalid option from a SELECT HTML element. Find this recipe at http://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-03-30T17:59:33Z",
    "url": "https://youtu.be/X0uiViQoAO0"
  },
  {
    "videoId": "KRhpi2whppA",
    "title": "Negative Assertions",
    "description": "This video shows what to watch out for when writing negative Cypress assertions like \"cy.get(...).should('not.exist')\". Find this recipe at https://glebbahmutov.com/cypress-examples/ and read the blog posts https://glebbahmutov.com/blog/negative-assertions/ and https://glebbahmutov.com/blog/negative-assertions-and-missing-states/",
    "publishedAt": "2023-03-28T17:15:20Z",
    "url": "https://youtu.be/KRhpi2whppA"
  },
  {
    "videoId": "A54BmxosAzI",
    "title": "Check CSS Color Using jQuery-Chai Assertion \"have.css\"",
    "description": "You can check the declared CSS style property using the assertion \"have.css\" that is bundled with Cypress (the assertion comes from jQuery-Chai assertion plugin). For example, to check if the element turns red after some time: \ncy.get('selector').should('have.css', 'color', 'rgb(255, 0, 0)')\nFind this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-03-28T16:53:39Z",
    "url": "https://youtu.be/A54BmxosAzI"
  },
  {
    "videoId": "xQ5HRmzxEkQ",
    "title": "Minimatch Unit Tests Inside Cypress",
    "description": "You can invoke and call functions in Cypress to write unit tests and show the arguments and results in the Cypress Command Log. For example, to confirm how Cypress.minimatch works\ncy.wrap(Cypress, { log: false })\n  .invoke('minimatch', '/path/to/file.js', 'to/*.js')\n  .should('be.false')\ncy.wrap(Cypress, { log: false })\n  .invoke('minimatch', '/path/to/file.js', '**/to/*.js')\n  .should('be.true')\nYou can invoke a function without an object\ncy.wrap(Cypress.minimatch, { log: false })\n  .invokeOnce(\n    'call',\n    // the first argument is the \"this\" object value\n    // which we do not use anyway\n    null,\n    '/path/to/file.js',\n    '/path/**/*.{js,ts}',\n  )\n  .should('be.true')\nFind this example at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-03-26T15:19:36Z",
    "url": "https://youtu.be/xQ5HRmzxEkQ"
  },
  {
    "videoId": "TbpGqsmUiBk",
    "title": "Get And Set Multiple Elements Attributes",
    "description": "This video shows how to get the same HTML attribute from multiple elements in Cypress tests:\n- jQuery \"attr\" method returns the value of the attribute from the first element only\n- you can invoke the DOM getAttribute method on each DOM element to get the values (use my cypress-map plugin)\n- to set the same attribute value, use jQuery attr(name, value) call or attr(name, callback)\nFind this recipe at https://glebbahmutov.com/cypress-examples/ site",
    "publishedAt": "2023-03-19T21:12:35Z",
    "url": "https://youtu.be/TbpGqsmUiBk"
  },
  {
    "videoId": "je3EtXY807M",
    "title": "Three Ways Of Checking If Element Becomes Visible",
    "description": "This video shows cy.get command in combination with \"is visible\" assertion written in 3 different way in Cypress. Bonus: I also show how cy.click command has the visibility check with retries already built-in. \nFirst way (preferred): \ncy.get('#a-button').should('be.visible')\nSecond: \ncy.get('#a-button').should(function ($el) {\n  // note that the Command Log does not show much information\n  // for thrown errors while it retries\n  if (!Cypress.dom.isVisible($el)) {\n    throw new Error('Element is hidden')\n  }\n})\nThird:\ncy.get('#a-button').should('satisfy', Cypress.dom.isVisible)\nFind this example at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-03-18T23:21:55Z",
    "url": "https://youtu.be/je3EtXY807M"
  },
  {
    "videoId": "Pxw7smb1Vyw",
    "title": "Learn :has and :contains CSS Selectors",
    "description": "Let's pick an LI element that has a badge element with specific text inside. We can achieve this by combining CSS selectors \":has\" and \":contains\" as this video explains. \ncy.get('li:has( .badge:contains(\"out of stock\") )')\nFind this recipe at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-03-16T13:48:09Z",
    "url": "https://youtu.be/Pxw7smb1Vyw"
  },
  {
    "videoId": "4JTfJlehfiU",
    "title": "Fun With Cypress Query Commands And Asynchronous Functions",
    "description": "Typically, Cypress queries operate on a subject that is data: DOM elements, network call responses, and strings. But we can put anything into the subject, for example, we could put a function into the subject. We can even call the function, again and again, using Cypress built-in retries via cy.invoke command:\ncy.wrap(getRandomN) // subject is function \"getRandomN\"\n  .invoke('call') // subject is a number\n  .should('equal', 7)\nNow this is cool, but breaks if the function is asynchronous, since it returns a Promise, and cy.invoke _waits_ for the promise, but does not yield the resolved value (I know!) In this video, I show a little hack to put the resolved value back into the query chain and use it. I have a little query command cy.nsync that does that, and using it you can fetch something from the network until you get the expected response: all using built-in retries:\ncy.wrap(fetch)\n  .invoke('call', null, 'http://localhost:4200/random-digit')\n  .nsync()\n  .invoke('json')\n  .nsync()\n  .its('n')\n  .should('equal', 7)\nFind this example at https://glebbahmutov.com/cypress-examples/recipes/retry-ability.html Tip: in real projects, you should use https://github.com/bahmutov/cypress-recurse to retry Cypress commands until a condition passes",
    "publishedAt": "2023-03-14T20:30:28Z",
    "url": "https://youtu.be/4JTfJlehfiU"
  },
  {
    "videoId": "CvFZDStvUMQ",
    "title": "Check Text And Then Close The 2nd Child Window From Cypress Test",
    "description": "This video shows how Cypress can interact with a child window opened by the application. We confirm the child window has the expected text and then close the child window. Find the source code in repo https://github.com/bahmutov/second-window",
    "publishedAt": "2023-03-13T19:55:12Z",
    "url": "https://youtu.be/CvFZDStvUMQ"
  },
  {
    "videoId": "NO6Joky4hHE",
    "title": "Clear Input Element Flake",
    "description": "This video shows how the test can avoid a race condition trying to clear / type into an input field before the application sets the initial value on load. Find the full recipe at https://glebbahmutov.com/cypress-examples and below is the solution code\n// wait for the app to finish setting the initial value\n// which is different from the static attribute\ncy.get('#answer')\n  .should('have.attr', 'value')\n  .then(function (staticValue) {\n    cy.get('#answer')\n      .invoke('val')\n      .should('not.equal', staticValue)\n  })\n// now we can clear the input field safely\ncy.get('#answer').clear().type(42).should('have.value', 42)",
    "publishedAt": "2023-03-13T18:14:37Z",
    "url": "https://youtu.be/NO6Joky4hHE"
  },
  {
    "videoId": "sGL3K7frN_A",
    "title": "New Cypress.io Course Announcement: Testing The Swag Store",
    "description": "I am happy to announce the launching of my new Cypress.io beginners course \"Testing The Swag Store\" available at https://cypress.tips/courses. The course is a hands-on collection of lessons where you will try to implement a test starting with provided code and instructions. Each lesson has my solution and a video showing writing the solution. There are currently 18 lessons and new lessons are added daily. Some lessons are free allowing you to check out the course before subscribing.",
    "publishedAt": "2023-03-09T22:36:15Z",
    "url": "https://youtu.be/sGL3K7frN_A"
  },
  {
    "videoId": "wouotQxvhA4",
    "title": "Enabled Elements",
    "description": "This video shows how find all enabled or disabled elements using jQuery \":enabled\" and \":disabled\" selectors. I also show how to map \"is enabled\" for a collection of DOM elements using plain Cypress code and cypress-map queries. Find the source code at https://glebbahmutov.com/cypress-examples/recipes/enabled-elements.html and cypress-map plugin at https://github.com/bahmutov/cypress-map",
    "publishedAt": "2023-03-07T16:50:35Z",
    "url": "https://youtu.be/wouotQxvhA4"
  },
  {
    "videoId": "MWY8gYdvyho",
    "title": "Element Becomes Visible And Then Loads Text",
    "description": "Imagine an element hidden in the DOM that becomes visible after 2 seconds, then loads the expected text after slightly longer than 2 seconds. You might write a single \"cy.get\" command with both assertions\ncy.get('#loader')\n  .should('be.visible')\n  .and('have.text', 'Username is Joe')\nUnfortunately, this might fail, since both assertions must pass with the same element. The first assertion might pass, but the second one might time out. There are two solutions to this: increase the command timeout is the first one\ncy.get('#loader', { timeout: 5_000 })\n  .should('be.visible')\n  .and('have.text', 'Username is Joe')\nThe alternative solution is to split the assertions and \"restart the clock\" by adding another \"cy.get\" command\ncy.get('#loader').should('be.visible')\ncy.get('#loader').should('have.text', 'Username is Joe')\nFind this recipe and many more at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-03-06T14:01:09Z",
    "url": "https://youtu.be/MWY8gYdvyho"
  },
  {
    "videoId": "OmVzv6pJN6I",
    "title": "Map Input Elements Values",
    "description": "This recipe comes from https://glebbahmutov.com/cypress-examples and shows how we can get all \"input\" DOM elements, grab from each element the current value, and confirm the list of values using a single \"deep.equal\" assertion. Tip: use should(callback) or cypress-map queries to write retry-able code that works even if the form changes its values asynchronously. The source code at https://github.com/bahmutov/cypress-examples",
    "publishedAt": "2023-03-02T16:30:32Z",
    "url": "https://youtu.be/OmVzv6pJN6I"
  },
  {
    "videoId": "HVfHr8sC0jo",
    "title": "Adjacent Sibling CSS Selector Combinator",
    "description": "Imagine we need to find all TD elements that follow TH elements. We can use the \"Adjacent sibling combinator\" CSS selector \"+\" to do so.\nFind this example at https://glebbahmutov.com/cypress-examples\ncy.get('table tbody tr th+td')",
    "publishedAt": "2023-02-27T16:24:21Z",
    "url": "https://youtu.be/HVfHr8sC0jo"
  },
  {
    "videoId": "edrZDaopi3U",
    "title": "Find The Cells In The First Column Of The Second Table",
    "description": "This video explains the difference between cy.get and cy.find commands and shows how to find the table cells in the first column of the second table. Find the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-02-27T13:43:53Z",
    "url": "https://youtu.be/edrZDaopi3U"
  },
  {
    "videoId": "eB9RqBmnN4I",
    "title": "Instant AWS Cognito Login Using cypress-data-session",
    "description": "This video shows how after AWS programmatic login which sets multiple localStorage keys, we can preserve and restore the localStorage object to instantly log in at the start of the next test. Uses https://github.com/bahmutov/cypress-data-session plugin to cache, validate, and restore the localStorage object. The original code was in https://github.com/muratkeremozcan/appsyncmasterclass-frontend",
    "publishedAt": "2023-02-16T18:15:45Z",
    "url": "https://youtu.be/eB9RqBmnN4I"
  },
  {
    "videoId": "IrWZvaFraTQ",
    "title": "Trigger React Slider OnChange Event",
    "description": "This video shows how to correctly trigger input of type range onChange events from Cypress tests. It also shows how to use \"blockHosts\" list to block all 3rd party scripts from loading on the page under test (like ads). The essential code to trigger onChange correctly in React apps is:\n\nconst valueSetter = Object.getOwnPropertyDescriptor(\n  window.HTMLInputElement.prototype,\n  'value',\n).set\n\ncy.get('#sliderContainer input[type=range]')\n  .should('have.value', 25)\n  .then(function ($slider) {\n    valueSetter.call($slider[0], 84)\n  })\n  .trigger('change')",
    "publishedAt": "2023-02-16T16:27:20Z",
    "url": "https://youtu.be/IrWZvaFraTQ"
  },
  {
    "videoId": "G2GXHg4Ck00",
    "title": "Testing React Input With Type Range By Dispatching Events",
    "description": "In this video, I refactor a spec file that tries to control an input type=range element wrapped in a React component. To properly trigger the \"input\" event, I have to construct the event object. Since we have a lot of test command duplication, the last part of the video shows how to create a custom Cypress command \"setRange\". The final spec file:\nCypress.Commands.add(\n  'setRange',\n  { prevSubject: 'element' },\n  function (subject, value) {\n    subject.val(value)\n    subject[0].dispatchEvent(new Event('input', { bubbles: true }))\n    Cypress.log({\n      name: 'setRange',\n      message: value,\n    })\n  },\n)\n\ndescribe('test on the functioning of the estimator', function () {\n  beforeEach(function () {\n    cy.visit('/preventivatore')\n    cy.getByData('test').should('be.visible')\n  })\n\n  it('test on slide position preventivatore', function () {\n    cy.getByData('test').setRange(30)\n    cy.getByData('slide30').should('exist')\n    cy.getByData('test').setRange(50)\n\n    cy.getByData('slide50').should('exist')\n    cy.getByData('test').setRange(70)\n\n    cy.getByData('slide70').should('exist')\n    cy.getByData('test').setRange(90)\n\n    cy.getByData('slide90').should('exist')\n  })\n})",
    "publishedAt": "2023-02-13T22:41:15Z",
    "url": "https://youtu.be/G2GXHg4Ck00"
  },
  {
    "videoId": "puCZGCeUb5k",
    "title": "How To Check Visibility Of Many Elements",
    "description": "When you use Cypress built-in assertion \"should be visible\" with multiple elements, it passes even if just one element is visible, and the rest are not. In this video, I show how to compute the visibility of every element and confirm with retries that they are indeed visible. I am using https://github.com/bahmutov/cypress-map and https://www.chaijs.com/plugins/chai-each/ in the final solution\nrequire('cypress-map')\nchai.use(require('chai-each'))\ncy.get('#items li')\n  .map(Cypress.dom.isVisible)\n  .should('each.equal', true)\nFind this recipe at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-02-08T15:59:02Z",
    "url": "https://youtu.be/puCZGCeUb5k"
  },
  {
    "videoId": "v4EwXbtb6Fo",
    "title": "Complex Find Table Rows Example",
    "description": "Can you find table rows where cells in the given row have a certain attribute? In this video, I show two different solutions (the 2nd one is my fav, it uses https://github.com/bahmutov/cypress-map). Find the full recipe at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-02-07T16:37:09Z",
    "url": "https://youtu.be/v4EwXbtb6Fo"
  },
  {
    "videoId": "l6_OXPiqkxQ",
    "title": "Confirm Text In Multiple Page Elements Using cy-spok",
    "description": "This video shows how to grab multiple elements from the page, extract its text, and then confirm them all at once using cy-spok assertion. Bonus: you can use cy-spok predicates and exact values. See https://github.com/bahmutov/cy-spok for more examples\n// confirm the title and the filters text\ncy.get('h1, .filters a')\n  .map('innerText')\n  .should(\n    spok([\n      'todos',\n      'All',\n      spok.string,\n      spok.test(/completed/i),\n    ]),\n  )",
    "publishedAt": "2023-02-06T18:39:35Z",
    "url": "https://youtu.be/l6_OXPiqkxQ"
  },
  {
    "videoId": "eVe4ySgW0qw",
    "title": "Use cypress-map Queries To Validate A Row In A Table",
    "description": "Using https://github.com/bahmutov/cypress-map queries we can convert a row from HTML table into an object, update its properties, and compare it to the expected values. Tip: use https://github.com/bahmutov/cy-spok to confirm the object values.\n\nconst props = ['name', 'age', 'date']\nit('confirms the a row', function () {\n  cy.contains('table tbody tr', 'Dave')\n    .find('td')\n    .map('innerText')\n    .print()\n    .partial(Cypress._.zipObject, props)\n    .print()\n    .update('age', Number)\n    .should(\n      spok({\n        name: 'Dave',\n        age: spok.range(10, 19),\n        date: spok.test(/^\\d\\d\\d\\d-\\d\\d-\\d\\d$/),\n      }),\n    )\n})",
    "publishedAt": "2023-02-03T15:09:38Z",
    "url": "https://youtu.be/eVe4ySgW0qw"
  },
  {
    "videoId": "TcBQsKvS2l0",
    "title": "Delete Cypress Videos For Passing Specs",
    "description": "This video shows how to delete videos of the passing specs during \"cypress run\" execution. If we want to save space and upload bandwidth, we probably want to only keep the videos and screenshots of the failing specs. You can use \"after:spec\" event to register your own logic to remove the videos. Find the source code and discussion shown in the video in my blog post https://glebbahmutov.com/blog/cypress-v10-tips/",
    "publishedAt": "2023-02-01T15:50:39Z",
    "url": "https://youtu.be/TcBQsKvS2l0"
  },
  {
    "videoId": "drlt4lOC0O4",
    "title": "Cypress v12.5.0 Debug Tab",
    "description": "This video shows the new Debug tab in Cypress v12.5.0 that shows the tests failed on CI via Cypress Cloud information. There is now a button to run the tests that failed on CI in your local Test Runner (so it runs the tests by spec and test title). See full info in Cypress docs, but quick note: if you want to run the tests that failed _locally_, you can use my cy-grep plugin as described in https://glebbahmutov.com/blog/run-failed-tests/",
    "publishedAt": "2023-01-31T22:39:28Z",
    "url": "https://youtu.be/drlt4lOC0O4"
  },
  {
    "videoId": "JBlliSOWrtI",
    "title": "Cypress cy.as Alias Types: Query vs Static",
    "description": "Cypress v12 introduced the queries - chains of commands that can be retried. This changed how the aliases are evaluated - they are _re-evaluated_ when you use cy.get(\"alias name\"). To get the old alias behavior, where the saved value stays unchanged, use \"{ type: static }\" option\n\n// dynamic alias that will be re-evaluated\ncy.get('#click').invoke('text').invoke('trim').as('caption')\ncy.get('@caption').should('equal', 'Profile')\n// static alias that will stay the same forever\ncy.get('#click')\n  .invoke('text')\n  .invoke('trim')\n  .as('caption', { type: 'static' })\n// but the aliased value remains the same\ncy.get('@caption').should('equal', 'Loading...')\n\nSee this example at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2023-01-30T16:18:06Z",
    "url": "https://youtu.be/JBlliSOWrtI"
  },
  {
    "videoId": "MQMRIjXwep8",
    "title": "Test Mailto HREF Anchor Links",
    "description": "In this video, I parse the \"mailto:recipient...\" HREF links to confirm the parameters of the email to be sent are correct. Find the full code at https://glebbahmutov.com/cypress-examples\n\n// 🚨 DOES NOT WORK, THE TEST WILL HANG\ncy.get('a#send')\n// we can click, but it does nothing\ncy.get('a#send')\n  .invoke('on', 'click', function (e) {\n    console.log('stop the default browser behavior')\n    e.preventDefault()\n  })\n  .click()\n// confirm the HREF attribute is correct by parsing it\ncy.get('a#send')\n  .should('have.attr', 'href')\n  // yields the value of the \"href\" attribute\n  .should('match', /^mailto:/)\n  // parse the URL into recipient, subject, body fields\n  .then(parseMailto)\n  .should('deep.equal', {\n    recipient: 'nowhere@mozilla.org',\n    subject: 'The subject of the email',\n    body: 'The body of the email',\n  })",
    "publishedAt": "2023-01-27T20:31:08Z",
    "url": "https://youtu.be/MQMRIjXwep8"
  },
  {
    "videoId": "l28bRsZckB8",
    "title": "Test window.open Example",
    "description": "Another example where we look at https://demoqa.com/browser-windows test page, find that it calls \"window.open\" when you click on a button, and test this page to confirm the parameters of that click using Cypress. Find the source code in the repo https://github.com/bahmutov/second-window For more, read https://glebbahmutov.com/blog/cypress-second-tab/ blog post.",
    "publishedAt": "2023-01-24T20:53:45Z",
    "url": "https://youtu.be/l28bRsZckB8"
  },
  {
    "videoId": "vgP8X9ybc3E",
    "title": "Wait For SVG Animate Transform End Event",
    "description": "From a Cypress test you can subscribe to the \"end\" event that \"animateTransform\" element emits. Then you can wait for the spy function to be called, and the rest of the test continues.\ncy.get('.loader svg')\n  .should('be.visible')\n  .find('animateTransform')\n  .invoke('on', 'endEvent', cy.spy().as('animate'))\n// wait for the animation to finish\ncy.get('@animate').should('have.been.called')\nFind this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-01-21T19:59:55Z",
    "url": "https://youtu.be/vgP8X9ybc3E"
  },
  {
    "videoId": "WsVdN0Z5k7E",
    "title": "Intercept Two API Calls Using Regular Expressions Exercise",
    "description": "This is a video from the free lesson \"Bonus 72: Intercept API calls using regular expressions\" at https://cypress.tips/courses/network-testing/lessons/bonus72, part of the \"Cypress Network Testing Exercises\" course https://cypress.tips/courses/network-testing. We need to complete a test that intercepts 2 different API calls and checks how the page behaves. The problem: the URLs are overlapping:\n\"/find-item/:name\" and \"/find-item/:name/price\"\nMy solution is to use a regular expression that enforces the match at the end of the string using the \"$\" flag.\nNote: you can practice these exercises yourself using the repos https://github.com/bahmutov/fastify-example and https://github.com/bahmutov/fastify-example-tests",
    "publishedAt": "2023-01-20T20:00:22Z",
    "url": "https://youtu.be/WsVdN0Z5k7E"
  },
  {
    "videoId": "UOLQlNmuhY0",
    "title": "Confirm Table Column",
    "description": "In this video, I show how to confirm the entire column of values in a table. First, we confirm the heading text using cy.contains. Then we get all cells in a column from the body of the table, convert the elements to numbers, and confirm the list of numbers. The video shows both \"plain\" Cypress test and a better approach using https://github.com/bahmutov/cypress-map plugin",
    "publishedAt": "2023-01-19T19:13:52Z",
    "url": "https://youtu.be/UOLQlNmuhY0"
  },
  {
    "videoId": "Abv7m9H_15Y",
    "title": "SVG Loader Example",
    "description": "This quick video shows testing an SVG loader that is removed after a couple of seconds. Find the full recipe at https://glebbahmutov.com/cypress-examples\ncy.get('.loader svg').should('be.visible')\ncy.get('.loader svg').should('not.exist')\ncy.contains('.loader', 'Loaded')",
    "publishedAt": "2023-01-19T17:45:06Z",
    "url": "https://youtu.be/Abv7m9H_15Y"
  },
  {
    "videoId": "9WByK1QvGs4",
    "title": "Multiple :has Selector Clauses",
    "description": "This video shows how to find DIV elements with LABEL and/or BUTTON elements inside. Find the full example at https://glebbahmutov.com/cypress-examples\n// find all DIV elements with a LABEL element inside\ncy.get('div:has(label)')\n// find all DIV elements with a LABEL and a BUTTON inside\ncy.get('div:has(label):has(button)')\n// find all DIV elements with a LABEL or a BUTTON inside\ncy.get('div:has(label, button)')",
    "publishedAt": "2023-01-18T20:15:59Z",
    "url": "https://youtu.be/9WByK1QvGs4"
  },
  {
    "videoId": "GYW4vIehd6Y",
    "title": "A Cypress Example With Disabled Button And Has Text jQuery Selectors",
    "description": "I start this video example by noting that these two code snippets are equivalent:\ncy.get('div').find('button').should('not.be.disabled').click()\ncy.get('div').find('button').click()\nThe command cy.click() already checks if the button is visible, not disabled, etc.\n\nSecond, the video shows how to use jQuery \":has\" and \":contains\" selectors to find a button by the label's text in a single query:\ncy.get('div:has( label:contains(\"My button\") ) button').click()\nFind these code examples and 500+ other Cypress examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-01-17T17:05:25Z",
    "url": "https://youtu.be/GYW4vIehd6Y"
  },
  {
    "videoId": "IEkRyElQ6VE",
    "title": "Testing Using Cypress And GitHub Actions: From Zero To Hero",
    "description": "This video creates a new project and adds a few default Cypress tests. Then it creates a repository on GitHub and runs the Cypress tests using Cypress GitHub Action. I then show how to debug a failed test using test artifacts stored on GitHub after each test run. Find the full source code at https://github.com/bahmutov/cypress-gha-example and for more answers, use https://cypress.tips/search",
    "publishedAt": "2023-01-11T20:43:16Z",
    "url": "https://youtu.be/IEkRyElQ6VE"
  },
  {
    "videoId": "Z0OUl4l5YvU",
    "title": "jQuery Form Serialize Array Method",
    "description": "You can invoke the jQuery method \"serializeArray\" when working with a form element in Cypress. You can quickly validate all input values at once\ncy.get('form')\n  .invoke('serializeArray')\n  .should('deep.equal', [\n    {\n      name: 'a',\n      value: '1',\n    },\n   ....\n  ])\nSee https://api.jquery.com/serializeArray/ and this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-01-09T16:23:54Z",
    "url": "https://youtu.be/Z0OUl4l5YvU"
  },
  {
    "videoId": "Re4bNOBqes8",
    "title": "Check If A Spy Was Called With The Right Object",
    "description": "If we are spying or stubbing an application method, then we should be able to confirm if it was called correctly with expected arguments. Checking a call with primitive arguments is simple:\ncy.get('@log').should('be.calledWith', 'Hello', 'world')\nChecking a call where an argument was an object depends on what you know about the object: do you know the precise values of every property? Or some properties? Or just types of properties? Here are two ways of checking an object if you know its entire contents:\n// yield the object to the next assertion\ncy.get('@log')\n  .should('be.calledWith', 'User %o', Cypress.sinon.match.object)\n  .its('firstCall.args.1')\n  .should('deep.equal', { id: 123, name: 'Joe' })\n// use Sinon's built-in object by value match\ncy.get('@log').should('be.calledWith', 'User %o', {\n  id: 123,\n  name: 'Joe',\n})\nAnd here are ways to confirm the call argument if you know only some of its properties:\ncy.get('@log')\n  .should('be.calledWith', 'User %o', Cypress.sinon.match.object)\n  .its('firstCall.args.1')\n  // imagine we do not know all object fields\n  .should('deep.include', { name: 'Joe' })\ncy.get('@log').should('be.calledWith', 'User %o', {\n  id: Cypress.sinon.match.number,\n  name: 'Joe',\n})\nFor more spies and stubs examples, see https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2023-01-06T16:10:20Z",
    "url": "https://youtu.be/Re4bNOBqes8"
  },
  {
    "videoId": "-IEFhheipzs",
    "title": "Check The Element Contains A Number That Ends With Two Decimals",
    "description": "Let's confirm the element has text that ends with two decimal numbers. This example comes from https://glebbahmutov.com/cypress-examples\ncy.contains('#amount', /\\.\\d\\d?$/)",
    "publishedAt": "2023-01-04T14:54:20Z",
    "url": "https://youtu.be/-IEFhheipzs"
  },
  {
    "videoId": "M_AZdsf_bQw",
    "title": "Copyright Year Cypress Test",
    "description": "Let's make sure our copyright footer is never out of date, and the test automatically computes the year to look for. This example comes from https://glebbahmutov.com/cypress-examples\nconst year = new Date().getFullYear()\ncy.contains('#copyright', `${year} Gleb`, { timeout: 0 })",
    "publishedAt": "2023-01-03T16:09:09Z",
    "url": "https://youtu.be/M_AZdsf_bQw"
  },
  {
    "videoId": "x3jN-yf3VGU",
    "title": "Check The Impressum Link That Opens In A New Tab",
    "description": "This short video shows how to click the right \"Impressum\" link on a German site. We force the link to open in the current tab, and then validate the pathname of the new page.\ncy.contains('#SgCookieOptin a', 'Impressum', {matchCase: false})\n  .should('have.attr', 'target', '_blank')\n  .invoke('attr', 'target', '_self')\n  .click()\ncy.location('pathname').should('equal', '/impressum')",
    "publishedAt": "2023-01-02T18:59:21Z",
    "url": "https://youtu.be/x3jN-yf3VGU"
  },
  {
    "videoId": "pmuPVl7mdKI",
    "title": "Eco Index Audit Cypress Plugin",
    "description": "This video shows the plugin eco-index-audit https://github.com/EmmanuelDemey/eco-index-audit and how you can check any URL to be well-coded from the ecological viewpoint (don't be wasteful!) I explain how to correctly check the property \"ecoIndex\" yielded by the plugin's task\nconst threshold = 50\ncy.task(\"checkEcoIndex\", url)\n  .its('ecoIndex', {timeout: 0})\n  .should('be.above', threshold)",
    "publishedAt": "2023-01-02T17:52:02Z",
    "url": "https://youtu.be/pmuPVl7mdKI"
  },
  {
    "videoId": "lA_2SARDS2s",
    "title": "Parse Cypress Version String And Confirm The Major Version",
    "description": "Sometimes you need to confirm the Cypress version used to run the specs. For example, my plugin cypress-map only works with Cypress v12 or later. This short video explains how to parse the Cypress.version string\n\nconsole.log(Cypress.version)\nconst [major, minor, patch] = Cypress.version\n  .split('.')\n  .map(Number)\nconsole.log({ major, minor, patch })\nexpect(major, 'v9 requires').to.be.gte(9)\n\nFind this example at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-12-27T17:53:41Z",
    "url": "https://youtu.be/lA_2SARDS2s"
  },
  {
    "videoId": "2cwq9iQR54Y",
    "title": "Writing A Shopping Cart Test Example",
    "description": "Solving a user problem with confirming the number of items in the shopping cart. The full test picks some options and verifies that 5 items can be added to the cart and the menu bar is showing \"Shopping cart (5)\" text.\n\ncy.visit('/build-your-own-computer')\ncy.contains('#topcartlink', 'Shopping cart (0)')\ncy.get('select#product_attribute_2').select(3)\ncy.get('input#product_attribute_3_6').check()\ncy.get('[aria-label=\"Enter a quantity\"]').clear().type(5)\ncy.contains('button', 'Add to cart').click()\ncy.contains('#topcartlink', 'Shopping cart (5)')\n\nFor more examples like this, see https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-12-21T18:25:23Z",
    "url": "https://youtu.be/2cwq9iQR54Y"
  },
  {
    "videoId": "rTsnQz5jI5E",
    "title": "Element Hides Vs Element Is Removed From The DOM",
    "description": "This video teaches you the difference between checking an element that merely hides (using display:none) from checking an element that is removed from the DOM completely. If an element hides, you can attach multiple assertions: they all can pass at the same time\ncy.contains('button', 'Click')\n  .click()\n  .should('have.class', 'half')\n  .and('not.be.visible')\nBut if the element is removed from the DOM, you cannot check it class anymore (makes no sense, and Cypress throws \"element detached from DOM\" error). Thus if the element is removed from the page, you need to separate the assertions and query the page again:\ncy.contains('button', 'Click')\n  .click()\n  .should('have.class', 'half')\n// query again\ncy.contains('button', 'Click').should('not.exist')\nFind this recipe and many more at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-12-16T14:27:09Z",
    "url": "https://youtu.be/rTsnQz5jI5E"
  },
  {
    "videoId": "KSlJYjIn_AM",
    "title": "Check If Element Text Is One Of The Possible Strings",
    "description": "In this video, I show 3 different ways of confirming that the element's text is one of the possible strings. I used a single should callback, a regular expression, and a chain of Cypress v12 query commands. Find this code in https://github.com/bahmutov/cypress-map repo and read the blog post \"Cypress V12 Is A Big Deal\" https://glebbahmutov.com/blog/cypress-v12/",
    "publishedAt": "2022-12-14T16:03:09Z",
    "url": "https://youtu.be/KSlJYjIn_AM"
  },
  {
    "videoId": "wZlT3zu7jfI",
    "title": "Pick A Random 10-Digit Number Without A Leading Zero",
    "description": "Our goal is to pick a random 10-digit number to validate the input field. The number cannot have a leading zero. We can use `Math.random` to get a random number between 0 and 1. Then we chop off the first two characters `0.` and limit the length to 9 characters. This allows us to prefix the number with `1` to guarantee the number does not have a leading zero.\n\nconst random = '1' + Math.random().toString().substr(2, 9)\ncy.get('input#number').type(random)\n\nFind this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-12-12T18:23:21Z",
    "url": "https://youtu.be/wZlT3zu7jfI"
  },
  {
    "videoId": "ZZWB_4LEOrE",
    "title": "Check The Test Status Inside The After Each Hook",
    "description": "You can check the test's status (passed, failed) inside the \"afterEach\" hook and run commands depending on the state. The test will still remain failed, but you can execute Cypress commands. Here is how to get its status: use the function callback syntax and access the \"\" property\n\nafterEach(function () {\n  if (this.currentTest.state === 'failed') { ... }\n})\n\nRead more about Cypress statuses in my blog post https://glebbahmutov.com/blog/cypress-test-statuses/ and see the current test state in my Cypress tips blog post https://glebbahmutov.com/blog/cypress-tips-and-tricks/#get-test-status",
    "publishedAt": "2022-12-07T18:23:24Z",
    "url": "https://youtu.be/ZZWB_4LEOrE"
  },
  {
    "videoId": "4HpEECek2OE",
    "title": "Cypress v12 Querying Commands Introduction",
    "description": "Cypress v12 introduced retrying the entire chain of querying commands (the commands that don't change the state of the application), which lets us write simple and easy-to-understand commands. For example, to write a test that confirms the text in the items, even if the items change:\n\nCypress.Commands.addQuery('map', ...)\ncy.visit('cypress/index.html')\ncy.get('.matching')\n  .map('innerText')\n  .should('deep.equal', ['first', 'third', 'fourth'])\n\nIf the initial list returned by \"cy.get\" changes, the new elements will be picked up and used by \"cy.map\" and then \"cy.should\"\n\nFind this code at https://github.com/bahmutov/cypress-map\n\nFor more, see Cypress query command documentation",
    "publishedAt": "2022-12-07T14:06:04Z",
    "url": "https://youtu.be/4HpEECek2OE"
  },
  {
    "videoId": "_neipNSNcms",
    "title": "Enter The Balance Value Into The Input Field",
    "description": "Let's say we want to look up the available balance in the table, parse the value, then enter it into the input field. The full test code is available at https://glebbahmutov.com/cypress-examples We can chain the commands to find the row, then find the cell, then parse the text into a number.\n\n// find the row that includes the balance text\n// and then find a child TD cell with \"$\"\ncy.contains('tr', 'Available balance')\n  .contains('td', '$') // yields jQuery object\n  .invoke('text') // yields its text\n  .invoke('replace', '$', '') // removes \"$\" character\n  .then(parseFloat) // yields a number\n  // confirm the balance is reasonable\n  .should('be.within', 1, 10_000)\n  .then(function (balance) {\n    // now we can type this balance into the input field\n    cy.get('#transfer').type(balance)\n  })\n\nTip: a much better test would know exactly the balance shown on the page, without looking it up:\n\ncy.contains('tr', 'Available balance').contains('td', '$800')\ncy.get('#transfer').clear().type(800)",
    "publishedAt": "2022-12-04T17:33:31Z",
    "url": "https://youtu.be/_neipNSNcms"
  },
  {
    "videoId": "3ASVKBgYAYc",
    "title": "Measure The Elapsed Time In Your Cypress Tests",
    "description": "This is cypress-time-marks plugin introduction for quickly measuring how long different parts of the test take, and even failing the current test if the time limit has been exceeded.\n\ncy.timeMark('start').wait(100).timeSince(\n  'start', // mark name\n  'waiting', // message\n  50, // time limit (ms)\n  true, // throw an error if above the time limit\n)\n\nFind the plugin at https://github.com/bahmutov/cypress-time-marks",
    "publishedAt": "2022-12-02T13:25:56Z",
    "url": "https://youtu.be/3ASVKBgYAYc"
  },
  {
    "videoId": "DWrC1YvjKvU",
    "title": "Remove Elements Before Checking The Page",
    "description": "If there are elements on the page that make checking the page difficult, invoke the jQuery method \"remove\" to get rid of them!\n\ncy.get('#fruits li .price .old-price').invoke('remove')\n\nFind this example at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-12-01T12:45:41Z",
    "url": "https://youtu.be/DWrC1YvjKvU"
  },
  {
    "videoId": "Xymm3phZQRk",
    "title": "Input With Type Number Checking valueAsNumber Prop Example",
    "description": "For input elements with type=number the browser creates a property \"valueAsNumber\" that has the current input value converted into a number. You can check it from your Cypress tests:\n\ncy.get('#age')\n  .should('have.value', '22')\n  .and('have.prop', 'valueAsNumber', 22)\ncy.get('#glass').should('have.prop', 'valueAsNumber', 0.5)\n\nFind this example at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-12-01T12:33:33Z",
    "url": "https://youtu.be/Xymm3phZQRk"
  },
  {
    "videoId": "_7A7ESfPPDM",
    "title": "Find The Table Row Using The Exact Cell Text",
    "description": "How can we find a table row with a cell that has the exact text content from the given variable like:\nconst name = \"apple\"\nWe can find the cell first by constructing a regular expression and using the cy.contains command\ncy.contains('td', new RegExp('^' + name + '$'))\nThen we can find the row and confirm it is the right row. Find this recipe and lots more Cypress examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-11-30T14:26:43Z",
    "url": "https://youtu.be/_7A7ESfPPDM"
  },
  {
    "videoId": "PLSUQ7nGbs4",
    "title": "Cypress Advent Calendar 2022 Announcement",
    "description": "Read the full announcement at https://cypresstips.substack.com/p/cypress-advent-calendar-2022-is-coming and subscribe.\n\nI have two courses that go into advanced Cypress topics: Network Exercises and Cypress Plugins. During December, I will unlock a new lesson from one of the courses but only for 24 hours. Every morning at 9 AM Eastern Timezone one lesson will become public, giving you an entire day to read, practice, and watch my solution to the exercises. Then the next day, the lesson will go back behind a paywall.\n\nSee the courses at https://cypress.tips/courses/cypress-plugins - there are a couple of free lessons there to give you a taste of what the courses are like.",
    "publishedAt": "2022-11-29T18:32:15Z",
    "url": "https://youtu.be/PLSUQ7nGbs4"
  },
  {
    "videoId": "dxGhIvFNm4I",
    "title": "Inject Entire Objects Into Cypress Tests Using as-a Utility",
    "description": "You can inject an entire JSON object of sensitive data into Cypress tests without hard-coding it into files or committing to the source control. My utility as-a https://github.com/bahmutov/as-a works by injecting environment variables. If an environment variable name starts with \"CYPRESS_\" string, then those values are automatically parsed and added to the Cypress \"env\" object. The tests can retrieve those values using Cypress.env(name) command, as described in https://on.cypress.io/environment-variables Find the source code for this video in the repo https://github.com/bahmutov/cypress-as-a-example",
    "publishedAt": "2022-11-26T17:02:44Z",
    "url": "https://youtu.be/dxGhIvFNm4I"
  },
  {
    "videoId": "3c1nU-ULxnA",
    "title": "Testing Kendo UI Table And Country Select Dropdown",
    "description": "In this video, I select a country from a dropdown made using the Kendo UI library. The test is flake-free since we follow the Cypress retry-ability guide https://on.cypress.io/retry-ability (for example, by using a cy.contains command with a single selector, rather than splitting the Cypress querying commands)\n\nFind the source code in the repo https://github.com/bahmutov/cypress-kendo-dropdown and my lessons on stubbing / spying JSONP API calls in the course https://cypress.tips/courses/network-testing",
    "publishedAt": "2022-11-23T14:30:22Z",
    "url": "https://youtu.be/3c1nU-ULxnA"
  },
  {
    "videoId": "3rgTQ4QZ0zc",
    "title": "Run All Specs Button Is Back In Cypress v11.2.0",
    "description": "The \"Run All Specs\" button was removed in Cypress v10, but now it is back! See how it works in this short video. See the full changelog at https://on.cypress.io/changelog#11-2-0 and my previous workarounds at https://glebbahmutov.com/blog/run-all-specs-cypress-v10/",
    "publishedAt": "2022-11-22T20:31:04Z",
    "url": "https://youtu.be/3rgTQ4QZ0zc"
  },
  {
    "videoId": "zSxJMbmknJA",
    "title": "Concatenate The Found Text Using Cypress Aliases",
    "description": "In this video, I show how to extract multiple text fragments from the page and save them under aliases. Then we can get all the aliased values while avoiding a pyramid of callbacks.\n\ncy.get('#noun').invoke('text').as('noun')\ncy.get('#verb').invoke('text').as('verb')\ncy.get('#adjective').invoke('text').as('adjective')\ncy.then(function () {\n  const s = `${this.noun} ${this.verb} ${this.adjective}`\n  expect(s, 'concatenated string').to.equal(\n    'a brown fox jumped slow',\n  )\n})\n\nFind this recipe at my site https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-11-17T18:56:20Z",
    "url": "https://youtu.be/zSxJMbmknJA"
  },
  {
    "videoId": "pzHEXjjfLvE",
    "title": "Subscribe To The Message Events From The Test",
    "description": "Sometimes we don't want to stub / spy the calls \"window.postMessage\", mostly because we might not have the access to the method. Instead we might subscribe to the message events directly. In this example (from https://github.com/bahmutov/cypress-post-message repo), we subscribe to the events sent by the child iframe window to its parent window and we use a single stub instance created using cy.stub() command to only keep track of the original arguments\n\nconst postMessage = cy.stub().as('postMessage')\ncy.visit('parent.html', {\n  onBeforeLoad(win) {\n    win.addEventListener('message', function (e) {\n      postMessage(e.data)\n    })\n  },\n})\n\ncy.get('@postMessage')\n  .should('have.been.calledTwice')\n  .and('have.been.calledWithExactly', 'one')\n  .and('have.been.calledWithExactly', 'two')\n\nRead the blog post \"Spy On window.postMessage Calls\" https://glebbahmutov.com/blog/spy-on-postmessage/\n\nFind more Cypress spies and stubs examples at https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html",
    "publishedAt": "2022-11-15T22:36:01Z",
    "url": "https://youtu.be/pzHEXjjfLvE"
  },
  {
    "videoId": "l-1Ti4CbXxM",
    "title": "Spy On The Window PostMessage Calls",
    "description": "When visiting the page, we can start spying on the window.postMessage method. The application code calls this method, and we can then confirm those expected calls were made.\n\ncy.visit('index.html', {\n  onBeforeLoad(win) {\n    cy.spy(win, 'postMessage').as('postMessage')\n  },\n})\ncy.get('@postMessage')\n  .should('have.been.calledTwice')\n  .and('have.been.calledWithExactly', 'one')\n  .and('have.been.calledWithExactly', 'two')\n\nRead the blog post \"Spy On window.postMessage Calls\" https://glebbahmutov.com/blog/spy-on-postmessage/\n\nFind this code in the repo https://github.com/bahmutov/cypress-post-message",
    "publishedAt": "2022-11-15T22:16:33Z",
    "url": "https://youtu.be/l-1Ti4CbXxM"
  },
  {
    "videoId": "0d3SKQ-9WJI",
    "title": "Confirm The Index Of The Element With The Given Text",
    "description": "If we find an element by text using cy.contains command, we can confirm the found element's index among its siblings by invoking the jQuery \"index\" method https://api.jquery.com/index/. It yields the number, starting with zero. This makes checking the order of elements really easy.\n\n// \"Pears\" is the third element in the list of fruits\n// Let's confirm it\ncy.contains('#fruits li', 'Pear')\n  .invoke('index')\n  .should('equal', 2)\n\nFind this recipe among many examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-11-15T15:57:03Z",
    "url": "https://youtu.be/0d3SKQ-9WJI"
  },
  {
    "videoId": "1iOU9ZPd0pg",
    "title": "How To Unit Test Find And Parse The Price Function That Needs A jQuery Object",
    "description": "If you need to unit test a function that expects a jQuery object as its argument, you can quickly create such objects using Cypress.$ jQuery library. See the full source code at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-11-11T20:00:21Z",
    "url": "https://youtu.be/1iOU9ZPd0pg"
  },
  {
    "videoId": "jBVeLoD8A-g",
    "title": "Find The DOM Element With The Max Number Using Lodash _.maxBy",
    "description": "You can use bundled Lodash library to iterate over jQuery object. In this video, I show how to extract a number from each element and find the element with the max number. We can then return that max DOM element and chain more Cypress commands and assertions. Find this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-11-11T19:44:46Z",
    "url": "https://youtu.be/jBVeLoD8A-g"
  },
  {
    "videoId": "ljOudeJ7XaA",
    "title": "Overwrite The cy.should Command To Automatically Look Up Aliased Values",
    "description": "We can overwrite the existing Cypress commands, and even the \"cy.should\" assertion command. In this video I show a useful trick such overwrite allows: to automatically look up aliased values to avoid pyramid of Doom of callbacks when looking up values from the page. The final code becomes very simple:\n\ncy.get('.score')\n  .first()\n  .invoke('text')\n  .then(parseInt)\n  .as('scoreA')\ncy.get('.score')\n  .eq(1)\n  .invoke('text')\n  .then(parseInt)\n  .should('be.above', '@scoreA')\n\nFind this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-11-09T17:36:24Z",
    "url": "https://youtu.be/ljOudeJ7XaA"
  },
  {
    "videoId": "tk8baP3AaH0",
    "title": "Use A Single Get Command With Should Callback To Detect The Loaded Numerical Scores",
    "description": "The final example from the series of videos exploring how to check the page that loads the scores shows two short solutions.\n\nThe first one retries finding a number on the page, and then grabs the elements, spreads them into arguments to cy.then callback and asserts them\n\ncy.contains('.score', /^\\d+$/)\ncy.get('.score').spread(function (first, second) {\n  expect(parseInt(first.innerText)).to.be.below(\n    parseInt(second.innerText),\n  )\n})\n\nFinally, the second solution is the shortest one. It uses a should(callback) function that forces the test to retry fetching the numbers from the page until they truly become integers.\n\ncy.get('.score').should(function ($scores) {\n  const [first, second] = $scores\n  expect(parseInt(first.innerText)).to.be.below(\n    parseInt(second.innerText),\n  )\n})\n\nFind these solutions at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-11-08T16:27:40Z",
    "url": "https://youtu.be/tk8baP3AaH0"
  },
  {
    "videoId": "luY5KmvTLRg",
    "title": "Check The Page Has Finished Updating Before Getting The Values",
    "description": "Sometimes a chain of Cypress commands can give you a stale reference to an element. If the app overwrites the entire portion, that element reference will no longer be updated, so the test will never \"see\" the value it is looking for. In this video, I explain a better approach: check using a single command with retry-ability the page, and once it has finished updating for sure, then use chains of Cypress commands to extract the values.\n\nOur final test looks like this:\ncy.contains('.score', /^\\d+$/)\n\ncy.get('.score')\n  .first()\n  .invoke('text')\n  .then(parseInt)\n  .as('scoreA')\ncy.get('.score').eq(1).invoke('text').then(parseInt).as('scoreB')\ncy.then(function () {\n  expect(this.scoreA, 'compare scores').to.be.below(this.scoreB)\n})\nYou can find it under the recipes at https://glebbahmutov.com/cypress-examples and you can read the Retry-ability guide at https://on.cypress.io/retry-ability",
    "publishedAt": "2022-11-07T20:57:03Z",
    "url": "https://youtu.be/luY5KmvTLRg"
  },
  {
    "videoId": "6PzXHCUD1Yc",
    "title": "Confirm The Page Shows A Number Before Converting And Saving As An Alias",
    "description": "Imagine a page loading a score and updating the element's text. At first, it shows the text \"loading...\" and then sets the text to something like \"60\". How do we save the number as a Cypress alias if it is delayed? By checking the element's text against a regular expression before converting it to a number!\n\ncy.get('.score')\n  .first()\n  .invoke('text')\n  .should('match', /^\\d+$/)\n  .then(parseInt)\n  .as('scoreA')\n\nFind this recipe and many more examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-11-07T16:22:08Z",
    "url": "https://youtu.be/6PzXHCUD1Yc"
  },
  {
    "videoId": "0kl1GjchqQc",
    "title": "Flatten Cypress Pyramid Of Callbacks Using Aliases",
    "description": "When we extract data from the page in Cypress we can get the value in a cy.then callback function. If we need to extract and compare two pieces of data, then the two cy.then callbacks are nested, leading to a \"pyramid of doom\" of callbacks. In this video, I explain how to flatten the pyramid using Cypress aliases.\n\nHere is the final test: it extracts two scores from the page and confirms the first score is lower than the second one.\n\n// get the first score\ncy.get('.score')\n  .first()\n  .invoke('text')\n  .then(parseInt)\n  .as('scoreA')\n// get the second score\ncy.get('.score').eq(1).invoke('text').then(parseInt).as('scoreB')\ncy.then(function () {\n  expect(this.scoreA, 'compare scores').to.be.below(this.scoreB)\n})\n\nFor more examples like this, see https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-11-06T18:09:33Z",
    "url": "https://youtu.be/0kl1GjchqQc"
  },
  {
    "videoId": "PZ2OsLBts1E",
    "title": "Test Formatted Phone Number Input",
    "description": "Read the blog post https://glebbahmutov.com/blog/text-input/ In this video, I explain how a rich input phone number web widget can be tested using Cypress. We validate the hidden input with the raw phone number, and the textbox that shows the formatted phone number.\n\ncy.visit('app/index.html')\n// starts with a 10 digit number\ncy.get('input[name=Mobile]')\n  .should('have.prop', 'value')\n  .should('match', /^\\d{10}$/)\ncy.get('input[name=Mobile]')\n  .parent()\n  .find('input[role=textbox]')\n  .clear()\n  .type('1234567890')\n  .blur()\ncy.get('input[name=Mobile]')\n  .should('have.prop', 'value', '1234567890')\n  .parent()\n  .find('input[role=textbox]')\n  // the text box has formatted phone number\n  .should('have.value', '+1 (123) 456-7890')\n\nFind the full source code at https://github.com/bahmutov/cypress-devextreme-example",
    "publishedAt": "2022-10-27T12:25:40Z",
    "url": "https://youtu.be/PZ2OsLBts1E"
  },
  {
    "videoId": "vxDjcT63mJI",
    "title": "Cypress DevExtreme Example",
    "description": "Read the blog post https://glebbahmutov.com/blog/cypress-devextreme-example/.\nWe can query elements using the name, role, aria labels, and text which comes in handy when we don't control the HTML markup. In this video, I show a form created using DevExtreme JS widgets. We will confirm the input field value, and then change it using a popup list. Find the complete source code in the repo https://github.com/bahmutov/cypress-devextreme-example Tip: for more Cypress querying command examples, see https://glebbahmutov.com/cypress-examples/commands/querying.html page",
    "publishedAt": "2022-10-26T14:05:42Z",
    "url": "https://youtu.be/vxDjcT63mJI"
  },
  {
    "videoId": "JzJhVEnt22s",
    "title": "Stub window.print Method",
    "description": "To avoid opening the System Print dialog, we can stub the \"window.print\" method before the application calls it. For example, if the application calls \"print\" on button click, we can stub the \"window.print\" method before clicking.\n\ncy.window().then(function (w) {\n  cy.stub(w, 'print').as('print')\n})\ncy.get('#print').click()\ncy.get('@print').should('be.calledOnce')\n\nAs always, we should confirm that our method stub was really used. Find this recipe and many more stubbing and spying recipes at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-10-24T19:46:19Z",
    "url": "https://youtu.be/JzJhVEnt22s"
  },
  {
    "videoId": "IhGHb7PV3XY",
    "title": "Remove The Found Element",
    "description": "You can remove the element found using cy.get command by calling the jQuery method \"remove\" using cy.invoke command.\n\ncy.get('.picked').invoke('remove')\n\nAll Cypress querying commands yield jQuery objects. You can invoke other jQuery methods, like \"text\" before trimming it.\n\ncy.get('#make')\n  .invoke('text')\n  .invoke('trim')\n  .should('equal', 'Honda Civic')\n\nFind this recipe and many other Cypress examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-10-17T14:08:23Z",
    "url": "https://youtu.be/IhGHb7PV3XY"
  },
  {
    "videoId": "7zeouZjZWDY",
    "title": "Solve The Detached Button Click Error",
    "description": "In this video, I explain why the test fails with \"element detached error\" when the test tries to click on the button without waiting for the application to finish updating in response to the previous test commands.\n\n// ANTI-PATTERN, DO NOT DO THIS\ncy.type(...)\ncy.get('button').contains('Save').click()\n// SAFE COMMANDS\n// wait for the app to re-render in response to the cy.type\ncy.type(...)\ncy.contains('button', 'Save')\n  .should('be.enabled')\n  .click()\n\nThe test should wait for the application to finish processing the \"cy.type\" command. The test should also strive to use a single querying command like \"cy.contains\" instead of splitting querying DOM elements into a chain of \"cy.get\" + \"cy.contains\" commands. For more, read the Cypress Retry-ability guide at https://on.cypress.io/retry-ability",
    "publishedAt": "2022-10-12T16:00:45Z",
    "url": "https://youtu.be/7zeouZjZWDY"
  },
  {
    "videoId": "qzY8-HI89DM",
    "title": "Check One Of Several Attributes Or Its Values",
    "description": "This video shows two conditional testing examples:\n1 - how to check if an element has one of the several attributes present.\nfunction haveOurAttribute($el) {\n  if (\n    $el[0].hasAttribute('data-name') ||\n    $el[0].hasAttribute('data-job')\n  ) {\n    // everything is ok\n  } else {\n    throw new Error('Missing an attribute')\n  }\n}\n\ncy.get('#person1').should(haveOurAttribute)\nFor more examples of \"should(callback)\" see https://glebbahmutov.com/cypress-examples/commands/assertions.html\n\n2 - how to check if an attribute has a value from the given list\ncy.get('#person1')\n  .should('have.attr', 'data-name')\n  .should('be.oneOf', ['Joe', 'Mary'])\n\nYou can find the code among the recipes at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-10-12T15:26:35Z",
    "url": "https://youtu.be/qzY8-HI89DM"
  },
  {
    "videoId": "WjkAVcsZQbM",
    "title": "Fluent Cypress Command Chains",
    "description": "In this example, I refactor a long should(callback) function into a series of cy.then + cy.invoke commands to transform the current subject either by applying callback functions or invoking the methods on the current subject. Find the full example code at https://glebbahmutov.com/cypress-examples/commands/location.html\n\n// the full URL includes several search terms\ncy.visit(\n  'https://example.cypress.io/commands/location?search=value&id=1234',\n)\ncy.location('search')\n  .should('include', 'search=')\n  .then(function (s) { return new URLSearchParams(s) })\n  .invoke('entries')\n  .then(Array.from)\n  .then(Cypress._.fromPairs)\n  .then(function (o) {\n    Cypress._.updateWith(o, 'id', Number)\n  })\n  .then(console.log)\n  .should('deep.equal', {\n    search: 'value',\n    id: 1234,\n  })\n\nTip: for more on the fluent style of programming, read my functional programming blog posts https://glebbahmutov.com/blog/tags/functional/",
    "publishedAt": "2022-10-07T19:56:34Z",
    "url": "https://youtu.be/WjkAVcsZQbM"
  },
  {
    "videoId": "5B5uYL3Voy0",
    "title": "Close A Modal Popup That Takes Over The Top Browser Window",
    "description": "In this example test, the lightbox widget pops up and escapes from the application's iframe to take over the entire browser window, covering both the Cypress Command Log and the application. Cypress commands like \"cy.get\" cannot even find the elements outside the app's iframe, so how can we close this popup?\n\nWe can find the close button DOM element and make Cypress click on it, even if it is outside the application's own iframe:\n\ncy.wrap(\n  window.top.document.querySelector('[aria-label=\"Close Modal\"]'),\n).click({ force: true })\n\nThen we continue with the rest of the test",
    "publishedAt": "2022-10-05T14:40:45Z",
    "url": "https://youtu.be/5B5uYL3Voy0"
  },
  {
    "videoId": "y6fi8hZxcdM",
    "title": "Extract A Part Of The Current Url Using A Regular Expression",
    "description": "We can grab a part of the URL using a named capture group, then save the value using an alias. Later we can get the value using \"this.alias\" or \"cy.get(alias)\" commands.\n\nImagine we are trying to confirm the application URL \"/sell/item10001/confirmation\"\n\n// yields a string\ncy.location('pathname')\n  .should('match', /\\/sell\\/item\\d+\\/confirmation/)\n  .invoke('match', /\\/sell\\/item(? id \\d+)\\/confirmation/)\n  .its('groups.id', { timeout: 0 })\n  .should('be.a', 'string')\n  .as('itemId')\ncy.log('printing the id').then(function () {\n  cy.log(`item id is: ${this.itemId}`)\n})\ncy.get('@itemId').then(Number).should('be.within', 1_000, 20_000)\n\nFind the full example at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-09-29T19:40:30Z",
    "url": "https://youtu.be/y6fi8hZxcdM"
  },
  {
    "videoId": "iQFBKIjAwIM",
    "title": "Css And jQuery Selectors In Cypress",
    "description": "Cypress uses jQuery to select elements, thus you can use both CSS and jQuery selectors. These examples come from https://glebbahmutov.com/cypress-examples recipes and show how to select elements using ids, class names, attributes, and visibility\n\n// select element by ID\ncy.get('#person').should('have.text', 'Joe')\n// cy.contains also lets you specify a selector\ncy.contains('#person', 'Joe')\n\n// Select elements with both classes\ncy.get('.person.student').should('have.text', 'Mary')\n\n// Select elements by combination of classes and attributes\ncy.get('.person[data-group=\"a1\"]')\n  .should('have.text', 'Ann')\n  .and('have.class', 'student')\n\n// Select elements by hierarchy\ncy.get('[data-group=\"b2\"] .student')\n  .should('have.length', 2)\n  // let's find all junior students\n  // using https://on.cypress.io/filter\n  .filter('[data-rank=\"junior\"]')\n  .should('have.text', 'Ann')\n\n// Select visible or hidden elements using jQuery\n// select using hierarchy of classes\ncy.get('.university .student').should('have.length', 3)\n// select only the visible student elements\ncy.get('.university .student:visible').should('have.length', 2)\n// select only the hidden elements\ncy.get('.university .student:hidden')\n  .should('have.length', 1)\n  .and('have.text', 'Joe')\n  .and('have.css', 'display', 'none')",
    "publishedAt": "2022-09-23T13:18:11Z",
    "url": "https://youtu.be/iQFBKIjAwIM"
  },
  {
    "videoId": "pA2C0q1mgnA",
    "title": "Run Cypress Specs In The Order You Want",
    "description": "This video shows how to run the Cypress E2E specs in the order you want. Find the repo at https://github.com/bahmutov/cypress-spec-order-example\n\nsetupNodeEvents(on, config) {\n  config.specPattern = [\n    'cypress/e2e/spec2.cy.js',\n    'cypress/e2e/spec3.cy.js',\n    'cypress/e2e/spec1.cy.js',\n  ]\n  // IMPORTANT: need to return the changed config\n  // so Cypress knows about your changes\n  return config\n},",
    "publishedAt": "2022-09-21T14:00:39Z",
    "url": "https://youtu.be/pA2C0q1mgnA"
  },
  {
    "videoId": "GjKSzHPyDyo",
    "title": "Test.Bash 2022 UI Challenge Solution Using Cypress.io Test Runner",
    "description": "This is my solution to the Test.Bash 2022 UI Automation challenge https://club.ministryoftesting.com/t/take-the-test-bash-2022-ui-challenge-closing-on-the-25th-of-september-2022/ I used Cypress.io test runner and recorded the entire setup and writing of the test. Read the blog post https://glebbahmutov.com/blog/test-bash-2022-ui-challenge/",
    "publishedAt": "2022-09-16T14:41:51Z",
    "url": "https://youtu.be/GjKSzHPyDyo"
  },
  {
    "videoId": "oFUuI2jTWjk",
    "title": "Escape The Selector",
    "description": "Sometimes an element can have characters in its ID or attribute or class names that have special meaning, like how do you select an element with a colon in its ID? id=\"person:age\"\n\nYou need to scape the \":\" character using double backslashes\n\ncy.get('#person\\\\:age').should('have.text', '42')\n\nYou can even use the jQuery method (remember, jQuery is bundled with Cypress) to escape the text for selector:\n\ncy.get('#' + Cypress.$.escapeSelector('person:age'))\n\nFind this recipe and many more at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-09-15T17:13:04Z",
    "url": "https://youtu.be/oFUuI2jTWjk"
  },
  {
    "videoId": "8UhoGJEe4NY",
    "title": "Get The Index Of An Element Using jQuery Method",
    "description": "In this video, we find an element, and then confirm its index among its siblings by invoking the jQuery method index()\n\ncy.get('#carousel li.active')\n  // call jQuery index() method\n  // to yield the index of the active LI item\n  .invoke('index')\n  .should('equal', 2)\n  // if you want to work with the index,\n  // yield it to the next command\n  .then(function (index) {\n    cy.log(`index is **${index}**`)\n  })\n\nFind this example and many more at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-09-14T17:28:37Z",
    "url": "https://youtu.be/8UhoGJEe4NY"
  },
  {
    "videoId": "3RyqCv_TlE8",
    "title": "Catch Accidental Async Callbacks In Cypress Tests",
    "description": "Cypress has a problem - it does not play nicely with \"async\" tests because they break the command chain. The test like this one would pass, even if the command inside of it fails:\n\nit('async callback', async function () {\n  cy.contains(await getBar())\n})\n\nI think Cypress should catch the async test callbacks, but for now, I wrote a plugin https://github.com/bahmutov/cypress-catch-async-tests that does that for you. Just import it in your spec or support file and it will immediately break the test if you accidentally left the \"async\" keyword in the test.",
    "publishedAt": "2022-09-09T11:48:40Z",
    "url": "https://youtu.be/3RyqCv_TlE8"
  },
  {
    "videoId": "b8aoVh6IdCg",
    "title": "How To Preserve Cookie Once In Cypress v10",
    "description": "Instead of the deprecated command \"Cypress.Cookies.preserveOnce\" in Cypress v10 you can use my plugin https://github.com/bahmutov/cypress-v10-preserve-cookie that implements an equivalent command to automatically preserve/restore a cookie with the given name.\n\nimport 'cypress-v10-preserve-cookie'\n\nInstead of Cypress.Cookies.preserveOnce('connect.sid') use cy.preserveCookieOnce('connect.sid') from the plugin\n\nIf you need more features, like validating the cookie, see the plugin https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2022-09-07T19:31:30Z",
    "url": "https://youtu.be/b8aoVh6IdCg"
  },
  {
    "videoId": "RTzJu44yAc8",
    "title": "Confirm Cypress Command Execution Order Using Sinon.js Spies",
    "description": "This test comes from cypress-if plugin https://github.com/bahmutov/cypress-if We are confirming that the ELSE branch of the \".if()...else()...finally()\" command chain was executed, the IF branch was not executed, and that the ELSE commands were called before the FINALLY commands.\n\ncy.wrap(1)\n  // .if() comes from the cypress-if plugin\n  // https://github.com/bahmutov/cypress-if\n  .if('equals', 2)\n  .log('if branch')\n  .then(cy.spy().as('if'))\n  .else()\n  .log('else branch')\n  .then(cy.spy().as('else'))\n  .finally()\n  .log('finally')\n  .then(cy.spy().as('finally'))\ncy.get('@else').should('have.been.calledOnce')\ncy.get('@finally').should('have.been.calledOnce')\ncy.get('@if').should('not.be.called')\ncy.log('**else was called before finally**')\ncy.get('@finally').then(function (fin) {\n  cy.get('@else').should('have.been.calledBefore', fin)\n})",
    "publishedAt": "2022-09-06T16:38:51Z",
    "url": "https://youtu.be/RTzJu44yAc8"
  },
  {
    "videoId": "1PffgLBGHWs",
    "title": "Check If An Array Of Strings Includes Another Array",
    "description": "How do you check if one array of strings is a subset of another array of strings? You can use Chai assertion \"include\" to check each value one by one:\n\nlist.forEach(function (country) {\n  expect(countries).to.include(country)\n})\n\nIn Cypress, you can also use the Lodash _.difference method (Lodash is bundled with Cypress) to compute the difference array. If there are no extra values, that difference should be empty\n\nconst difference = Cypress._.difference(list, countries)\nexpect(difference, 'extra countries').to.be.empty\n\nFind this recipe and many more Cypress test examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-09-06T14:19:11Z",
    "url": "https://youtu.be/1PffgLBGHWs"
  },
  {
    "videoId": "PI5EOTNwKuQ",
    "title": "Find Table Rows With The Given Cells By The Column Titles",
    "description": "This video teaches you the advanced CSS and jQuery selectors like :has, :contains, :nth-child We will find the table rows using the cell values. For example, to find the table rows where the first column cell has the value \"Sharks\" we can use the following complex selector:\n\ncy.get('table tbody tr:has(td:nth-child(1):contains(\"Sharks\"))')\n\nIf we need to find the rows with cells in the column 1 having text \"Sharks\" and the cells in the column 3 having text \"win\", we can filter the rows several times\n\ncy.get('table tbody tr')\n  .filter(':has(td:nth-child(1):contains(\"Sharks\"))')\n  .filter(':has(td:nth-child(3):contains(\"win\"))')\n\nInstead of using several child cy.filter commands, we can filter inside cy.then callback using the jQuery .filter() method. The same code as above can be written as:\n\ncy.get('table tbody tr')\n  .then(function ($tr) {\n    return $tr\n      .filter(':has(td:nth-child(1):contains(\"Sharks\"))')\n      .filter(':has(td:nth-child(3):contains(\"win\"))')\n  })\n\nFinally, if we do not know the column indices, and instead know the column titles, we first need to find the indices, and then call the jQuery filter methods. Let's say we want to find all rows for the games where the team playing away won. Here is our search object\n\nconst search = {\n  Location: 'away',\n  Result: 'win',\n}\n\nWe must first find the indices of the columns \"Location\" and \"Result\" and then call \".filter\" several times, filtering the rows step by step. You can find the final code in a recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-09-04T18:56:33Z",
    "url": "https://youtu.be/PI5EOTNwKuQ"
  },
  {
    "videoId": "TVwU0OvrVUA",
    "title": "Introduction To Using cypress-if Plugin to Write Conditional Cypress Commands",
    "description": "Let's click a checkbox only if it NOT checked\n\nimport \"cypress-if\"\ncy.get('.mybox')\n  .if('not.checked').click()\n\nUsing the plugin \"cypress-if\" https://github.com/bahmutov/cypress-if you can execute Cypress command chains only if a given condition passes or fails. For example, let's delete Todo items if there are any\n\ncy.get('li.todo .destroy', { timeout: 0 })\n  .if()\n  .click({ force: true, multiple: true })\n  .else()\n  .log('**nothing to clean up**');\n\nFor more examples, see the plugin's repo and the blog posts at https://glebbahmutov.com/blog/ I will probably show more use cases for this plugin as part of my \"Cypress Plugins\" course https://cypress.tips/courses/cypress-plugins",
    "publishedAt": "2022-08-31T17:47:45Z",
    "url": "https://youtu.be/TVwU0OvrVUA"
  },
  {
    "videoId": "YQGGtz00JA8",
    "title": "Check The Enabled Checkboxes",
    "description": "It is easy to select only the enabled checkboxes and check them, even if there are multiple elements to check\n\n// use the jQuery :checkbox + :enabled selectors\n// and the cy.check command\ncy.get(':checkbox:enabled').check()\n\nFor more examples like this, see https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-08-23T20:41:55Z",
    "url": "https://youtu.be/YQGGtz00JA8"
  },
  {
    "videoId": "Yyy6plSk5W0",
    "title": "Select DOM Elements With An Attribute Present Or Absent",
    "description": "This example comes from https://glebbahmutov.com/cypress-examples and it shows how to pick all elements with a given attribute present or absent.\n\n// find all LI elements that have\n// the \"data-priority\" attribute\ncy.get('li[data-priority]').should('have.length', 3)\n// find all LI elements that do not have\n// the \"data-priority\" attribute\ncy.get('li')\n  .not('[data-priority]')\n  .should('have.length', 1)\n  .and('have.text', 'Three')\n\nTip: check out jQuery selectors you can use in Cypress https://api.jquery.com/category/selectors/",
    "publishedAt": "2022-08-19T13:10:02Z",
    "url": "https://youtu.be/Yyy6plSk5W0"
  },
  {
    "videoId": "nsl0JGBdQos",
    "title": "How To Submit A Cypress Bug",
    "description": "In this video, I show a Cypress bug introduced in v10.5.0 that has changed the return value from the `cy.log`  command, breaking its inside `cy.then(cy.log)` chains. I will create a reproducible example that you can find online at https://github.com/bahmutov/cypress-test-tiny/tree/cy-log-bug and submit it to the Cypress team as a new bug issue https://github.com/cypress-io/cypress/issues/23400",
    "publishedAt": "2022-08-17T14:04:55Z",
    "url": "https://youtu.be/nsl0JGBdQos"
  },
  {
    "videoId": "ag8dClTP-kw",
    "title": "Find row by the exact table cell text",
    "description": "Imagine that in this table we want to find the row with the second cell having the exact text \"b\". This video shows how to do this in two different ways:\n- cy.contains + cy.parent\n- cy.get + cy.filter\n\n// select that cell in the second column with the exact test \"b\"\n// using the cy.contains command\ncy.contains('table tbody td:nth-child(2)', /^b$/)\n  .parent('tr')\n  .should('have.attr', 'data-k', '2')\n// Alternative: use a custom cy.filter callback\ncy.get('table tbody tr')\n  .filter(function (k, tr) {\n    return tr.children[1].innerText === 'b'\n  })\n  .should('have.attr', 'data-k', '2')\n\nFind this and more recipes at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-08-12T12:55:14Z",
    "url": "https://youtu.be/ag8dClTP-kw"
  },
  {
    "videoId": "lj6cIjbPmh8",
    "title": "Compare Element Attribute Value",
    "description": "We can check that both elements either have the same attribute or do not have it.\n\ncy.get('#member')\n  .invoke('attr', 'active')\n  .then(Boolean)\n  .then(cy.log)\n  .then(function (isActive) {\n    if (isActive) {\n      cy.get('#info').should('have.attr', 'active')\n    } else {\n      cy.get('#info').should('not.have.attr', 'active')\n    }\n  })\nFind the full recipe and many more at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-08-10T18:53:10Z",
    "url": "https://youtu.be/lj6cIjbPmh8"
  },
  {
    "videoId": "88sIuUz6Jh0",
    "title": "Input Text Value Matches A Regular Expression",
    "description": "Imagine you have an input element with \"value\" property. You want to confirm the value of the property or if it matches the given regular expression\n\n// it looks best if we know the exact value to check\ncy.get('#user-ssn').should('have.value', '123-45-6789')\ncy.get('#user-ssn')\n  // you can invoke jQuery \"val\" method\n  // or use the \"have.prop\" assertion\n  .should('have.prop', 'value')\n  // yields the string value\n  .should('match', /^\\d\\d\\d-\\d\\d-\\d\\d\\d\\d$/)\n  // alternate regular expression\n  .and('match', /^\\d{3}-\\d{2}-\\d{4}$/)\n\nFind this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-08-10T13:24:50Z",
    "url": "https://youtu.be/88sIuUz6Jh0"
  },
  {
    "videoId": "ro3RPgNGw4g",
    "title": "Filter Elements Using jQuery Pseudo-Classes",
    "description": "How do you pick one element from the list of elements returned by the cy.get command? How do you pick several? In this video, I will use jQuery pseudo-classes like :odd, :even, :eq(index), :gt(index), :lt(index) to pick multiple elements\n\n// using the cy.eq command to pick one element\ncy.get('li').eq(2).should('have.text', 'Pears')\n// using jQuery :odd pseudo-class\ncy.get('li')\n  .filter(':odd')\n  .should('have.length', 2)\n// using jQuery odd() method\ncy.get('li')\n  .invoke('odd')\n  .should('have.length', 2)\n// using jQuery :even pseudo-class\ncy.get('li')\n  .filter(':even')\n  .should('have.length', 2)\n// select the 2nd and the 3rd elements\n// using jQuery :eq(index) pseudo-class\ncy.get('li')\n  .filter(':eq(1), :eq(2)')\n  .should('have.length', 2)\n// select the elements after the first two\n// using jQuery :gt(index) pseudo-class\ncy.get('li')\n  .filter(':gt(1)')\n  .should('have.length', 2)\n// select the middle two elements out of 4\n// using a combination of :gt() and :lt()\ncy.get('li')\n  .filter(':gt(0)')\n  .should('have.length', 3)\n  .filter(':lt(2)')\n  .should('have.length', 2)\n\nFind the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-08-10T13:11:34Z",
    "url": "https://youtu.be/ro3RPgNGw4g"
  },
  {
    "videoId": "zOLM8fodASY",
    "title": "Confirm The Table Columns Order",
    "description": "Imagine we have a table with multiple columns. We don't need to check every column, but we want to confirm that there are three columns \"Users\", \"Items\", and \"Projects\" in that order. We can extract all column heading cells, grab the text from each one, then filter out all columns we are NOT interested in. The remaining 3 columns string array must be in the expected order.\n\nconst getTexts = function ($el) {\n  return Cypress._.map($el, 'innerText')\n}\n// the list of columns we are looking for\nconst target = ['Users', 'Items', 'Projects']\ncy.get('table thead th')\n  .then(getTexts)\n  // filter the array\n  // confirm each column title we need is present\n  // and they are in the expected order\n  .should('deep.equal', target)\n\nFind the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-08-08T13:58:56Z",
    "url": "https://youtu.be/zOLM8fodASY"
  },
  {
    "videoId": "yTQf6vlWiHA",
    "title": "Check If Two Elements Have The Same Attribute Value",
    "description": "Let's confirm the fact that the two elements have equal \"data-name\" attributes. We don't know the expected value of the attribute, unfortunately, just that both elements have the same non-empty string value.\n\ncy.get('#el1')\n  .invoke('attr', 'data-name')\n  .should('be.a', 'string')\n  .and('be.not.empty')\n  .then(function (s) {\n    cy.get('#el2').should('have.attr', 'data-name', s)\n  })\n\nTip: a better test would know the expected attribute value\ncy.get('#el1').should('have.attr', 'data-name', 'Venus')\ncy.get('#el2').should('have.attr', 'data-name', 'Venus')\n\nFind this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-08-05T12:46:59Z",
    "url": "https://youtu.be/yTQf6vlWiHA"
  },
  {
    "videoId": "KE4A1Iupo60",
    "title": "Fail The Test If The App Calls console.log With The Word Error",
    "description": "In this video, the application might call console.log with an argument that contains the word \"error\". We want to fail the test in this case. I will show two ways of writing this test:\n- spy on the console.log and then inspect each call at the end of the test\n- stub the console.log, inspect the arguments, and immediately fail the test if the word \"error\" is found\nSee the full source code in a recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-08-04T12:46:00Z",
    "url": "https://youtu.be/KE4A1Iupo60"
  },
  {
    "videoId": "CRTRIaTX3hc",
    "title": "Find Multiple Elements By The Partial Text Match",
    "description": "We can find multiple elements on the page with the given text using the jQuery :contains(text) selector. \n\n// cy.contains returns the first match for \"Apple\"\ncy.contains('Apple').should('have.text', 'Apples')\n// use jQuery :contains selector to find all elements\n// by the partial text match\ncy.get('li:contains(Apple)')\n  .should('have.length', 2)\n  // grab the second match\n  .eq(1)\n  .should('have.text', 'Apple pies')\n\nFind the full example at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-08-02T15:25:31Z",
    "url": "https://youtu.be/CRTRIaTX3hc"
  },
  {
    "videoId": "54311sOqeLg",
    "title": "Work With Cypress JSON Fixtures Using TypeScript",
    "description": "This video shows how to give a type to the JSON data loaded using the cy.fixture command. For the explanation, read the blog post \"Convert Cypress Specs from JavaScript to TypeScript\n\" https://glebbahmutov.com/blog/cypress-js-to-ts/",
    "publishedAt": "2022-07-29T17:54:07Z",
    "url": "https://youtu.be/54311sOqeLg"
  },
  {
    "videoId": "lxx-_nAkQo8",
    "title": "Slow Down Cypress Tests",
    "description": "This video shows how to slow down a Cypress test by adding a delay to every Cypress command in the test using the cypress-slow-down plugin. For more details see https://github.com/bahmutov/cypress-slow-down and the \"Cypress Plugins\" course at https://cypress.tips/courses/cypress-plugins",
    "publishedAt": "2022-07-26T23:29:20Z",
    "url": "https://youtu.be/lxx-_nAkQo8"
  },
  {
    "videoId": "zR6o_tdJKDk",
    "title": "Cypress Stub For Geolocation getCurrentPosition Method Using Sinon.js",
    "description": "In this video, I show the Sinon.js method \"callsArgWith\" that is useful for stubbing methods that should call a callback function passed as an argument. In our test, we want to confirm the application is showing an error when the browser cannot get the geographic location.\n\nconst error = new Error('Test geo error')\ncy.window().then(function (win) {\n  cy.stub(win.navigator.geolocation, 'getCurrentPosition')\n    .callsArgWith(1, error)\n    .as('geoStub')\n})\ncy.get('#locate').click()\n// confirm the application behaves as it should\ncy.contains('#message', error.message)\ncy.get('@geoStub').should('have.been.calledOnce')\n\nFind this recipe and many more Sinon.js examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-07-11T14:38:32Z",
    "url": "https://youtu.be/zR6o_tdJKDk"
  },
  {
    "videoId": "lvpLU0EpmGs",
    "title": "Get The Last Item In An Array",
    "description": "If the current subject is an array, you can use the new ES6 Array methods or Lodash helper functions to get the last item and yield it to the next command or assertion\n\nconst list = [1, 2, 3]\ncy.wrap(list).invoke('at', -1).should('equal', 3)\ncy.wrap(list).then(Cypress._.last).should('equal', 3)\n\nFind this recipe and many more Cypress examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-07-07T13:24:31Z",
    "url": "https://youtu.be/lvpLU0EpmGs"
  },
  {
    "videoId": "IVoDbs7hraU",
    "title": "The Input Element Clears Invalid Values After 1 Second",
    "description": "In this video, I want to confirm the input element clears any invalid non-number values after one second. We confirm the input value is the same 900ms after typing the \"hello\", and then use a command with a custom timeout to check how quickly the input is cleared. We then confirm the input element preserves valid numbers.\n\ncy.get('#count')\n  .type('Hello{enter}')\n  // after 900ms the value is still \"Hello\"\n  .wait(900)\n  .should('have.value', 'Hello')\n// the value is cleared in the next 200ms\ncy.get('#count', { timeout: 200 })\n  .should('have.value', '')\n  // if we enter a valid number, it stays\n  .type('123{enter}')\n  .wait(1100)\n  .should('have.value', '123')\n\nFind this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-07-07T13:10:42Z",
    "url": "https://youtu.be/IVoDbs7hraU"
  },
  {
    "videoId": "T5Aqa1KjIqQ",
    "title": "Get Text From A List Of Elements",
    "description": "Imagine you have several elements, and you want to extract the text from each element. You can grab the elements using the cy.get command. That gives you a jQuery object. You can iterate over it by converting it to a plain array using Cypress.$.makeArray, or by using a Lodash method Cypress._.map. Once you extract the strings, you can compare the array of strings to the expected list.\n\nfunction getTexts ($el) {\n  return Cypress._.map($el, 'innerText')\n}\ncy.get('.matching')\n  .should('have.length', 3)\n  .then(getTexts)\n  .should('deep.equal', ['first', 'third', 'fourth'])\n\nFind this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-07-06T16:43:57Z",
    "url": "https://youtu.be/T5Aqa1KjIqQ"
  },
  {
    "videoId": "MRelgoMg230",
    "title": "Access The Response Text Yielded By The Plugin cypress-recurse",
    "description": "If you use cypress-recurse plugin to ping the page before visiting it, you might need to access the text or json from the fetch's response object. This video shows how to do it. In summary:\n\nrecurse(\n  // use fetch\n  // yield { respones }\n)\n// the \"recurse\" yields whatever\n// the first function yields, in our case\n// it is the { response } object. Let's grab its text\n.its('response')\n.invoke('text')\n.then(console.log)\n\nFind the full source code at https://github.com/bahmutov/live-example/tree/recursive/cypress/integration",
    "publishedAt": "2022-07-05T13:21:53Z",
    "url": "https://youtu.be/MRelgoMg230"
  },
  {
    "videoId": "phV3n5aKW5o",
    "title": "Use Sinon resetHistory Method To Avoid The Test Confusion",
    "description": "In this video, I am answering a question asked by someone taking my https://cypress.tips/courses/network-testing course. The user asked why two assertions might pass at the end of the same test:\n\ncy.visit('/')\ncy.get('@fruit').should('have.been.calledOnce')\n...\n// confirm the spy was executed = there was a network call\ncy.get('@fruit').should('have.been.calledOnce')\n// the above line can also pass if we check if the spy was called twice\ncy.get('@fruit').should('have.been.calledTwice')\n\nRemember: the sinon spy/stub keeps the count of calls. If it was already at count 1 (as it was in this test right after the visit), then the assertion \"calledOnce\" passes really quickly without waiting for the app to make another call. The assertion \"calledTwice\" really retries until the app makes the second call.\n\nTo improve the test, we should reset the spy's history to make sure it is called once _after_ the initial delay.\n\ncy.visit('/')\ncy.get('@fruit')\n  .should('have.been.calledOnce')\n  .invoke('resetHistory')\n// a minute passes\ncy.tick(60_000)\n// app calls the spy again\ncy.get('@fruit').should('have.been.calledOnce')\n\nFor more, see my \"Stubs, spies, and clock\" example page https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html and the blog post \"Sinon Edge Cases\" https://glebbahmutov.com/blog/sinon-edge/",
    "publishedAt": "2022-06-30T19:08:52Z",
    "url": "https://youtu.be/phV3n5aKW5o"
  },
  {
    "videoId": "ILZfNnheFDk",
    "title": "Stub A Method Depending On The Call Arguments",
    "description": "If we want to stub a method, we can use the Cypress command cy.stub, see https://on.cypress.io/stub which creates a Sinon.js stub. We can refine the stub by telling it what to do depending on the argument values and types. We can even call the original method for every non-specified variant\n\nconst greeter = {\n  /**\n   * Greets a person\n   * @param {string} name\n   */\n  greet(name) {\n    return `Hello, ${name}!`\n  },\n}\n\nconst stub = cy.stub(greeter, 'greet')\n// all non-matched calls should call the real method\nstub.callThrough()\n// all calls with a string argument should get \"Hi\"\nstub.withArgs(Cypress.sinon.match.string).returns('Hi')\n// all calls with a number argument should raise an error\nstub\n  .withArgs(Cypress.sinon.match.number)\n  .throws(new Error('Invalid name'))\n// let's confirm the stub is working\n// case 1: if we call it with a string argument\n// it returns \"Hi\"\nexpect(greeter.greet('World')).to.equal('Hi')\n// case 2: if we call it with a number argument\n// it raises an error\n// @ts-ignore\nexpect(function () { greeter.greet(42) }).to.throw('Invalid name')\nexpect(greeter.greet).to.have.been.calledTwice\n\n// case 3: non-matched calls invoke the actual method\n// @ts-ignore\nexpect(greeter.greet()).to.equal('Hello, undefined!')\n\nFor more, see the examples at https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html",
    "publishedAt": "2022-06-29T13:48:19Z",
    "url": "https://youtu.be/ILZfNnheFDk"
  },
  {
    "videoId": "eWxrLNmJbE0",
    "title": "Confirm The Text From The First Element Is Present In The Second Element",
    "description": "Let's say we want to check if the text from the first element is present in the second element on the page.\n\ncy.get('#current-date')\n  .invoke('text')\n  .then(function (text) {\n    cy.contains('#message', text)\n    cy.get('#message .note').should('have.text', text)\n  })\n\nFind this recipe and many more at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-06-28T13:34:37Z",
    "url": "https://youtu.be/eWxrLNmJbE0"
  },
  {
    "videoId": "X8iIoTxu_8k",
    "title": "Good Cypress Test Syntax",
    "description": "This video shows an example of good testing practices where the test confirms the values on the page, rather than computes them from the data shown by the page. The final tests control the data in the application and simply confirm the page works. The tests are short and elegant\n\n// these tests are written to show better testing practices\n// 1: do not trust the data from the page\n// 2: do not compute the result, know what to expect\n// 3: control the page by typing our values\nit('checks the page', function () {\n  cy.visit('public/index.html')\n  cy.get('[name=a]').should('have.value', '2')\n  cy.get('[name=b]').should('have.value', '3')\n  cy.contains('#result', '5')\n})\n\nit('handles empty inputs', function () {\n  cy.visit('public/index.html')\n  cy.get('[name=a]').clear()\n  cy.get('[name=b]').clear()\n  cy.contains('#result', 'empty')\n})\n\nit('adds the given numbers', function () {\n  cy.visit('public/index.html')\n  cy.get('[name=a]').clear().type(10)\n  cy.get('[name=b]').clear().type(30)\n  cy.contains('#result', '40')\n})\n\nFind the full source code in the repo https://github.com/bahmutov/cypress-multiple-aliases",
    "publishedAt": "2022-06-27T14:09:31Z",
    "url": "https://youtu.be/X8iIoTxu_8k"
  },
  {
    "videoId": "s2_467yUF2Y",
    "title": "Use cypress-recurse To Open Accordion Panels Until It Finds A Button To Click",
    "description": "This video shows how we can click on the accordion panels until we find one with a button. Then we click that button and assert the application calls the \"window.alert\" method. We are using the https://github.com/bahmutov/cypress-recurse plugin",
    "publishedAt": "2022-06-23T14:58:04Z",
    "url": "https://youtu.be/s2_467yUF2Y"
  },
  {
    "videoId": "U6oqiu12rfg",
    "title": "Find And Click An Accordion With A Button",
    "description": "You can use the \"cy.get\" or other Cypress querying commands with the jQuery/CSS selector \":has\" to find elements that contain other elements. For example, in the test below we first find the panel with a button inside of it. We then open the panel, and can click the button. We also confirm the button was clicked by stubbing the \"window.alert\" method. Find this recipe and many more Cypress command examples at https://glebbahmutov.com/cypress-examples\n\ncy.get('.panel:has(button)')\n  .prev()\n  .should('have.class', 'accordion')\n  .click()\ncy.window().then(function (win) {\n  cy.stub(win, 'alert').as('alert')\n})\ncy.contains('button', \"I'm here\").should('be.visible').click()\ncy.get('@alert').should('have.been.calledOnce')",
    "publishedAt": "2022-06-23T14:08:49Z",
    "url": "https://youtu.be/U6oqiu12rfg"
  },
  {
    "videoId": "MGl7IAwLTlo",
    "title": "Keep It Simple (When Writing Cypress Assertions)",
    "description": "You do not need to overcomplicate the tests. If you have a static value, just use the Chai \"expect\" function to write your assertions; no need to wrap the value, use an alias, get the value by an alias, or use the \"should(assertion)\" syntax. Here is a little example\n\n// ⚠️ COMPLICATED WAY\ncy.wrap('CYPRESSIO').as('text')\ncy.get('@text').should('match', /cypress/i)\n// of course, the above is possible, but wrapping\n// a value, adding an alias, then getting it back\n// just to check if the value matches a regular expression\n// ✅ RECOMMENDED\nexpect('CYPRESSIO').to.match(/cypressio/i)\n\nFor more examples, see https://glebbahmutov.com/cypress-examples/commands/assertions.html",
    "publishedAt": "2022-06-22T19:35:06Z",
    "url": "https://youtu.be/MGl7IAwLTlo"
  },
  {
    "videoId": "Ij3g0W_oxPE",
    "title": "Check CSS Text Decoration Property",
    "description": "We can use Chai-jQuery assertion \"have.css\" to verify a style property in the Cypress test. For example, let's check the text-decoration property. We get the element, check if it has a CSS property and then check that it includes the word \"underline\"\n\ncy.get('#contains-example')\n  .should('include.text', 'Some text')\n  .and('have.css', 'text-decoration')\n  .then(cy.log)\n  .should('include', 'underline')\n\nNote: the assertion \"have.css\" is yielding the value of the property. Unlike 99% of Chai and Chai-jQuery assertions, it changes the subject of the Cypress command chain.\n\nFor more examples, see https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-06-21T18:22:09Z",
    "url": "https://youtu.be/Ij3g0W_oxPE"
  },
  {
    "videoId": "CHpIu0HucKw",
    "title": "Click A Random Element",
    "description": "Imagine we have a list of items and want to pick an item randomly and click on it. We can first get a non-empty list of elements, get its length, then randomly pick a number between 0 and N - 1 (including). Then we can use the Cypress cy.eq(randomIndex) command https://on.cypress.io/eq to pick one element from the list.\n\ncy.get('li.an-item')\n  .should('have.length.greaterThan', 0)\n  .its('length')\n  .then(function (n) {\n      return Cypress._.random(0, n - 1)\n  })\n  .then(function (k) {\n    cy.get('li.an-item')\n      .eq(k)\n      .click()\n      .should('have.class', 'clicked')\n  })\n\nSee this recipe and many others at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-06-18T16:14:05Z",
    "url": "https://youtu.be/CHpIu0HucKw"
  },
  {
    "videoId": "tUWZTHfUkNA",
    "title": "Select An Option By Partial Text Match",
    "description": "We can select an option by its partial text match (or a regular expression) using the cy.get + cy.contains command combination. From the found option, we can get its index among the siblings and then pass it to the cy.select command.\n\ncy.get('select option')\n  .contains('melon')\n  .invoke('index')\n  .then(function (index) {\n    cy.get('select').select(index)\n  })\n// confirm the selected value\ncy.get('select').should('have.value', '718')\n\nFind this recipe and many more examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-06-17T11:58:17Z",
    "url": "https://youtu.be/tUWZTHfUkNA"
  },
  {
    "videoId": "zPLr_YHZckU",
    "title": "Stub Window Open Method And Confirm The Call Arguments",
    "description": "We can prevent a second browser window from opening by stubbing the \"window.open\" method using the cy.stub command. Then we can click the button, which causes the application to call the \"window.open\" method. Now the method does not open a second browser window, but it does record the arguments of the call. We can then confirm the stub was called with exact arguments, or with Sinon matches\n\ncy.window().then(function (win) {\n  cy.stub(win, 'open').as('open')\n})\ncy.contains('button', 'Show help').click()\n// confirm the call arguments\ncy.get('@open').should('have.been.calledWith', '/help', '_blank')\n\nFind this example at https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html and my blog post for dealing with the second browser window at https://glebbahmutov.com/blog/cypress-second-tab/",
    "publishedAt": "2022-06-17T11:53:04Z",
    "url": "https://youtu.be/zPLr_YHZckU"
  },
  {
    "videoId": "HkXx79JE2nU",
    "title": "Use Stronger Assertions",
    "description": "You should also strive to write the strongest assertion possible in your Cypress tests. For example, when checking a phone number, it is not enough to confirm it is a string and length. You probably want to check its format, or even assert the exact expected value\n\n// the weakest assertion\ncy.get('.phone')\n  .invoke('text')\n  .should('be.a', 'string')\n  .and('have.length', 14)\n// a much stronger assertion\nconst phoneFormat = /^\\(\\d{3}\\) \\d{3}-\\d{4}$/\ncy.contains('.phone', phoneFormat)\n// the strongest is to confirm the exact value\ncy.get('.phone').should('have.text', '(123) 456-7890')\n\nYou can find more assertions at https://glebbahmutov.com/cypress-examples/commands/assertions.html",
    "publishedAt": "2022-06-15T19:55:00Z",
    "url": "https://youtu.be/HkXx79JE2nU"
  },
  {
    "videoId": "HAJXZ8Pr50E",
    "title": "Set Multiple Input Fields Inside A Form At Once",
    "description": "Here is a nifty trick: get from the document a form elements object and set multiple input values at once.\n\ncy.document()\n  .its('forms.personal-info.elements')\n  .then(function (elements) {\n    elements['first-name'].value = 'Joe'\n    elements['last-name'].value = 'Smith'\n    elements.city.value = 'Boston'\n  })\n\nFor more, see the \"Form recipes\" at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-06-15T15:05:59Z",
    "url": "https://youtu.be/HAJXZ8Pr50E"
  },
  {
    "videoId": "4nxrivWXYnM",
    "title": "Stub The Window Confirm Popups",
    "description": "This video teaches how to stub the \"confirm(...)\" popups to accept or cancel them from a Cypress test. We will use cy.stub command to reliably return true or false to the application code. Find this recipe and many more at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-06-15T11:57:11Z",
    "url": "https://youtu.be/4nxrivWXYnM"
  },
  {
    "videoId": "wGeoWxBq3P4",
    "title": "Compare Two Scores",
    "description": "If we need to compare two numbers on the page, we need to grab each element, get its text, then convert the text to a number, and then we can compare them. Tip: any time you get something from the application, you need to use cy.then(callback) to actually have the value. For more examples, see https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-06-14T11:48:29Z",
    "url": "https://youtu.be/wGeoWxBq3P4"
  },
  {
    "videoId": "butlgoP4SzI",
    "title": "Automatically Skip all.cy.js Utility Spec When Using cypress run In Cypress v10",
    "description": "If we create a spec to import and run all other specs in Cypress v10 (see video https://www.youtube.com/watch?v=z56rRoh0z_c) then we need to control skipping that spec using the environment variable CI=1 This video shows a better way\n\n1. Better: control the flag using a Cypress env parameter \"--env CI=1\" to skip it\n2. Best: check if we are inside the \"cypress run\" mode and skip the all.cy.js file\n\nThe final cypress.config.js is as follows:\n\nconst { defineConfig } = require('cypress')\n\n// cypress run\n// isInteractive: true,\n// isTextTerminal: true,\n// cypress open\n// isInteractive: true,\n// isTextTerminal: false,\n\nmodule.exports = defineConfig({\n  projectId: '1qsjjk',\n  e2e: {\n    baseUrl: 'http://localhost:3000',\n    setupNodeEvents(on, config) {\n      // implement node event listeners here\n      if (config.isTextTerminal) {\n        return {\n          excludeSpecPattern: ['cypress/e2e/all.cy.js'],\n        }\n      }\n    },\n  },\n\n  component: {\n    viewportHeight: 1000,\n    viewportWidth: 1000,\n    devServer: {\n      framework: 'create-react-app',\n      bundler: 'webpack',\n    },\n  },\n})\n\nFor more details, read the blog post https://glebbahmutov.com/blog/run-all-specs-cypress-v10/",
    "publishedAt": "2022-06-10T19:21:15Z",
    "url": "https://youtu.be/butlgoP4SzI"
  },
  {
    "videoId": "ovNH_UJK62s",
    "title": "Check Part Of The URL Using Chained Commands",
    "description": "In this video, I explain how to get just a part of the URL, split it into parts, and check the last part using a chain of commands. The final solution is simply:\ncy.location('pathname')\n  .should('include', '/item/')\n  // subject is a string \"...\"\n  .invoke('split', '/')\n  // subject is string[]\n  .should('not.be.empty')\n  // we can use Lodash _.last\n  // to yield the last element\n  .then(Cypress._.last)\n  // subject is a string\n  .should('equal', '470')\nFind more examples like this at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-06-10T15:12:01Z",
    "url": "https://youtu.be/ovNH_UJK62s"
  },
  {
    "videoId": "8HaNYv5KUxE",
    "title": "Use Cypress Have.Attr Assertion",
    "description": "The Cypress assertion \"have.attr\" behaves slightly differently from the other assertions. It changes the subject from the DOM element to the value of the attribute. This video shows how useful it could be - you can chain the assertions to check if the attribute is present, then chain assertions to check something about its value.\n\n// check the presence of an attribute\ncy.get('#my-link').should('have.attr', 'id')\n// check the attribute and its exact value\ncy.get('#my-link').should('have.attr', 'id', 'my-link')\n// check the presence of an attribute and\n// then validate the length of its value\n// the anchor title should be at least 5 characters\ncy.get('#my-link')\n  .should('have.attr', 'title')\n  .its('length')\n  .should('be.greaterThan', 5)\n\nFor more examples, see https://glebbahmutov.com/cypress-examples/commands/assertions.html",
    "publishedAt": "2022-06-07T22:32:18Z",
    "url": "https://youtu.be/8HaNYv5KUxE"
  },
  {
    "videoId": "z56rRoh0z_c",
    "title": "How To Run All Specs In Cypress v10",
    "description": "This video shows my workaround for running all or some specs in Cypress v10 (where the \"Run all\" button has been removed). Read more about this solution in the blog post https://glebbahmutov.com/blog/run-all-specs-cypress-v10/\n\nUpdate: I have improved this solution to automatically ignore the \"app.cy.js\" spec file when using the \"cypress run\" command, watch the video https://www.youtube.com/watch?v=butlgoP4SzI",
    "publishedAt": "2022-06-04T18:46:52Z",
    "url": "https://youtu.be/z56rRoh0z_c"
  },
  {
    "videoId": "rFhTejdPGAM",
    "title": "Stub cy.request Command Using cy.stub And Use cypress-recurse Example",
    "description": "In this video, we will use the https://github.com/bahmutov/cypress-recurse plugin to call the server using cy.request command until it responds with an object \"status: COMPLETE\". We simulate the server by stubbing the cy.request command using cy.stub command to return incomplete responses at first, and on the 3rd call to return the completed response. Find more cy.stub and cy.spy examples at https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html",
    "publishedAt": "2022-06-03T12:58:29Z",
    "url": "https://youtu.be/rFhTejdPGAM"
  },
  {
    "videoId": "E4Thn8FAcWI",
    "title": "Test The HTML Dialog Element Using Cypress",
    "description": "All modern browsers support the HTML Dialog element (see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog). In this video, I show a Cypress test that works with such dialog - it is a normal HTML markup after all. Find the full test and more Dialog test examples at https://glebbahmutov.com/cypress-examples\n\nThe test:\n\ncy.get('dialog')\n  .should('be.visible')\n  .and('have.attr', 'open', 'open')\n  .contains('button', 'OK')\n  .click()\ncy.get('dialog')\n  .should('not.be.visible')\n  .and('not.have.attr', 'open')\ncy.get('dialog').invoke('attr', 'open', 'open')",
    "publishedAt": "2022-06-01T13:05:44Z",
    "url": "https://youtu.be/E4Thn8FAcWI"
  },
  {
    "videoId": "r-fMXwHblKM",
    "title": "Select A Duplicate Option Using Its Index",
    "description": "If your \"select\" element has options with duplicate values, cy.select refuses to select them - because it is not sure which item you want. Luckily, we can still select an item by index. This video shows how to find the index by the value attribute and then cy.select(index) from a Cypress test. Find the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-05-31T18:40:32Z",
    "url": "https://youtu.be/r-fMXwHblKM"
  },
  {
    "videoId": "wRLODxdWyuw",
    "title": "Click Each Item Test Refactoring",
    "description": "In this example, we start with a test that is imperative and keeps track of the number of clicks by using a local variable. The test also uses jQuery methods to trigger click events. We refactor this test to:\n- work correctly as a human user (who cannot click on the disabled button)\n- click multiple buttons one after another without using cy.each + cy.click commands\n- be declarative and not use local variables\n\nFind the full example and lots more Cypress test examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-05-31T13:32:17Z",
    "url": "https://youtu.be/wRLODxdWyuw"
  },
  {
    "videoId": "MU08Air76bI",
    "title": "Find Duplicate Text Kiwi And Confirm The Rest Of Elements Are Unique",
    "description": "What if the list of elements has one duplicate value and the rest of the elements have unique text? We can confirm it using \"cy.get\" (but not the \"cy.contains\") command with \":contains\" selector. We can also invert the selection using \":not(:contains)\" combination.\n\ncy.get('li:contains(Kiwi)').should('have.length', 2)\ncy.get('li:not(:contains(Kiwi))')\n  .should('have.length', 4)\n  .then(function ($el) { return Cypress._.map($el, 'innerText') })\n  .then(function (values) {\n    const distinct = Cypress._.uniq(values)\n    expect(distinct).to.have.length(values.length)\n  })\n\nFind this and many more Cypress examples and recipes at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-05-30T14:30:12Z",
    "url": "https://youtu.be/MU08Air76bI"
  },
  {
    "videoId": "yMiJj8qRx1s",
    "title": "Get And Confirm Element's Own Text Without Children Elements",
    "description": "This video explains how to get an element from the page, and then extract the element's own text (without the text of its children's elements) before confirming it. Find the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-05-22T18:39:11Z",
    "url": "https://youtu.be/yMiJj8qRx1s"
  },
  {
    "videoId": "PvfCOn1lq9Y",
    "title": "Text File Download Example",
    "description": "A small Cypress example showing how to download and verify a text file. We also delete the \"cypress/downloads\" folder before each test using the plugins file code. See the code in the repo https://github.com/bahmutov/cypress-file-download-example and more Cypress file download examples in the recipe \"File Download\" in the repo https://github.com/cypress-io/cypress-example-recipes",
    "publishedAt": "2022-05-20T17:30:43Z",
    "url": "https://youtu.be/PvfCOn1lq9Y"
  },
  {
    "videoId": "OiL9zvd9xjc",
    "title": "Bonus Lesson 21: intercept and confirm navigator.sendBeacon calls",
    "description": "This is a bonus lesson from my \"Cypress Network Testing Exercises\" course https://cypress.tips/courses which shows spying on the application making \"navigator.sendBeacon\" calls to send small analytics events to the server. We confirm that the browser is sending plain text, converting it to a JSON object, and confirming it has the property \"fruit\". We then ensure that fruit is shown on the loaded page.\n\ncy.intercept('POST', '/got-fruit').as('beacon')\ncy.visit('/')\ncy.wait('@beacon')\n  .its('request.body')\n  .should('be.a', 'string')\n  .then(JSON.parse)\n  .should('have.property', 'fruit')\n  .then(function (fruit) {\n    cy.contains('#fruit', fruit)\n  })\n\nSee the \"navigator.sendBeacon\" docs at https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon and find an example application to test at https://github.com/bahmutov/fastify-example",
    "publishedAt": "2022-05-19T13:09:47Z",
    "url": "https://youtu.be/OiL9zvd9xjc"
  },
  {
    "videoId": "iXpIh6e5nA4",
    "title": "Cypress QRCode Example",
    "description": "This video teaches you how to use the \"@nuintun/qrcode\" NPM module to decode a Cypress PNG fixture file and confirm the text encoded in it. We load the fixture as base64 string, create an image \"src\" string and then pass to the qrcode module. It returns a promise that Cypress test waits for. The resolved value has data and other properties. We grab the \"data\" property and confirm the text inside. That is the text encoded in the QR image\n\nFind the full source code in the repo https://github.com/bahmutov/qrcode-example",
    "publishedAt": "2022-05-16T12:36:07Z",
    "url": "https://youtu.be/iXpIh6e5nA4"
  },
  {
    "videoId": "wJ3VyGEDHA0",
    "title": "Pass Data From One Spec To Another",
    "description": "Here is how you can pass data from one spec to another (caution: this approach makes the test execution dependent on the order of specs, which is an anti-pattern). You send it from the spec to the plugins file, where it is stored while the browser closes one spec and opens another.\n\nTip: for a better approach, use my https://github.com/bahmutov/cypress-data-session plugin",
    "publishedAt": "2022-05-15T15:18:51Z",
    "url": "https://youtu.be/wJ3VyGEDHA0"
  },
  {
    "videoId": "0sY1tp0aVNM",
    "title": "Get Multiple Values From The Page Via Aliases And Test Context Properties",
    "description": "What if you need to get the current values or text of multiple page elements? Do you get a pyramid of doom? No, it can be done very simply in several ways (see the recipe \"Get multiple fields\" from https://glebbahmutov.com/cypress-examples/ for all my solutions), but the simplest in my mind is to use Cypress cy.as aliases and extract the values from the test context object\n\nfunction getFormValues() {\n  cy.get('#fname').invoke('val').as('fname')\n  cy.get('#lname').invoke('val').as('lname')\n  return cy.then(function () {\n    return {\n      fname: this.fname,\n      lname: this.lname,\n    }\n  })\n}\n\ngetFormValues().should('deep.equal', {\n  fname: 'Joe',\n  lname: 'Smith',\n})\n\nFor more, see https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-05-13T14:37:20Z",
    "url": "https://youtu.be/0sY1tp0aVNM"
  },
  {
    "videoId": "5VJOpg09w2k",
    "title": "Correctly Using instanceof Assertion In Cypress Test",
    "description": "Cypress tests run in its own iframe with its own \"window\" object. It is a separate iframe and a different \"window\" object from the application; the application runs in its own iframe. Thus grabbing an element from the application and using \"instanceof HTMLDivElement\" will fail - it compares the element created using one window's HTMLDivElement with a different HTMLDivElement function.\n\ncy.get('#name').should(function ($el) {\n  // 🚨 INCORRECT, WILL FAIL, JUST A DEMO\n  expect($el[0], 'is element').to.be.instanceof(HTMLDivElement)\n})\n\nThis video explains the Cypress iframe setup, and how to solve the above test case: you need to use the \"app window.HTMLDivElement\" and you can grab the \"app window\" reference using the cy.window command\n\ncy.window().then(function (win) {\n  cy.get('#name').should(function ($el) {\n    // ✅ a DOM element retrieved from the application's window\n    // is an instance of that window's HTMLDivElement\n    expect($el[0], 'is element').to.be.instanceof(\n      win.HTMLDivElement,\n    )\n  })\n})\n\nSee the full instanceof recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-05-12T13:25:28Z",
    "url": "https://youtu.be/5VJOpg09w2k"
  },
  {
    "videoId": "O4ZBRoZCP-I",
    "title": "Validate Each Array Item",
    "description": "We can check each item in an array using cy.each command and assertions\n\ncy.wrap([1, 2, 3])\n  .should('be.an', 'array')\n  .each(function (x) {\n    expect(x).to.be.a('number').and.be.within(1, 3)\n  })\n\nThis example comes from https://glebbahmutov.com/cypress-examples/commands/assertions.html",
    "publishedAt": "2022-05-06T14:55:27Z",
    "url": "https://youtu.be/O4ZBRoZCP-I"
  },
  {
    "videoId": "XMJP07Ft1nA",
    "title": "Instant Application Login Via External Domain Using cy.session And cy.origin Commands",
    "description": "The most awaited Cypress feature is here in Cypress v9.6.0 - visiting multiple domains in the same test. This short video shows how I log in via 3rd party auth provider using the new cy.origin command. \n\nThe test goes one step beyond that - it uses cy.session command to instantly restore the session, including the 3rd party cookies. Thus every login after the 1st one skips visiting the external domain 🤯\n\nbeforeEach(function () {\n  cy.session('login', function () {\n    // start the login\n\n    cy.origin('2nd domain', function () {\n      // log in via UI\n    })\n\n    // back to the local courses page\n    cy.location('pathname').should('equal', '/courses')\n  })\n})\n\nit('logs in', function () {\n  cy.visit('/courses')\n  // we are logged in!\n})",
    "publishedAt": "2022-05-05T17:47:54Z",
    "url": "https://youtu.be/XMJP07Ft1nA"
  },
  {
    "videoId": "jdXeKtrwJ8A",
    "title": "A Quick Should Have Text Example With Multiline Text",
    "description": "In this short example, I show an example where cy.contains fails to match the text of the element due to newlines and multiple whitespace characters. Instead, we should (pun intended) use the Chai assertion should \"have.text\".\n\nFind the full recipe and many more short examples of Cypress commands at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-05-04T19:35:54Z",
    "url": "https://youtu.be/jdXeKtrwJ8A"
  },
  {
    "videoId": "sUHs2zLFjIM",
    "title": "Log In Using Words",
    "description": "This example comes from the blog post https://glebbahmutov.com/blog/login-words/ We collect the words shown on the page in the first part of the test. Then the application shows input elements for some words and we need to enter the correct word from the saved list.\n\nCollecting the shown words into an array:\nconst words = []\ncy.get('#show-words .words li')\n  .each(function ($li) {\n    words.push($li.text())\n  })\n\nPrinting the list of words (remember, you can use the information from the page only inside the cy.then callback)\nconst words = []\n// collect the words\n.then(function () {\n  cy.log(JSON.stringify(words))\n})\n\nType the words into the input element at that position\ncy.get('#login .words li').each(function ($li, k) {\n  const $input = $li.find('input')\n  if ($input.length) {\n    cy.wrap($input).type(words[k])\n  }\n})",
    "publishedAt": "2022-05-03T15:48:11Z",
    "url": "https://youtu.be/sUHs2zLFjIM"
  },
  {
    "videoId": "deNl1q1el0E",
    "title": "Query Elements With Retry-Ability To Avoid Flake",
    "description": "This example rewrites a flaky test to be less flaky. Instead of\n\ncy.get('#cart input') // query command\n  .eq(2) // query command\n  .clear() // action command\n  .type('20') // action command\n\nWe do the following\n\nconst selector = '#cart input:nth(2)'\ncy.get(selector) // query command\n  .clear() // action command\ncy.get(selector).should('have.value', '')\ncy.get(selector).type('20') // action command\ncy.get(selector).should('have.value', '20')\n\nThe new test follows the principles:\n- re-query the element from the page after big changes (like clearing it)\n- use a single complex selector like \"#cart input:nth(2)\" instead of separating \"cy.get(...).eq(...)\" commands\n- alternates commands and assertions to check if the application has finished processing the previous command\n\nFind this recipe at my https://glebbahmutov.com/cypress-examples/ and read the Cypress retry-ability guide at http://on.cypress.io/retry-ability",
    "publishedAt": "2022-05-02T13:12:59Z",
    "url": "https://youtu.be/deNl1q1el0E"
  },
  {
    "videoId": "Gxoo6uZMo9I",
    "title": "Filter Input Elements By Value Using cypress-should-really Plugin",
    "description": "This video teaches you how to find the input elements with the given value using https://github.com/bahmutov/cypress-should-really plugin. It builds up a \"should(callback)\" using small individual utility functions to modify and filter the data.\n\nimport { really, map, its, filter, isEqual } from \"cypress-should-really\"\n\ncy.get('#inputs input').should(\n  // [jqueryElement]\n  really(\n    map(its('value')), // [string]\n    filter(isEqual('fox')),\n    'have.length',\n    2,\n  ),\n)\n\nFor more, see the blog post https://glebbahmutov.com/blog/fp-cy-helpers/",
    "publishedAt": "2022-04-29T12:49:55Z",
    "url": "https://youtu.be/Gxoo6uZMo9I"
  },
  {
    "videoId": "IRsPdCHyBSk",
    "title": "Find Input Elements With The Given Value Using cy.filter Command",
    "description": "How do you find all input elements with the current value X? Not the declared attribute \"value=X\", but the current runtime value X? This video shows my trick: get all possible input elements, then filter them using cy.filter(callback) to inspect the current \"element.value\" property. \n\ncy.get('#inputs input')\n  .filter(function (k, el) {\n    return el.value === 'fox'\n  })\n  .should('have.length', 2)\n\nFind this recipe and many others at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-04-28T12:18:22Z",
    "url": "https://youtu.be/IRsPdCHyBSk"
  },
  {
    "videoId": "512p4E4fQAc",
    "title": "Hide The Entered Email In The Form",
    "description": "And confirm the form submission works by checking the intercepted network call. This test comes from https://glebbahmutov.com/cypress-examples and shows a few tricks for working with forms in Cypress:\n- using cy.within to limit the commands to the elements inside a form\n- changing the \"type\" attribute of the input element to hide the email\n- attaching dummy \"click\" event handlers from the test\n- stubbing the form submission and confirming the sent form fields\n\nFor more, check out the blog post \"Keep passwords secret in E2E tests\" https://glebbahmutov.com/blog/keep-passwords-secret-in-e2e-tests",
    "publishedAt": "2022-04-27T15:34:39Z",
    "url": "https://youtu.be/512p4E4fQAc"
  },
  {
    "videoId": "2LdVcnYAE7Q",
    "title": "The cy.its Command Examples With Retries And Without",
    "description": "The cy.its command will retry checking the given property or path in the subject until it times out or the property exists. This video shows when you should use the \"timeout: 0\" option to disable the retries - when the subject can never change. For example, the subject yielded by the cy.request command will never change, thus we can disable the retries using the \"timeout: 0\" option to fail the test faster.\n\nThe test code (find the full source code at https://glebbahmutov.com/cypress-examples)\n\n// the following chain of commands checks the \"window\" object\n// again and again until the application sets the property \"appCustomField\"\n// The value of the property is yielded to the assertion\ncy.window().its('appCustomField').should('equal', 42)\n// tip: alternative solution using a single assertion\n// (which cannot have nested paths compared to the cy.its command)\ncy.window().should(\n  'have.property',\n  'appCustomField',\n  42,\n  'property added',\n)\n\n// We can avoid unnecessary retries when getting the property\n// using the \"timeout: 0\" option\ncy.request('https://jsonplaceholder.cypress.io/users/1')\n  .its('body', { timeout: 0 })\n  .should('include.keys', 'id', 'name', 'email')",
    "publishedAt": "2022-04-25T17:48:55Z",
    "url": "https://youtu.be/2LdVcnYAE7Q"
  },
  {
    "videoId": "RyHSIk7nzD0",
    "title": "Find Text Item Without Flake Using cy.contains Command",
    "description": "This example comes from https://glebbahmutov.com/cypress-examples recipes. Imagine you need to find an item on the page with the given text. You can do it in several ways. This video shows a robust way, that retries the search. Even if the list is dynamic, the test will succeed because the cy.contains(selector, text) command retries finding the element. If you need to find several items, call cy.contains several times. Here is the final test code, and it could not be simpler.\n\nconst items = ['three', 'four', 'one']\nitems.forEach(function (item) {\n  cy.contains('#list li', item)\n})",
    "publishedAt": "2022-04-25T13:35:56Z",
    "url": "https://youtu.be/RyHSIk7nzD0"
  },
  {
    "videoId": "yE20OuYTcGo",
    "title": "Compare Numbers Using closeTo Assertion",
    "description": "If you have an imprecise number to check, the assertion \"closeTo(expected, precision)\" is your friend. In this video, I show how to use it to confirm the font size of an element to be 16 pixels +/- 1 pixel.\n\ncy.get('#font-size-example')\n  .invoke('css', 'fontSize')\n  .then(cy.log)\n  // the font size returned is in pixels, like \"16px\"\n  .should('match', /^\\d+px$/)\n  .invoke('replace', 'px', '')\n  .then(Number)\n  .should('be.closeTo', 16, 1)\n\nFind these examples and more at https://glebbahmutov.com/cypress-examples/commands/assertions.html",
    "publishedAt": "2022-04-20T21:10:49Z",
    "url": "https://youtu.be/yE20OuYTcGo"
  },
  {
    "videoId": "XLgwQsSa9PM",
    "title": "Check Visible Elements In The Current Viewport",
    "description": "This video shows how to wait for the loading elements in the current viewport to go away. We will use the current window and the element's bounding rectangle to check if the element is invisible. \n\nFind the source code in the repo https://github.com/bahmutov/loading-elements and read the blog post https://glebbahmutov.com/blog/visible-in-the-viewport/",
    "publishedAt": "2022-04-14T14:27:50Z",
    "url": "https://youtu.be/XLgwQsSa9PM"
  },
  {
    "videoId": "AO9iPIg9yKk",
    "title": "Use cy.filter For Complex Element Filtering",
    "description": "If you need to select elements on the page using some kind of complex logic, like \"find all elements with class X or having the text Y\", then the cy.filter is your solution. It allows one to use a predicate callback function that gets each DOM element and can return \"true\" or \"false\" to select it. In this example from https://glebbahmutov.com/cypress-examples we filter elements by class and by text. Let's find all list items with the text \"cat\" or class \"pet\".\n\ncy.get('#animals li')\n  .should('have.length', 5)\n  .filter(function (k, el) {\n    return (\n      el.classList.contains('pet') ||\n      el.innerText.includes('cat')\n    )\n  })\n  .should('have.length', 4)",
    "publishedAt": "2022-04-13T14:38:04Z",
    "url": "https://youtu.be/AO9iPIg9yKk"
  },
  {
    "videoId": "WUQpyB-oquE",
    "title": "Select Elements By Computed Style",
    "description": "How do you select elements by the run-time color? For example, how do you select anchor links that are red? An element can be red because a class was applied, or an inline style, or it could be made red using JavaScript. To help you, the cy.filter https://on.cypress.io/filter command allows using a callback function that can grab the computed style of an element and return true if the current runtime color of an element is red.\n\ncy.get('a').filter(function (k, el) {\n  const color = window.getComputedStyle(el).color\n  return color === 'rgb(255, 0, 0)'\n})\n\nFind this example among the recipes at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-04-12T13:00:27Z",
    "url": "https://youtu.be/WUQpyB-oquE"
  },
  {
    "videoId": "h71mYvrsKWo",
    "title": "Disable CSS Animations",
    "description": "This video shows how we can \"speed up\" CSS Animations by injecting a piece of CSS into the body of the page. This piece of code overrides all app-defined transitions, effectively removing them. For more information, read the blog post \"How Cypress Freezes CSS Animations And You Can Too\" https://glebbahmutov.com/blog/css-animations/ and find the source code in the repo https://github.com/bahmutov/css-animation-cypress-example",
    "publishedAt": "2022-03-31T18:24:17Z",
    "url": "https://youtu.be/h71mYvrsKWo"
  },
  {
    "videoId": "KHJkRp_rRYg",
    "title": "cypress-recurse: Reload The Page Until We See 7 Plus Check The Numbers Before That",
    "description": "This is an introduction to the \"reduce\" feature of cypress-recurse plugin https://github.com/bahmutov/cypress-recurse In this example, we reload the page until we see the number 7. We want to check if any of the previous numbers randomly shown are NOT 7 after we stop. We can accumulate all values we see while iterating using Cypress commands. Then we can grab the reduced value with all the numbers and run assertions against it. \n\nrecurse(\n  function () {\n    return cy.get('#result').invoke('text').then(parseInt)\n  },\n  function (n) {\n    return n === 7\n  },\n  {\n    limit: 60,\n    delay: 1000, // sleep for 1 second before reloading the page\n    timeout: 60_000, // try up to one minute\n    log: false,\n    reduceFrom: [],\n    reduce(numbers, n) {\n      numbers.push(n)\n    },\n    post () {\n      cy.reload()\n    },\n    yield: 'reduced',\n  },\n).then(function (numbers) {\n  expect(numbers).to.not.include(7)\n})",
    "publishedAt": "2022-03-25T11:39:01Z",
    "url": "https://youtu.be/KHJkRp_rRYg"
  },
  {
    "videoId": "u2JUQY2TE3A",
    "title": "cypress-recurse: Click On The Button Until It Becomes Disabled",
    "description": "Another https://github.com/bahmutov/cypress-recurse example: in a paginated table we need to go to the last page. We know we reached the last page when the \"Next\" button gets the attribute \"disabled\" We can check if an element has this attribute by using the jQuery attr() method call.\n\nrecurse(\n  function () { \n    return cy.get('[value=next]') \n  },\n  function ($button) {\n    return $button.attr('disabled') === 'disabled'\n  },\n  {\n    log: false,\n    limit: 10,\n    timeout: 20_000,\n    delay: 500,\n    post() {\n      cy.get('[value=next]').click()\n    },\n  },\n)\n\nSee the pagination-spec.js",
    "publishedAt": "2022-03-24T14:37:31Z",
    "url": "https://youtu.be/u2JUQY2TE3A"
  },
  {
    "videoId": "xlc6yQLAqNg",
    "title": "Implement Todo Item Toggle Using Cypress Test-Driven-Development",
    "description": "This video shows the full feature implementation while writing and running API and End-to-End Cypress tests. We implement toggling the todo items in a TodoMVC application (find its source code at https://github.com/bahmutov/cypress-workshop-basics). We first confirm the backend end supports the REST API calls to complete a todo, then we write E2E tests to make sure the web application is calling the backend correctly. Since the feature is missing in the web client, the E2E test fails and we implement it to make the test pass.\n\nRead the blog post \"Cypress Test-Driven Development Example\" https://glebbahmutov.com/blog/cypress-tdd/\n\nThe video teaches you how to perform:\n- API tests using Cypress\n- combine API steps with the user interface steps\n- inspect the inner data in the application to confirm the page UI correctly updates its state\n- spy on the network calls to ensure the expected calls are made to update the app\n\n00:00 The problem - the application does not save \"Completed\" todos\n01:28 Decide which tests to write\n03:05 Write an API test to confirm the backend updates an item\n06:15 Test the UI to Vuex data store update\n09:51 Confirm the application is making REST call to complete the todo\n14:00 The final green end-to-end test",
    "publishedAt": "2022-03-19T18:51:38Z",
    "url": "https://youtu.be/xlc6yQLAqNg"
  },
  {
    "videoId": "OWTrczUUVpA",
    "title": "Write An API Test Using Cypress",
    "description": "In this video, I write a simple CREATE + GET + DELETE an item API test using Cypress. I will use cy.request command to make HTTP calls, get the new item's ID back and then delete that item.\n\n// reset the backend data using POST /request call\n// https://on.cypress.io/request\ncy.request('POST', '/reset', { todos: [] })\n// add an item using POST /todos call\n// passing the title and the completed: false properties\ncy.request('POST', '/todos', \n  { title: 'write more tests', completed: false })\n  // from the response get the body and confirm\n  // it has the expected properties, including the \"id\"\n  .its('body')\n  .should('have.keys', ['id', 'title', 'completed'])\n  // get the \"id\" property and confirm it is a number\n  .its('id')\n  // TIP: add a short wait for our simple server to\n  // really save the added item\n  .wait(100, { log: false })\n  .then(cy.log)\n  .then(function (id) {\n    expect(id).to.be.a('number')\n    cy.request('GET', `/todos/${id}`)\n      .its('body.title')\n      .should('eq', 'write more tests')\n    // and then use the DELETE /todos/:id call to delete it\n    // the status of the response should be 200\n    cy.request('DELETE', `/todos/${id}`)\n      .its('status').should('equal', 200)\n  })\n\nThe above example comes from https://github.com/bahmutov/cypress-workshop-basics For more, see the plugin https://github.com/bahmutov/cy-api",
    "publishedAt": "2022-03-19T17:59:10Z",
    "url": "https://youtu.be/OWTrczUUVpA"
  },
  {
    "videoId": "M43XVZrZRtU",
    "title": "Confirm The Total Sum Shown Under The Table Of Prices",
    "description": "In this example, we are going to do a lot of text parsing to get the prices and the totals and confirm the displayed total is correct. Find the full example in the recipes at https://glebbahmutov.com/cypress-examples\n\nWe need to grab the prices from the 4 column of the table, sum the up, then confirm the value show under the table is correct\n\ncy.get('table#sales tbody td:nth-child(4)')\n  .then(function ($cells) {\n    const totals = $cells\n      .toArray()\n      .map(function (el) {\n        return el.innerText\n      })\n      .map(function (s) {\n        return s.replace('$', '')\n      })\n      .map(parseFloat)\n    const sum = Cypress._.sum(totals)\n    cy.log(`Total should be ${sum}`)\n    cy.contains('#total', '$' + sum)\n  })\n\nRelated video: \"Check The Prices Table Rows\" https://youtu.be/DxlqDA7tIOw",
    "publishedAt": "2022-03-18T16:37:04Z",
    "url": "https://youtu.be/M43XVZrZRtU"
  },
  {
    "videoId": "rMviL8RiGEk",
    "title": "Check The List Of Zip Codes",
    "description": "This video shows an application that \"validates\" a list of zip codes. The application takes the zip code one by one and returns a status if the application delivers to that zip area. Our test needs to check a list of zip codes, and to fill two lists: supported and unsupported zip codes, and then verify the two lists.\n\nWe iterate over the data, entering the zip code one by one, then waiting for the application to give us an answer. We store the zip codes and then compare the results with the computed lists. This fun little exercise comes from the recipes in https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-03-17T13:50:06Z",
    "url": "https://youtu.be/rMviL8RiGEk"
  },
  {
    "videoId": "8LcTNeILQtQ",
    "title": "Overwrite The cy.each Command",
    "description": "In this video, I overwrite the standard cy.each command. Instead we will use the \"each\" function from cypress-recurse plugin to allow us to iterate until the predicate function returns true\n\n// https://github.com/bahmutov/cypress-recurse\nimport { each } from 'cypress-recurse'\n\nCypress.Commands.overwrite(\n  'each',\n  function (originalFn, items, itemCallback, stopPredicate) {\n    return each(itemCallback, stopPredicate)(items)\n  },\n)\n\nFind the full test in https://github.com/bahmutov/better-cypress-each-example and read the blog post https://glebbahmutov.com/blog/better-cy-each/",
    "publishedAt": "2022-03-15T21:36:41Z",
    "url": "https://youtu.be/8LcTNeILQtQ"
  },
  {
    "videoId": "a-LErnTG1lU",
    "title": "Use each Function From cypress-recurse Plugin To Iterate And Stop",
    "description": "This video shows how to use \"each\" function from the https://github.com/bahmutov/cypress-recurse plugin to iterate over the elements and stop when we see the number 7. It is simpler than using the standard cy.each command.\n\n// https://github.com/bahmutov/cypress-recurse\nimport { each } from 'cypress-recurse'\n\nit('stops when it sees 7 using each from cypress-recurse', function () {\n  cy.visit('index.html')\n\n  cy.get('tbody button').then(\n    each(\n      function ($button) {\n        return cy\n          .wrap($button)\n          .click()\n          .parent()\n          .parent()\n          .contains('td', /\\d/)\n          .invoke('text')\n          .then(Number)\n      },\n      function (n) {\n        return n === 7\n      }\n    ),\n  )\n})\n\nFind this test in https://github.com/bahmutov/better-cypress-each-example repository and read the blog post https://glebbahmutov.com/blog/better-cy-each/",
    "publishedAt": "2022-03-15T17:23:59Z",
    "url": "https://youtu.be/a-LErnTG1lU"
  },
  {
    "videoId": "DyPr8Dq9D58",
    "title": "Cy.each Yields The Original Subject",
    "description": "The cy.each command https://on.cypress.io/each yields the original subject unchanged, even if you stop the iteration early, or return different values.\n\nconst fruits = ['apples', 'bananas', 'oranges', 'pears']\ncy.wrap(fruits)\n  .each(function (fruit, k) {\n    console.log(k, fruit)\n    if (k === 2) {\n      return false\n    }\n    cy.log('fruit', fruit)\n  })\n  // cy.each yields the original subject\n  // even if you stop the iteration early\n  .should('equal', fruits)\n\nFind this example at https://github.com/bahmutov/better-cypress-each-example and read the blog post https://glebbahmutov.com/blog/better-cy-each/",
    "publishedAt": "2022-03-15T15:30:28Z",
    "url": "https://youtu.be/DyPr8Dq9D58"
  },
  {
    "videoId": "G4xs9_cAm2c",
    "title": "Stop cy.each Iteration When Using Cypress Commands Inside The Callback Function",
    "description": "If the cy.each callback uses Cypress commands and we want to stop the iteration based on the output of those commands, we need to use cy.then + a local closure variable to stop queueing up Cypress commands. The final solution from https://github.com/bahmutov/better-cypress-each-example is this:\n\ncy.visit('index.html')\nlet shouldStop = false\ncy.get('tbody button').each(function ($button, k) {\n  cy.then(function () {\n    if (shouldStop) {\n      return\n    }\n    console.log('button', k)\n    cy.wrap($button)\n      .click()\n      .parent()\n      .parent()\n      .contains('td', /\\d/)\n      .invoke('text')\n      .then(Number)\n      .then(function (n) {\n        if (n === 7) {\n          shouldStop = true\n        }\n      })\n  })\n})\n\nTip: to visualize the Cypress command chain this video uses https://github.com/bahmutov/cypress-command-chain plugin and read the blog post https://glebbahmutov.com/blog/better-cy-each/",
    "publishedAt": "2022-03-15T14:53:19Z",
    "url": "https://youtu.be/G4xs9_cAm2c"
  },
  {
    "videoId": "lhb5Lt9RwE4",
    "title": "How To Stop cy.each Iterations For Simple Cases",
    "description": "If the cy.each callback is synchronous, it can return \"false\" value to stop the iteration.\n\nit('cy.each stops iteration when returning false', function () {\n  const fruits = ['apples', 'bananas', 'oranges', 'pears']\n  cy.wrap(fruits).each(function (fruit, k) {\n    console.log(k, fruit)\n    if (k === 2) {\n      return false\n    }\n    cy.log('fruit', fruit)\n  })\n})\n// prints \"apples\" and \"bananas\"\n\nFind this example at https://github.com/bahmutov/better-cypress-each-example and read the blog post https://glebbahmutov.com/blog/better-cy-each/",
    "publishedAt": "2022-03-15T14:50:07Z",
    "url": "https://youtu.be/lhb5Lt9RwE4"
  },
  {
    "videoId": "M0RxEeJaq_E",
    "title": "Iterate Over Table Rows And Click A Button In Each Row Using cy.each Command",
    "description": "This video introduces the cy.each command and shows how to iterate over multiple elements, and perform Cypress commands for each element. Find the full source code in https://github.com/bahmutov/better-cypress-each-example (spec01.js and spec02.js)\n\nit('clicks every button', function () {\n  cy.visit('index.html')\n  cy.get('tbody button').each(function ($button) {\n    cy.wrap($button)\n      .click()\n      .parent()\n      .parent()\n      .contains('td', /\\d/)\n      .invoke('text')\n      .then(cy.log)\n  })\n})\n\nRead the blog post https://glebbahmutov.com/blog/better-cy-each/",
    "publishedAt": "2022-03-15T13:27:09Z",
    "url": "https://youtu.be/M0RxEeJaq_E"
  },
  {
    "videoId": "FTjWAeCWpHQ",
    "title": "Using Should Match Assertion Against Elements Or Text",
    "description": "If you use Cypress \".should('match', ...)\" assertion, its behavior depends on what the current subject is. If the current subject is a jQuery object, then the match assertion uses the jQuery https://api.jquery.com/is/ method to check if the element matches the given text selector. If the current subject is a string, the match assertion checks if that string matches the given regular expression. This video shows both variants in action.\n\n// check if the element matches the complex jQuery selector\ncy.get('#one').should(\n  'match',\n  '#one.btn-large.btn:contains(\"First\")',\n)\n// checks if the text of the element matches the regular expression\ncy.get('#fruit')\n  .invoke('text')\n  .should('match', /(orange|apple)/i)\n\nFind this and many other examples at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-03-15T12:29:58Z",
    "url": "https://youtu.be/FTjWAeCWpHQ"
  },
  {
    "videoId": "h8NfDFsgdW4",
    "title": "Randomly Pick Two Checkboxes Out Of Four And Click On Them",
    "description": "This example starts with four clear checkboxes, picks random two, and then clicks on them. Then it verifies that two checkboxes are checked. \n\ncy.get('#checkboxes input[type=checkbox]')\n  .should('be.visible')\n  .and('have.length', 4)\n  .then(function ($items) {\n    return Cypress._.sampleSize($items.toArray(), 2)\n  })\n  .should('have.length', 2)\n  .click({ multiple: true })\ncy.get('#checkboxes input[type=checkbox]:checked').should(\n  'have.length',\n  2,\n)\n\nFind this example and more at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-03-14T16:05:02Z",
    "url": "https://youtu.be/h8NfDFsgdW4"
  },
  {
    "videoId": "G-4HbUuUqIM",
    "title": "Use cypress-recurse To Click The Back Button Until It No Longer Exists",
    "description": "In this example, I show how to grab the Back button, and click on it. We repeat the same commands until we get to the very first page where the button no longer exists. We will use https://github.com/bahmutov/cypress-recurse plugin to iterate without any boilerplate code",
    "publishedAt": "2022-03-11T14:34:56Z",
    "url": "https://youtu.be/G-4HbUuUqIM"
  },
  {
    "videoId": "8rtBk9MBjXA",
    "title": "Use cypress-recurse To Ping The Site Before Visiting It",
    "description": "In this video, I show 3 ways of checking if the server is responding before loading it using the cy.visit command. \n\n- write your own recurse function that uses \"fetch('/')\" to check if the server is responding\n- overwrite the cy.visit command to check the site first by pinging it\n- use cypress-recurse plugin to remove the boilerplate code of recursively calling the pinging function\n\nFind the full source code in the branch \"recursive\" of the repo https://github.com/bahmutov/live-example/tree/recursive/cypress/integration\n\nFind the cypress-recurse plugin at https://github.com/bahmutov/cypress-recurse",
    "publishedAt": "2022-03-11T13:38:17Z",
    "url": "https://youtu.be/8rtBk9MBjXA"
  },
  {
    "videoId": "8Gvwsch1bao",
    "title": "Implement A Test That Finds A Particular Slide In A Carousel",
    "description": "This test shows how to check if an element is visible, and if not, click on the \"Next\" button in the carousel. The test keeps clicking and checking until the desired slide becomes visible. Then the test clicks on the slide and checks the destination URL\n\nThe full test is below\n\nit('finds the right slide', function () {\n  cy.visit('/')\n  cy.contains('section', '20+ Courses video library FREE ACCESS')\n    .should('be.visible')\n    .scrollIntoView()\n    .next()\n    .within(function () {\n      function getNextSlide() {\n        cy.contains('.swiper-slide', 'with 7 live projects').then(\n          function (el) {\n            if (Cypress.dom.isVisible(el)) {\n              cy.log('Found it!')\n              cy.wrap(el).contains('Get Started').click()\n            } else {\n              cy.wait(1000)\n              cy.get('.swiper-button-next').click().then(getNextSlide)\n            }\n          },\n        )\n      }\n      getNextSlide()\n    })\n  cy.url().should(\n    'equal',\n    'https://www.selenium-tutorial.com/p/automation-architect-in-selenium-7-live-projects',\n  )\n})\n\nFor more, see https://glebbahmutov.com/cypress-examples/ and subscribe to https://cypresstips.substack.com/",
    "publishedAt": "2022-03-09T17:28:19Z",
    "url": "https://youtu.be/8Gvwsch1bao"
  },
  {
    "videoId": "_vqOtLIGI9o",
    "title": "Iterate Through Pages And Count Rows Using Recursion",
    "description": "In this example, I have to iterate through pages until the \"Next\" button is disabled. On every page, I grab the number of visible table rows, adding them all up. After we get to the last page and the \"Next\" button is disabled, we wrap the total rows count and use an alias to save the final value. Later, we will get the value using the alias and confirm it is equal to the expected number. Find the source code and more examples like this one at https://github.com/bahmutov/cypress-recurse",
    "publishedAt": "2022-03-07T13:40:30Z",
    "url": "https://youtu.be/_vqOtLIGI9o"
  },
  {
    "videoId": "o9zsDXl97L8",
    "title": "Detect Duplicate Attributes Using Lodash Functions And Should Callback",
    "description": "Imagine we have several elements, and each has a data attribute. Can we confirm there are no duplicate data attributes in the list? Yes, using a \"should(callback)\" function that uses the convenient Lodash functions to extract and process the attributes.\n\nconst { map, countBy, pickBy } = Cypress._\ncy.get('li').should(function ($li) {\n  const ids = map($li, function ($el) {\n    return $el.getAttribute('data-product-id')\n  })\n  const counts = countBy(ids)\n  const duplicates = pickBy(counts, n is larger than 1)\n  expect(duplicates).to.be.empty\n})\n\nFind this recipe and more examples at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-03-04T18:57:36Z",
    "url": "https://youtu.be/o9zsDXl97L8"
  },
  {
    "videoId": "51WPx7gvbAU",
    "title": "Confirm Total Sum Using Data Attributes And Automatic Waiting",
    "description": "In this example (taken from https://glebbahmutov.com/cypress-examples/) I how to sum up multiple data attributes, and then correctly print the value to the Command Log. We then wait for another element to have its data attribute set (we use built-in Cypress retries) and confirm the sum of item prices is equal to the total computed by the application.",
    "publishedAt": "2022-03-03T16:31:03Z",
    "url": "https://youtu.be/51WPx7gvbAU"
  },
  {
    "videoId": "BuSBVc3d99Y",
    "title": "Increase Chai Truncate Threshold To Show More Information",
    "description": "In this tip, I show how to fully show arrays when comparing them in Cypress. Since Cypress uses Chai assertions under the hood, you can apply a setting to increase the error message truncate limit, and longer arrays will be shown without shortening them into \"[ Array ]\" strings\n\nchai.config.truncateThreshold = 200\nconst fruits = ['Apples', 'Oranges', 'Pears', 'Kiwi']\ncy.wrap(fruits).should('deep.equal', [\n  'Oranges',\n  'Grapefruits',\n  'Plums',\n  'Grapes',\n])\n\nThanks to https://www.linkedin.com/posts/gurudatt-s-a-5b892224_cypress-cypressio-testautomation-activity-6903244451108519936-4klR for this tip\n\nFind this example at http://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-03-02T16:33:21Z",
    "url": "https://youtu.be/BuSBVc3d99Y"
  },
  {
    "videoId": "wAjhXohhYjc",
    "title": "Fight The Element Detached From DOM Error Using jQuery Click",
    "description": "Sometimes all standard ways to fight the test flake and the \"Element detached from DOM\" error are not solving the problem. In this case, the application removes the button while the test is trying to click on it, causing an error. To solve this, we can use jQuery \"click()\" method instead of cy.click() command. The jQuery method does not have the checks built into the Cypress command (is the button actionable, visible, etc), thus it clicks and the attached handler executes.\n\ncy.get('#jquery-click #a-button')\n  .wait(1000)\n  .then(function ($button) {\n    $button.click()\n  })\n\nFind this example and others at http://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-03-01T13:33:54Z",
    "url": "https://youtu.be/wAjhXohhYjc"
  },
  {
    "videoId": "R79ai463xIM",
    "title": "Check If An Image Loads",
    "description": "You can verify that an image on the page truly loads by checking its property \"naturalWidth\". If the image does not load, that property stays at zero. If the image loads in the browser correctly, then this property will have a value from the image (number of columns). Find this example and many more recipes at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-02-28T21:08:29Z",
    "url": "https://youtu.be/R79ai463xIM"
  },
  {
    "videoId": "HXe5tdaTfMM",
    "title": "A Quick Cypress Unit Test For Universal JavaScript Code",
    "description": "If you are writing end-to-end Cypress tests, you can quickly unit test any JavaScript code that can run in the browser. In this video, I am testing a function parsing a line of text by creating a few unit tests to be executed in the browser.\n\nFind this example code in https://github.com/bahmutov/grep-tests-from-pull-requests repo and read the blog post https://glebbahmutov.com/blog/universal-code-test/",
    "publishedAt": "2022-02-28T18:55:34Z",
    "url": "https://youtu.be/HXe5tdaTfMM"
  },
  {
    "videoId": "K5x2oXWsWqI",
    "title": "Cypress Command Chain Plugin Introduction",
    "description": "Cypress queues every command into a single chain of commands to be executed. This sometimes confuses people new to Cypress; what commands are in the queue? What are their arguments? Why does cy.log print an undefined value? In this video, I introduce the https://github.com/bahmutov/cypress-command-chain - a tiny module that adds to the Cypress Command Log the \"Command Queue\" list. It shows all queued-up commands with their arguments, making it clear which test commands have finished, and which ones are still about to run. \n\nThe approach has been described in the blog post https://glebbahmutov.com/blog/visualize-cypress-command-queue/\n\nTake a look at my presentation https://slides.com/bahmutov/reactive-conf for more information about Cypress command queue and how it is different from the other test runners.",
    "publishedAt": "2022-02-26T19:38:30Z",
    "url": "https://youtu.be/K5x2oXWsWqI"
  },
  {
    "videoId": "4jx7YQ48gQc",
    "title": "Do Not Use cy Commands Inside A Should Callback Function",
    "description": "The following test is incorrect: it uses cy.contains command inside a callback function passes to the \"should(cb)\". It will time out\n\nfunction checkFruit(fruit) {\n  cy.contains('#fruit', fruit)\n}\ncy.wait('@fruit')\n  .its('response.body.fruit')\n  .should(checkFruit)\n\nThe \"should(cb)\" will run potentially multiple times, retrying the given value. Each time it tries to schedule the cy.contains command, leading to unpredictable chain of commands. The right way is to first assert the value (if necessary) and then call the \"checkFruit\" function just once using cy.then instead of cy.should\n\ncy.wait('@fruit')\n  .its('response.body.fruit')\n  .should('be.a', 'string')\n  .then(checkFruit)\n\nFor more, read the blog post \"Cypress Should Callback\" https://glebbahmutov.com/blog/cypress-should-callback/",
    "publishedAt": "2022-02-25T18:10:06Z",
    "url": "https://youtu.be/4jx7YQ48gQc"
  },
  {
    "videoId": "gd7Zx93VxOo",
    "title": "Wait For The Page And Elements To Fully Render Before Interacting To Avoid Detached From DOM Error",
    "description": "This video shows how I wait for the page to fully load by observing the new elements that appear during the tests, and the Ajax calls the application is making. My goal is to only work with the page after it has finished loading and re-rendering (otherwise I might get a dreaded \"Element detached from DOM\" Cypress error). In this case, when testing a Shopware site, the charts were loaded at the start, and the menu items were getting their labels from the server using an Ajax call. If the test does not \"wait\" for the labels, it might try to click the menu item. If the Ajax call returns and the application re-renders the menu item element, Cypress might fail to click the menu properly. Here is my more robust test:\n\n// make sure the application has finished loading its charts\ncy.get('.sw-chart').should('have.length.gte', 2)\ncy.get('.sw-admin-menu__item--sw-order').click()\n// the menu item will request the label \"Overview\" from the server\n// let's wait for that menu to appear before clicking the menu item\ncy.contains('.navigation-list-item__sw-order-index', 'Overview').click()\n// verify we end up on the right page after the menu click\ncy.location('hash').should('include', '/sw/order/index')\n\nFor more information, see video https://youtu.be/CMOjrKoBBwc",
    "publishedAt": "2022-02-24T17:50:25Z",
    "url": "https://youtu.be/gd7Zx93VxOo"
  },
  {
    "videoId": "o6hRLV6a9Hc",
    "title": "Check Input Element Trimming Spaces From The Entered Values",
    "description": "A simple Cypress test can confirm our application trims the leading and trailing spaces. \n\ncy.get('#name').type('   Joe  ')\ncy.get('#name').should('have.value', 'Joe')\n\nFor this and many more test examples, check out https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-02-21T20:11:52Z",
    "url": "https://youtu.be/o6hRLV6a9Hc"
  },
  {
    "videoId": "_b6Mf8xI5bA",
    "title": "Find Elements With Specific Child Elements Using Cypress jQuery :has Selector",
    "description": "Let's find the LI elements but only the ones that have a child element with class \"label\" or class \"warning\". You can use cy.get and jQuery selector \":has\" to do it:\n\ncy.get('li:has(.label, .warning)').should('have.length', 3)\n\nThis example comes from https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-02-21T17:09:13Z",
    "url": "https://youtu.be/_b6Mf8xI5bA"
  },
  {
    "videoId": "uzAbSwAlX7Q",
    "title": "Write E2E Tests Using Cypress And Run Them On GitHub Actions",
    "description": "Can you clone someone's web application, write end-to-end tests, and then execute them on CI, all in 10 minutes of total time? This video teaches you how to do this using my favorite tools:\n- Cypress test runner https://www.cypress.io/\n- GitHub Actions using my reusable workflow https://github.com/bahmutov/cypress-workflows\nTip: I even set up Prettier and explain how to use the start-server-and-test utility to work with the app and the tests locally.\nFind the full app and its tests in the https://github.com/bahmutov/todo-react-redux repo",
    "publishedAt": "2022-02-18T21:25:09Z",
    "url": "https://youtu.be/uzAbSwAlX7Q"
  },
  {
    "videoId": "0iXISW0owWM",
    "title": "Labels For Checkboxes",
    "description": "In this video, I get all the checked checkboxes from the page. For each checked checkbox, I find the label and store its text in an array. Then I confirm the labels list to the expected values. This is a good each of complex querying of the page that you might need to do in order to collect the data to be asserted.\n\nconst labels = []\ncy.get('input[type=checkbox]')\n  .should('have.length', 4)\n  .filter(':checked')\n  .each(function ($checkbox) {\n    const id = $checkbox.attr('id')\n    cy.get(`label[for=\"${id}\"]`)\n      .invoke('text')\n      .then(function (s) {\n        labels.push(s)\n      })\n  })\ncy.wrap(labels).should('deep.equal', [\n  'I ❤️ apples',\n  'I ❤️ grapes',\n])\n\nFind the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-02-17T15:03:33Z",
    "url": "https://youtu.be/0iXISW0owWM"
  },
  {
    "videoId": "liFRu0Fu-Gs",
    "title": "Querying SVG From A Cypress Test",
    "description": "SVG elements are normal DOM elements in the browser, thus Cypress commands can query and check them. In this example, I show how to query an SVG element, check its attributes, and even change the \"fill\" attribute to make the element red. Find the full example at https://glebbahmutov.com/cypress-examples\n\n// get the SVG element, just like any DOM element\ncy.get('svg')\n  .should('have.attr', 'width', '90')\n  .and('have.attr', 'height', '90')\n  // yields the original element\n  .find('path')\n  .first()\n  .invoke('attr', 'fill', 'red')\n\nNote: the assertions \"have.attr\" with name and value arguments yield the original element.",
    "publishedAt": "2022-02-17T14:29:18Z",
    "url": "https://youtu.be/liFRu0Fu-Gs"
  },
  {
    "videoId": "2NpHXkZN1SY",
    "title": "jQuery :has and :contains Selectors in Cypress Tests",
    "description": "Cypress uses jQuery to select DOM elements, thus it can use advanced and powerful selectors like :has and :contains to find elements. For example, we can find all LI elements that have an element with class \"label\" and text \"New\" inside of them:\n\ncy.get('li:has(.label:contains(\"New\"))')\n\nThis example comes from https://glebbahmutov.com/cypress-examples site",
    "publishedAt": "2022-02-16T20:47:37Z",
    "url": "https://youtu.be/2NpHXkZN1SY"
  },
  {
    "videoId": "QzWAyCTvBY8",
    "title": "Test-Driven Development Using Cypress Unit Tests",
    "description": "In this video, I write unit tests for a simple function and run these tests using Cypress test runner. I also show how to use cy.wrap and cy.invoke methods to experiment with the code, while seeing the intermediate steps using Cypress time-traveling debugger.  The final spec file:\n\nimport { reverse } from '../../src/reverse'\n\nit('reverses a string', function () {\n  expect(reverse('hello')).to.equal('olleh')\n  expect(reverse()).to.equal('')\n  expect(reverse(42)).to.equal('')\n})\n\nit('wraps a string', function () {\n  cy.wrap('hello')\n    .invoke('split', '')\n    .invoke('reverse')\n    .invoke('join', '')\n    .should('equal', 'olleh')\n})\n\nFor more examples, read my Cypress blog posts https://glebbahmutov.com/blog/tags/cypress/",
    "publishedAt": "2022-02-14T17:33:34Z",
    "url": "https://youtu.be/QzWAyCTvBY8"
  },
  {
    "videoId": "ufmdrL28z-4",
    "title": "How To Silence cy.task and cy.invoke Command Logging",
    "description": "We can pass {log: false} to silence Cypress commands and prevent them from printing to the Command Log. Normally, this option goes after the command's arguments. But for cy.task and cy.invoke the order is different:\n\n// silence the cy.get command\ncy.get('...selector', {log: false})\n// silence the cy.task \n// the Cypress options is 3rd argument always\ncy.task('..name', null, {log: false})\n// silence the cy.invoke command\n// the Cypress options is 1st argument\ncy.wrap('hello')\n  .invoke({log: false}, 'split', '')\n\nBonus: to print something to the terminal we can create a little utility task\n// from the plugins file\non('task', {\n  print(x) {\n    console.log(x)\n    return null\n  }\n})\nWhenever we want to print something from the browser test, call the task with cy.task('print', 'my message')",
    "publishedAt": "2022-02-14T17:32:50Z",
    "url": "https://youtu.be/ufmdrL28z-4"
  },
  {
    "videoId": "2Q6L6bzqQRY",
    "title": "Freeze The Page Using cy.clock Command",
    "description": "In this video, to catch the quickly disappearing toast element, I use cy.clock command that freezes all setTimeout / clock related window functions inside the application. With the DOM frozen, I can inspect the elements and find the toast element. Then I can write the correct cy.get command to confirm the message I expect to see after solving the Wordle game on the first attempt. Find the source code in https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-02-11T13:21:30Z",
    "url": "https://youtu.be/2Q6L6bzqQRY"
  },
  {
    "videoId": "xFkIQmXiK5g",
    "title": "Use blockHosts Config To Avoid Loading 3rd Party Scripts From Tests",
    "description": "In this video, I update the spec file after Wordle has moved to NYTimes site. We need to change the baseUrl and update the local storage key in order to make the spec work again. I also add blockHosts to prevent 3rd party ads from loading during the tests. Find the updated code in https://github.com/bahmutov/cypress-wordle repository.",
    "publishedAt": "2022-02-11T12:54:28Z",
    "url": "https://youtu.be/xFkIQmXiK5g"
  },
  {
    "videoId": "in0ZXw1JtJQ",
    "title": "Return Cypress Chain",
    "description": "If you refactor the test code, remember to return the Cypress command chain from the utility functions. This lets you attach more commands and assertions to the returned object, and lets Cypress schedule the command execution correctly. In this video, I show how to write a utility function to wrap cy.request and handle a 404 response from the server. Find the full recipe at https://github.com/bahmutov/cypress-examples/blob/master/docs/recipes/request-not-found.md\n\nThe finished code\n\nfunction getTodo(id) {\n  const serverUrl = 'https://jsonplaceholder.cypress.io'\n  return cy\n    .request({\n      url: `${serverUrl}/todos/${id}`,\n      failOnStatusCode: false,\n    })\n    .then(function (response) {\n      if (response.status === 404) {\n        return 'Todo not found'\n      } else {\n        return response.body\n      }\n    })\n  // if the Todo is not found, return an error\n}\ngetTodo(10000001).should('equal', 'Todo not found')",
    "publishedAt": "2022-02-10T15:58:37Z",
    "url": "https://youtu.be/in0ZXw1JtJQ"
  },
  {
    "videoId": "Ck5MutpVOQo",
    "title": "Handle 404 Status Code In cy.request Command",
    "description": "This video shows how cy.request can handle the error server response, like 404 \"Resource not found\". \n\nFind this example and more at https://glebbahmutov.com/cypress-examples/commands/network-requests.html",
    "publishedAt": "2022-02-10T15:39:55Z",
    "url": "https://youtu.be/Ck5MutpVOQo"
  },
  {
    "videoId": "J49ujGfe-fs",
    "title": "Decode The Phrasle Answer And Updated Vowel Logic",
    "description": "In the previous video \"Solve Phrasle Using Cypress\" https://www.youtube.com/watch?v=b2SDRH2_faE I have shown how to solve the game Phrasle by looking up the answer in the application state object. The author of the game has obfuscated the answer and has added vowel check popups. In this video, I show how to decode the answer and play the updated game using Cypress. Find the solution in the repo https://github.com/bahmutov/cypress-react-app-actions.",
    "publishedAt": "2022-02-08T14:43:32Z",
    "url": "https://youtu.be/J49ujGfe-fs"
  },
  {
    "videoId": "b2SDRH2_faE",
    "title": "Solve Phrasle Using Cypress",
    "description": "In this video, I test the Phrasle.com game using Cypress test runner. I pull the answer to the daily Phrasle from the Remix context object, then enter the letters into the game, and then check that it was solved.\n\ncy.visit('/')\n  .its('__remixContext.routeData.routes/index.answer')\n  .then(function (answer) {\n    const letters = answer\n      .split('')\n      .filter(function (c) { return c.match(/[a-z]/) })\n    letters.forEach(function (letter) {\n      cy.contains('.Key', letter).click()\n    })\n  })\ncy.contains('.stat-todaysGame-info', 'PERFECT').should(\n  'be.visible',\n)\n\nFind the source code in https://github.com/bahmutov/cypress-react-app-actions/pull/1 For more, see my other videos about solving the Wordle game using Cypress and check out repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-02-07T16:34:50Z",
    "url": "https://youtu.be/b2SDRH2_faE"
  },
  {
    "videoId": "d6zggQySjQM",
    "title": "Intro To Cypress React App Actions",
    "description": "This video shows how to check the React component's internal state and set it from the Cypress end-to-end test using the plugin cypress-react-app-actions. From the DOM element, get the component and check its state\n\nimport 'cypress-react-app-actions'\ncy.get('form')\n  .getComponent()\n  .its('state')\n  .should('deep.equal', startOfSecondPageState)\n\nOr set it to some object to immediately get the application into the required state\n\ncy.get('form')\n  .getComponent()\n  .invoke('setState', startOfSecondPageState)\n\nBoth development and production React builds should work. Find the full source code in the repo https://github.com/bahmutov/cypress-example-forms, the plugin at https://github.com/bahmutov/cypress-react-app-actions and read the blog post \"Control React Applications From Cypress Tests\" https://glebbahmutov.com/blog/react-app-actions/",
    "publishedAt": "2022-02-06T16:29:10Z",
    "url": "https://youtu.be/d6zggQySjQM"
  },
  {
    "videoId": "lRo8z2uVJEQ",
    "title": "What Are App Actions?",
    "description": "App actions are a way for Cypress end-to-end tests to reach into your application to validate its state or invoke methods, bypassing the user interface. They do not replace the normal tests - you still want to test the page of course, but not every test needs to perform the actions unrelated to its primary testing goal through the page interface. This particular video shows how to split a long test that fills several pages of the user registration form into separate tests. Each test finishes in the known state, and the next test can start from that state without re-filling the previous pages. Find the full source code in the repo https://github.com/bahmutov/cypress-example-forms and the approach described in the blog post \"Split a very long Cypress test into shorter ones using App Actions\" https://www.cypress.io/blog/2019/10/29/split-a-very-long-cypress-test-into-shorter-ones-using-app-actions/",
    "publishedAt": "2022-02-06T16:24:26Z",
    "url": "https://youtu.be/lRo8z2uVJEQ"
  },
  {
    "videoId": "yk_ptq20Mic",
    "title": "Extract And Test The Day Number",
    "description": "In this video, we use \"should(match, regular expression)\" assertion to confirm that there is a number of days in the element. Then we parse the extracted string, convert the text to an integer and check if it is between 1 and 31 values. Find the full source code in the examples repo https://github.com/bahmutov/cypress-examples",
    "publishedAt": "2022-02-04T17:28:19Z",
    "url": "https://youtu.be/yk_ptq20Mic"
  },
  {
    "videoId": "g_7LZXuEIMA",
    "title": "How To Call The Spy Function",
    "description": "This video shows how to call the spy function (if you must call it directly) while preserving the original \"this\" reference. Preserving the original \"this\" is needed if the method you are calling is using \"this\" inside of it.\n\nHere is our object\n\nconst testRunner = {\n  name: 'Cypress',\n  getName() {\n    return this.name\n  },\n}\n\nLet's create the spy and call it but make sure it has \"this\" pointing at the testRunner object instance\n\nexpect(\n  getNameSpy.call(testRunner),\n  'call the spy directly',\n).to.equal('Cypress')\n\nNote: calling the spy seems wrong to me. I would prefer to call the original method testRunner.getName()\n\nFind this and many other examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-02-04T16:57:15Z",
    "url": "https://youtu.be/g_7LZXuEIMA"
  },
  {
    "videoId": "tXqX2SQurMc",
    "title": "Stay Logged In During Tests By Preserving A Cookie",
    "description": "This video shows how to avoid logging the user in every test by using the Cypress.Cookies API\n\n// log in just once\nbefore(function () {\n  loginUser(username, password)\n})\n// preserve the session cookie before each test\nbeforeEach(function () {\n  Cypress.Cookies.preserveOnce('connect.sid')\n})\nFind the full source code in the repo https://github.com/bahmutov/chat.io\nAlternative: use cypress-data-session plugin to control the cookie explicitly https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2022-02-03T18:50:34Z",
    "url": "https://youtu.be/tXqX2SQurMc"
  },
  {
    "videoId": "xIIF5joixaU",
    "title": "Run Cypress Tests Against URL Set In The Pull Request",
    "description": "In this video, I show how my Cypress tests can run the tagged tests against a preview URL listed in the pull request template text. If I want to run the tests against a different preview deploy, I just edit the baseUrl in the PR and run the tests. \n\nFind the full source code in https://github.com/bahmutov/todomvc-tests-circleci which is using https://github.com/bahmutov/grep-tests-from-pull-requests to process the pull request text and set the Cypress settings. For more, read the blog post \"How to Keep Cypress Tests in Another Repo While Using CircleCI\" https://glebbahmutov.com/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/",
    "publishedAt": "2022-02-03T15:28:08Z",
    "url": "https://youtu.be/xIIF5joixaU"
  },
  {
    "videoId": "7tzstwfuA6g",
    "title": "A Little Taste Of React App Actions",
    "description": "This video shows a React application running. From Cypress End-to-End tests we visit the site, get a DOM element, and then get to the React component. We can confirm the state of the component, its props, and even spy the calls to the \"setStste\" method - all from an end-to-end test, in the production React build without any modifications to the application. Find this particular source code in the repo https://github.com/bahmutov/react-counter\n\nPart of the example test\n\ncy.get('.Example')\n  .getComponent()\n  .its('state')\n  .should('deep.equal', { count: 2 })\ncy.get('.Example')\n  .getComponent()\n  .its('props')\n  .should('have.property', 'initialCount', 0)\n\nPart of the test showing spying on the \"setState\" call\n\ncy.get('.Example')\n  .getComponent()\n  .then(function (comp) {\n    cy.spy(comp, 'setState').as('setState')\n  })\ncy.contains('.Example button', 'Double me').click()\ncy.get('@setState').should('have.been.calledOnceWith', { count: 4 })",
    "publishedAt": "2022-02-02T22:32:23Z",
    "url": "https://youtu.be/7tzstwfuA6g"
  },
  {
    "videoId": "X1yCcfIDPQk",
    "title": "Fix Circular Object Problem In Cypress",
    "description": "This short video shows how to solve the \"trying to serialize an object with circular references\" problem while trying to send an object from the spec to the plugins process. We bring a 3rd party dependency \"flatted\" that can handle objects with circular references and accurately recreate them.\n\nThe spec file\nconst { stringify } = require('flatted')\n\nit('prints object to the terminal', function () {\n  const o = {\n    name: 'Mike',\n    children: [\n      {\n        name: 'Joe',\n      },\n    ],\n  }\n  o.children[0].parent = o\n  cy.task('print', stringify(o))\n})\n\nThe plugin file\nconst { parse } = require('flatted')\nmodule.exports = function (on, config) {\n  on('task', {\n    print(x) {\n      console.log('%o', parse(x))\n      return null\n    },\n  })\n}",
    "publishedAt": "2022-02-01T18:48:38Z",
    "url": "https://youtu.be/X1yCcfIDPQk"
  },
  {
    "videoId": "DxlqDA7tIOw",
    "title": "Check The Prices Table Rows",
    "description": "In this short example video, I show how I would check a table with prices and quantities to confirm the table has the correct total. We can find the cells, then use cy.spread to get each cell as its own element, extract the text and convert it to numbers. \n\nLet's confirm the second row has the correct total.\n\ncy.get('#sales tbody tr')\n  .eq(1)\n  // get the row cells\n  .find('td')\n  // spread the table cells into individual DOM elements\n  .spread(function (nameEl, priceEl, quantityEl, totalEl) {\n    const name = nameEl.innerText\n    const price = parseFloat(priceEl.innerText.replace('$', ''))\n    const quantity = parseInt(quantityEl.innerText)\n    const total = parseFloat(totalEl.innerText.replace('$', ''))\n    expect(price * quantity, `total for ${name}`).to.equal(total)\n  })\n\nFind the full recipe in the repo https://github.com/bahmutov/cypress-examples",
    "publishedAt": "2022-01-28T16:48:33Z",
    "url": "https://youtu.be/DxlqDA7tIOw"
  },
  {
    "videoId": "y8PalMNf5N4",
    "title": "Debug cy.contains or Cypress.env problem",
    "description": "In this video, the command \"cy.contains(Cypress.env(...))\" throws an error. Is it a cy.contains or a Cypress.env problem? I show how to solve this problem step by step. Some tips from the video:\n\n- always check the value you get from the Cypress.env object before using it\n- you can see the values in the Cypress.env object right from the DevTools console\n- you can overwrite the current values in the Cypress.env object by calling Cypress.env(key, value) from the DevTools console\n- you can see the entire config object with all resolves settings and the \"env\" object by looking at the Cypress \"Settings\" tab",
    "publishedAt": "2022-01-27T17:31:26Z",
    "url": "https://youtu.be/y8PalMNf5N4"
  },
  {
    "videoId": "4MOfRd6I3UY",
    "title": "Solving Various Wordle Apps Using The Same Algorithm And Different Page Objects",
    "description": "This video explains the solve function that interacts with the page via page objects. It allows us to use the same code to solve 3 different Wordle implementations, even if the structures of the page are different from each other.\n\nSolved games:\n- the original https://www.powerlanguage.co.uk/wordle/\n- a greener wordle https://agreenerworldle.org/\n- Vue implementation https://vue-wordle.netlify.app/\n\nFind the full source code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-26T16:59:38Z",
    "url": "https://youtu.be/4MOfRd6I3UY"
  },
  {
    "videoId": "R4Ji8lrFrec",
    "title": "Use Page Objects To Interact With Wordle",
    "description": "We can move standard \"close the initial popup\" commands into their own file, creating Page objects. Then each spec just calls static methods on the page objects without repeating the same selectors and commands. Find the full source code in https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-25T17:57:01Z",
    "url": "https://youtu.be/R4Ji8lrFrec"
  },
  {
    "videoId": "EWh_NMJS8uU",
    "title": "Setup Parallel CI to Run Wordle Specs Faster",
    "description": "In this video I use my parallel GitHub Actions workflow to take advantage of Cypress Dashboard and run the Wordle specs in parallel.\n\nuses: bahmutov/cypress-workflows/.github/workflows/parallel.yml@v1\nwith:\n  n: 5\n  group: 'All tests'\nsecrets:\n  recordKey: ${{ secrets.CYPRESS_RECORD_KEY }}\n\nSee this reusable workflow in https://github.com/bahmutov/cypress-workflows\n\nBy running the specs across 5 machines we shorten the test time from 5 minutes to 1 minute. Find the full source code in https://github.com/bahmutov/cypress-wordle repo",
    "publishedAt": "2022-01-24T21:11:40Z",
    "url": "https://youtu.be/EWh_NMJS8uU"
  },
  {
    "videoId": "vwIpCbMskYI",
    "title": "Solve The Test Hanging On CI By Printing Messages To The Terminal",
    "description": "Using cy.task we can print the test progress into the terminal where it will be visible while the test runs into an infinite loop. \n\non('task', {\n  print(message) {\n    console.log(message)\n    return null\n  }\n})\n\nThe from the test we can do the following to see where the test \"gets stuck\" on CI:\ncy.task('print', `trying ${word}`)\n\nFind the full source code in https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-24T20:34:44Z",
    "url": "https://youtu.be/vwIpCbMskYI"
  },
  {
    "videoId": "1e1xU1_H0cg",
    "title": "Use Your Own Start Word",
    "description": "In this video, we create a new spec that reads the start word from the Cypress.env('startWord') call. This let's the user provide their own start word, and we even create a new GitHub workflow to enter the word when launching the start spec. To see the results, I set up Cypress Dashboard recording and save the screenshot of the solved game there. Find the full source code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-24T13:43:00Z",
    "url": "https://youtu.be/1e1xU1_H0cg"
  },
  {
    "videoId": "LiYJtUbe7gc",
    "title": "Confirm Network Intercept Fields Using Cypress Fluent Chain of Commands",
    "description": "In this video, I fix an example code snippet that tries to validate the intercepted network request. I explain why the console.log prints an unexpected value, how to assert multiple properties from a complex object, how to write fluent Cypress chains of commands and assertions. For full information, read the blog post https://glebbahmutov.com/blog/network-requests-with-cypress/ and find the source code in the repo https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2022-01-23T23:14:14Z",
    "url": "https://youtu.be/LiYJtUbe7gc"
  },
  {
    "videoId": "NOwNg-Nhv4o",
    "title": "Generate A Daily Wordle Hint Email With Screenshot",
    "description": "In this video, I show how to hide all letters from the solved Wordle puzzle, and only reveal one letter as a hint to the solution. Then we take a screenshot of the game board and email ourselves that image. We set up a daily CI workflow to generate the hint email at 5 o'clock in the morning. Find the full code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-21T14:37:50Z",
    "url": "https://youtu.be/NOwNg-Nhv4o"
  },
  {
    "videoId": "UZwE1KTz-98",
    "title": "Use cypress-data-session To Store The Word List",
    "description": "In this video, I show how to download and extract the word list from a JavaScript Wordle bundle just once, and then keep it cached in memory using the plugin https://github.com/bahmutov/cypress-data-session. By caching using the plugin, we keep our code small, simple, and can even store the data in the plugins process, where it is available to other specs. Find the full source code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-19T19:29:10Z",
    "url": "https://youtu.be/UZwE1KTz-98"
  },
  {
    "videoId": "fJmNyMnBvbs",
    "title": "Run Wordle E2E Tests On GitHub Actions Using A Workflow",
    "description": "In this video, I add CI to the cypress-wordle repo. I use GitHub Actions via my reusable workflow \"standard\", see https://github.com/bahmutov/cypress-workflows The entire CI config file is tiny\n\nname: ci\non: [push]\njobs:\n  test:\n    # use the reusable workflow to check out the code, install dependencies\n    # and run the Cypress tests\n    # https://github.com/bahmutov/cypress-workflows\n    uses: bahmutov/cypress-workflows/.github/workflows/standard.yml@v1\n\nFind the full source code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-19T14:52:57Z",
    "url": "https://youtu.be/fJmNyMnBvbs"
  },
  {
    "videoId": "SeRLrdtr3Vs",
    "title": "Solve Wordle In Hard Mode",
    "description": "This video shows the optimizations I made to cypress-wordle to solve the game in Hard mode by really picking the next word carefully, and by filtering the words based on the results. I also show the unit tests I have written for picking the next word. Find the full code in https://github.com/bahmutov/cypress-wordle\n\nNote: my own head video freezes midway through the video, ughh, the computer is having problems, need to restart it.",
    "publishedAt": "2022-01-19T14:31:40Z",
    "url": "https://youtu.be/SeRLrdtr3Vs"
  },
  {
    "videoId": "ZmcOFr2UzZU",
    "title": "Play Wordle From Any Date Using cy.clock",
    "description": "This video shows how to set the Date using the cy.clock command which forces the Wordle to play the word from that day. Find the full code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-19T14:25:51Z",
    "url": "https://youtu.be/ZmcOFr2UzZU"
  },
  {
    "videoId": "zQGLR6qXtq0",
    "title": "Solve Wordle Game For Real Using Cypress",
    "description": "In this video, I show the real solution to Worlde game using Cypress Test Runner. We will use cy.intercept to grab the list of 5-letter words, enter a random word, collect the letter status, then filter the world list and try again. As the list becomes shorter and shorter, we are closer to the solution, until we (hopefully) reach it. Find the full source code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-18T14:15:45Z",
    "url": "https://youtu.be/zQGLR6qXtq0"
  },
  {
    "videoId": "pzFzOKEV-eo",
    "title": "Solve Wordle Game Using Cypress",
    "description": "In this video, we will \"solve\" World game using Cypress. We will need to cross the Shadow DOM boundary to query elements, trigger the \"keydown\" events to send the letters to the window object, and look up the solution by reading it from the application state object stored in the local storage. Find the full source code in the repo https://github.com/bahmutov/cypress-wordle\n\nUpdate: I recorded 2nd video where I solve the Wordle game using Cypress for real https://www.youtube.com/watch?v=zQGLR6qXtq0",
    "publishedAt": "2022-01-17T20:05:01Z",
    "url": "https://youtu.be/pzFzOKEV-eo"
  },
  {
    "videoId": "NnriKHmj5T8",
    "title": "How To Report A Cypress Bug",
    "description": "In this video, I find a bug in cy.next command and report it to the Cypress team by opening https://github.com/cypress-io/cypress/issues/19724 with a reproducible example in the forked repo https://github.com/cypress-io/cypress-test-tiny",
    "publishedAt": "2022-01-16T16:12:27Z",
    "url": "https://youtu.be/NnriKHmj5T8"
  },
  {
    "videoId": "D0uH_pmcBvg",
    "title": "cy.contains With Text Transform UpperCase Example",
    "description": "Whenever you want to find a text on the page that is all uppercase, watch out! The text in the page might be \"normal\", and it is the CSS text transform that makes the rendered text all caps. This video shows how to inspect the element, how to confirm the data attribute returns a single element, and how to look up the cy.contains documentation page at https://on.cypress.io/contains",
    "publishedAt": "2022-01-15T21:22:34Z",
    "url": "https://youtu.be/D0uH_pmcBvg"
  },
  {
    "videoId": "MdSfViZaBnw",
    "title": "Write Unit Tests In Cypress With Mocking Node FS.readFileSync Method",
    "description": "If you have a lot of end-to-end Cypress tests and want to quickly add a few unit tests, you do not have to bring a second test runner. You can use Cypress to write and run unit tests, and even mock Node modules like fs.readFileSync if needed. Find the full source code for this example in repo https://github.com/bahmutov/cypress-testrail-simple\n\nExample source code that uses fs.readFileSync\n\nconst fs = require('fs')\nfunction findCasesInSpec(spec, readFile = fs.readFileSync) {\n  ...\n}\nmodule.exports = { findCasesInSpec }\n\nExample unit test that passes our stub to replace fs.readFileSync\n\nimport { findCasesInSpec } from '../../src/find-cases'\n\nit('finds test case ids', function () {\n  const source = `\n    it('C101', ...)\n  `\n  const readFile = cy.stub().returns(source)\n  const ids = findCasesInSpec('spec1.js', readFile)\n  expect(ids).to.deep.equal([101])\n  expect(readFile).to.be.calledWith('spec1.js', 'utf8')\n})",
    "publishedAt": "2022-01-14T22:09:41Z",
    "url": "https://youtu.be/MdSfViZaBnw"
  },
  {
    "videoId": "0Bp_FXToQpg",
    "title": "Setup GitHub Actions To Run Cypress Component Tests",
    "description": "In this video, I set up GitHub Actions CI file (using https://github.com/cypress-io/github-action of course) to run Cypress component tests on every push commit. We will need to use a custom command to execute \"yarn cypress run-ct\" command on CI\n\n# Install NPM dependencies, cache them correctly\n# and run all Cypress tests\n- name: Cypress run\n  uses: cypress-io/github-action@v2\n  with:\n    # to run component tests we need to use \"cypress run-ct\"\n    command: yarn cypress run-ct\n\nFind the source code and the workflow file in the repo https://github.com/bahmutov/react-dark-mode",
    "publishedAt": "2022-01-13T16:34:15Z",
    "url": "https://youtu.be/0Bp_FXToQpg"
  },
  {
    "videoId": "VPznmFpa1Jc",
    "title": "Use Cypress Element Alias To Avoid The Element Detached From DOM Error",
    "description": "In this example, I show how to store the result of the long chain of Cypress commands in an alias. \n\ncy.get('#chain-example')\n  .find('#items')\n  .find('li')\n  .should('have.length', 2)\n  .first()\n  .as('fruit')\n\nWe can now get the element and add assertions to it\n\ncy.get('@fruit').should('have.text', 'Grapes')\n\nIf the element becomes detached from the page DOM (because the application has re-rendered that part of the page), the Cypress Test Runner re-queries the commands in the chain that leads to the alias, refreshing the elements from the page.\n\nFind this recipe in my examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-01-13T16:29:42Z",
    "url": "https://youtu.be/VPznmFpa1Jc"
  },
  {
    "videoId": "VdyZonBAeLw",
    "title": "Using Cypress Component Testing To Really Test A React Dark Mode Component",
    "description": "This video shows Cypress component testing (https://on.cypress.io/component-testing) in action. We are testing a React Dark Mode component, my code is in the repo https://github.com/bahmutov/react-dark-mode I have set up the settings using an example from https://github.com/cypress-io/cypress-component-testing-examples\n\nWe confirm the component is working, is storing and loading the theme from the localStorage and uses the Media Match method to determine the initial value.",
    "publishedAt": "2022-01-12T19:02:40Z",
    "url": "https://youtu.be/VdyZonBAeLw"
  },
  {
    "videoId": "JA-exPC_8Mo",
    "title": "GitHub To Circle Trigger With Custom Test Tags",
    "description": "This video shows how conveniently I can run multiple tests using tags (provided by cypress-grep plugin) using Manual workflow on GitHub Actions. I can click off the test tags to run, and it triggers the CircleCI pipeline that actually runs the tests and reports the results to Cypress Dashboard. I even tag the recorded Dashboard run with a custom tag so I can find it easier in the list of runs. See the source code in https://github.com/bahmutov/test-todomvc-using-app-actions and read the blog post \"How To Tag And Run End-to-End Tests\" at https://glebbahmutov.com/blog/tag-tests/",
    "publishedAt": "2022-01-12T16:01:23Z",
    "url": "https://youtu.be/JA-exPC_8Mo"
  },
  {
    "videoId": "WU8pT7n4JTs",
    "title": "See All Tests In Your Project Using find-cypress-specs",
    "description": "This video introduces the find-cypress-specs (https://github.com/bahmutov/find-cypress-specs) utility that can report all Cypress specs in your project. It can even report all suites and tests inside each spec and count them. You can find tests by title or by tags, and count them by piping the output to other commands. See the example specs in https://github.com/bahmutov/test-todomvc-using-app-actions repo.",
    "publishedAt": "2022-01-12T14:31:04Z",
    "url": "https://youtu.be/WU8pT7n4JTs"
  },
  {
    "videoId": "IDJFPREpy6o",
    "title": "Refactor Tests To Use Built-in Cypress Commands",
    "description": "In this video, I take the repo https://github.com/robcaldecott/cypress-vite mentioned in the tweet https://twitter.com/robertcaldecott/status/1480848740621688832 and refactor it to use the built-in cy.contains and cy.intercept commands to check the page and stub the network requests. Bonus: we can also merge short tests into one meaningful test. The final tests are\n\ndescribe(\"app\", function () {\n  it(\"renders the heading\", function () {\n    cy.intercept('/api/names', ['Bob', 'Alice']).as('names')\n    cy.visit(\"/\").its('appReady').should('be.true');\n    cy.log('**renders in the loading state**')\n    cy.contains('[aria-label=loading]', /loading/i)\n    cy.contains('[aria-label=loading]', /loading/i).should('not.exist')\n    cy.log('**renders heading**')\n    cy.contains('h1', /cypress demo/i)\n    cy.wait('@names')\n    cy.contains('Bob')\n    cy.contains('Alice')\n  });\n\n  it(\"handles errors\", function () {\n    cy.intercept('/api/names', {forceNetworkError: true})\n    cy.visit(\"/\").its('appReady').should('be.true');\n    cy.contains(/error fetching names/i)\n  });\n});",
    "publishedAt": "2022-01-11T19:32:10Z",
    "url": "https://youtu.be/IDJFPREpy6o"
  },
  {
    "videoId": "UfRhlRxy1AE",
    "title": "Collect Headings And Subheadings Using cy.each Command",
    "description": "Sometimes you want to get sections of the page, and for each section collect some information putting it all into a single object. This video shows how to do this using cy.each command. At the end of the collection, we save the entire JSON object using cy.writeFile command.\n\nYou can find this recipe in the repo https://github.com/bahmutov/cypress-examples and hosted online at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-01-09T18:21:40Z",
    "url": "https://youtu.be/UfRhlRxy1AE"
  },
  {
    "videoId": "f_H7EH0n9tE",
    "title": "Fix The Cypress Error \"You are mixing async and sync code\"",
    "description": "In this video, I show the root reason for the Cypress error \"async and sync code\" - it happens when you have both a Cypress command and a return statement inside cy.then callback. For example, the following test code inside a Cypress test will fail with an error:\n\n.then(function () {\n  cy.wrap('Anna')\n   return 'Joe'\n})\n\nCypress is not sure which value do you want to yield from the .then callback: \"Anna\" or \"Joe\". The same error happens even if you use something like cy.log\n\nthen(function () {\n  cy.log('returning Joe')\n   return 'Joe'\n})\n\nThe solution is to never use both Cy commands and a return statement inside the same .then callback. For example, if you want to log a value, attach its own callback \n\nthen(function () {\n  cy.log('returning Joe').then(function () {\n     return 'Joe'\n  })\n})\n\nAlternative solution: print in a separate .then\n\n.then(function () {\n  cy.log('returning Joe')\n})\n.then(function () {\n   return 'Joe'\n})\n\nAlternative solution: Cypress yields the value from its last command. Instead of \"return\" use cy.wrap command\n\nthen(function () {\n  cy.log('returning Joe')\n   cy.wrap('Joe')\n})\nSee the solutions in my https://glebbahmutov.com/cypress-examples/ under \"Yield value\" recipe",
    "publishedAt": "2022-01-06T17:30:55Z",
    "url": "https://youtu.be/f_H7EH0n9tE"
  },
  {
    "videoId": "h7taQNvj0Cs",
    "title": "Crawl Pages With Resource Check",
    "description": "In this video, I show how to improve crawling local pages using Cypress to avoid visiting the same resource if there are different links to it. For example, both /tos.html and /tos href attributes lead to the same page /tos We detect the true resource URL using cy.request and looking at the redirects it returns. By finding /tos.html redirects we get that the actual link is /tos \n\nFind the previous video \"Crawl Pages\" at https://www.youtube.com/watch?v=FDNeiwKWdb4 and the full source code at https://github.com/bahmutov/cypress-crawl-example",
    "publishedAt": "2022-01-06T16:34:50Z",
    "url": "https://youtu.be/h7taQNvj0Cs"
  },
  {
    "videoId": "0OfILKbqbsg",
    "title": "Test 404 Page",
    "description": "In this video, I show how to use cy.visit and cy.request commands to verify the server is returning a 404 page for invalid resource URLs. Find the full source code in https://github.com/bahmutov/cypress-crawl-example In summary, I did:\n\nconst url = '/does-not-exist'\ncy.request({ url, failOnStatusCode: false })\n  .its('status', { timeout: 0 })\n  .should('equal', 404)\ncy.visit(url, { failOnStatusCode: false })\ncy.contains('span', '404')",
    "publishedAt": "2022-01-05T14:23:57Z",
    "url": "https://youtu.be/0OfILKbqbsg"
  },
  {
    "videoId": "FDNeiwKWdb4",
    "title": "Crawl Local Pages Using Cypress",
    "description": "In this video, I show how to write a recursive Cypress test crawling every local page. This test will detect invalid links and pages that throw errors on load. You can find the source code in the repo https://github.com/bahmutov/cypress-crawl-example Tip: if you want to parallelize the crawl and your site has sitemap.xml resource, you can follow the blog post https://glebbahmutov.com/blog/test-sitemap/ and generate multiple tests to hit each URL directly.\n\nNote: in the video \"Crawl Pages With Resource Check\" https://youtu.be/h7taQNvj0Cs I show how to improve the crawl to avoid duplicate visits via different links that ultimately lead to the same resource.",
    "publishedAt": "2022-01-04T23:35:45Z",
    "url": "https://youtu.be/FDNeiwKWdb4"
  },
  {
    "videoId": "0LLsdI0o9Iw",
    "title": "Use Multiple Aliases To Avoid Pyramid of Doom Callbacks",
    "description": "In this video, I save multiple elements under Cypress aliases using the cy.as  command. Then I use a single cy.then callback with a function to confirm the values follow a certain rule. Cypress aliases are set on the test context object as properties, thus each saved alias as(\"x\") can be read using this.x in the test. Find the source code at https://glebbahmutov.com/cypress-examples site.",
    "publishedAt": "2021-12-31T19:54:33Z",
    "url": "https://youtu.be/0LLsdI0o9Iw"
  },
  {
    "videoId": "Csjg1qktnU0",
    "title": "Visit Two Domains In The Same Cypress Spec",
    "description": "This video shows how to visit multiple domains in the same Cypress spec and pass values from one site to another by storing it in the plugin file process via cy.task command. See the issue https://github.com/cypress-io/cypress/issues/944",
    "publishedAt": "2021-12-29T18:30:35Z",
    "url": "https://youtu.be/Csjg1qktnU0"
  },
  {
    "videoId": "kBYtqsK-8Aw",
    "title": "Record A Test Using Cypress Studio",
    "description": "In this video, I use the Cypress Studio https://on.cypress.io/studio to record parts of the test, and then manually add assertions to the saved test commands. Find the full spec code at https://github.com/bahmutov/todo-app-for-cyclope",
    "publishedAt": "2021-12-23T16:56:39Z",
    "url": "https://youtu.be/kBYtqsK-8Aw"
  },
  {
    "videoId": "VtIvGznpo_A",
    "title": "Stop CSS Animation In A Component Test",
    "description": "In this video, I use a Cypress component test (see https://on.cypress.io/component-testing) to mount a React App component. I do not like the spinning React logo, so I use the \"style\" option to load additional CSS and apply it to the Logo class, overwriting the animation property. Then I show how to verify that the animation CSS was truly applied (and I can see the logo frozen in the browser). Find the source code in the repo https://github.com/bahmutov/react-dark-mode",
    "publishedAt": "2021-12-16T18:07:02Z",
    "url": "https://youtu.be/VtIvGznpo_A"
  },
  {
    "videoId": "fBcoMmNBY5w",
    "title": "Run Cypress On CircleCI From Your Terminal",
    "description": "This video introduces the \"run-cy-on-ci\" utility https://github.com/bahmutov/run-cy-on-ci that lets you trigger Cypress test workflow on CircleCI using cypress-grep https://github.com/cypress-io/cypress-grep plugin to select one test or a group of tests. Using run-cy-on-ci you can run the tests multiple times, control the number of machines (parallel run if configured), run tests on specific branch, and pass additional parameters to the workflow. Find the example project at https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-12-14T16:41:07Z",
    "url": "https://youtu.be/fBcoMmNBY5w"
  },
  {
    "videoId": "84NQf-HVWWE",
    "title": "Visibility Of Multiple Elements Explained",
    "description": "This video explains how to check if multiple elements returned by a query command like cy.get are visible or not. We can filter all elements by visibility to avoid accidentally passing the assertion only with some elements visible. Find the full source code at https://glebbahmutov.com/cypress-examples/commands/assertions.html",
    "publishedAt": "2021-12-10T13:20:24Z",
    "url": "https://youtu.be/84NQf-HVWWE"
  },
  {
    "videoId": "PRpuE2DXRlQ",
    "title": "Cypress Dashboard, Reusing GitHub Workflows, Flake Detection, And Test Retries",
    "description": "This video has it all:\n- setting up Cypress Dashboard to record the test results\n- super simple GitHub workflow by reusing bahmutov/cypress-workflows standard.yml\n- enabling test retries in the project\n- flake detection on Cypress Dashboard\n- fixing the flaky test by enabling a longer command timeout\n\nFind the source code in https://github.com/bahmutov/cypress-3rd-party-script-example and reusable Cypress workflows in https://github.com/bahmutov/cypress-workflows",
    "publishedAt": "2021-12-09T14:12:42Z",
    "url": "https://youtu.be/PRpuE2DXRlQ"
  },
  {
    "videoId": "MzCACth7qLE",
    "title": "Slow Down And Wait For 3rd Party JavaScript To Load",
    "description": "In this video, I will show how to slow down a particular request to load 3rd party JavaScript to see how the application handles it. We also learn how to ensure the 3rd party JS has loaded by checking the object it creates on the \"window\" object. Finally, the test shows how to invoke a method on the 3rd party JavaScript object. Find the full source code in the repo https://github.com/bahmutov/cypress-3rd-party-script-example",
    "publishedAt": "2021-12-09T00:42:58Z",
    "url": "https://youtu.be/MzCACth7qLE"
  },
  {
    "videoId": "QHGhp9yG4uw",
    "title": "Indeterminate Checkboxes",
    "description": "This video teaches you about indeterminate checkboxes (check out this article https://css-tricks.com/indeterminate-checkboxes/) and how to test them using Cypress.io test runner. Find the full set of tests in https://github.com/bahmutov/indeterminate-checkboxes",
    "publishedAt": "2021-12-07T13:34:20Z",
    "url": "https://youtu.be/QHGhp9yG4uw"
  },
  {
    "videoId": "jlBNdJPscJk",
    "title": "Debug Ramda Pipeline in Cypress Test",
    "description": "In this video, I take a failing test that uses R.pipe method and shows how to debug its steps using R.tap method to see the data at each step. Then I fix the test and show a few more tricks. Find the full test in repo https://github.com/bahmutov/sorted-table-example",
    "publishedAt": "2021-12-04T17:57:25Z",
    "url": "https://youtu.be/jlBNdJPscJk"
  },
  {
    "videoId": "9AF-lcvh1dk",
    "title": "Fix The Dreaded Cypress Error \"Command Inside Of A Promise\"",
    "description": "In this video, I explain the dreaded \"Cypress detected that you returned a promise in a test, but also invoked one or more cy commands inside of that promise\" error and how to avoid it. Cypress commands are chains that yield a value (called the subject) to the next command. By using a promise and Cypress commands you are confusing Cypress: which value should it yield - the value resolved by the promise or the value yielded by the new Cypress commands? Luckily, every situation like this can be rewritten to only use a promise in a step, or Cypress commands.",
    "publishedAt": "2021-12-03T14:20:28Z",
    "url": "https://youtu.be/9AF-lcvh1dk"
  },
  {
    "videoId": "skjPl8wvHEo",
    "title": "Add Unit Tests To Verify chai-sorted Assertion Plugin",
    "description": "In https://github.com/bahmutov/sorted-table-example I have used chai-sorted assertion plugin to check if an array is sorted. To make sure the chai-sorted behaves correctly, this video shows how I add a few unit tests to run in Cypress. This way we \"lock\" the behavior of the plugin and can safely upgrade it in the future.",
    "publishedAt": "2021-12-02T14:11:02Z",
    "url": "https://youtu.be/skjPl8wvHEo"
  },
  {
    "videoId": "h-2sZshFroc",
    "title": "Cypress Ramda",
    "description": "This video teaches you how to import Ramda library and set it as \"Cypress.R\" so that all its functions are available, similar to the already bundled Lodash library \"Cypress._\" property. Note: I love Ramda because its order of arguments is very convenient (the known arguments are placed first, and the dynamic data like the list of items is expected last, which works great with currying, see this video \"Hey Underscore, You're Doing It Wrong!\" https://www.youtube.com/watch?v=m3svKOdZijA). Read blog posts like https://glebbahmutov.com/blog/lodash-to-ramda-example/ and other blog posts tagged \"Ramda\" at https://glebbahmutov.com/blog/tags/ramda/. You can also flip through my functional presentation slides at https://slides.com/bahmutov/decks/functional",
    "publishedAt": "2021-11-29T17:44:05Z",
    "url": "https://youtu.be/h-2sZshFroc"
  },
  {
    "videoId": "vlLLi5N4h78",
    "title": "Replace Text In The Loaded JSON Fixture",
    "description": "In this video, I teach you how to load a JSON fixture file and replace parts of the text using cy.invoke command. We can also convert the JSON into a string or load the fixture into a Buffer object to take advantage of the \"null\" encoding available in Cypress v9. Find this example, and more Cypress training exercises in the repo https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2021-11-24T14:08:35Z",
    "url": "https://youtu.be/vlLLi5N4h78"
  },
  {
    "videoId": "WO3ujoEhVUc",
    "title": "Random Data And Selective Testing Using Faker And Cypress-Each Plugin",
    "description": "This video demonstrates the Faker utility https://github.com/Marak/Faker.js#readme for generating random but deterministic fake data for testing, and cypress-each https://github.com/bahmutov/cypress-each plugin for data-driven tests. It shows how to select just a subset of items to test. Find the source code at https://github.com/bahmutov/cypress-each-and-faker-example repo",
    "publishedAt": "2021-11-22T20:32:07Z",
    "url": "https://youtu.be/WO3ujoEhVUc"
  },
  {
    "videoId": "Z5i60En_33A",
    "title": "Call Window Method From Cypress Spec",
    "description": "This short video explains calling application / window methods from Cypress specs - you have direct access to the application's \"window\" object by using the command cy.window. You can combine the command with assertions to get the method reference when it is ready, or use the cy.invoke command to call the method with automatic built-in checks. Find more documentation at https://on.cypress.io/window and at https://glebbahmutov.com/cypress-examples/commands/window.html\n\nTip: exposing the application methods via \"window\" object to the Cypress tests is very convenient and can super-charge your tests, take a look at https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/ blog post.",
    "publishedAt": "2021-11-19T21:28:59Z",
    "url": "https://youtu.be/Z5i60En_33A"
  },
  {
    "videoId": "Ke5Pf6IISn8",
    "title": "Use cypress-recurse Plugin To Confirm The Table Gets Sorted Eventually",
    "description": "We are using the cypress-recurse https://github.com/bahmutov/cypress-recurse plugin to retry the entire Cypress chain of commands until the table is sorted by a column.\n\nWatch the previous video \"Paginated Table Example\" https://youtu.be/y5ujNKkmgI8 for the introduction to this example",
    "publishedAt": "2021-11-19T16:55:43Z",
    "url": "https://youtu.be/Ke5Pf6IISn8"
  },
  {
    "videoId": "y5ujNKkmgI8",
    "title": "Cypress.io Testing a Paginated Table Example",
    "description": "This video shows how to work with a paginated table, and how to verify the cells in a particular column are NOT sorted using chai-sorted plugin. Find the source code in the repo https://github.com/bahmutov/cypress-recurse Watch the next video \"Use cypress-recurse Plugin To Confirm The Table Gets Sorted Eventually\" https://youtu.be/Ke5Pf6IISn8\n\nTip: see the explanation behind map(parseInt) problem in the blog post https://glebbahmutov.com/blog/functional-js-interview-question/",
    "publishedAt": "2021-11-19T16:36:11Z",
    "url": "https://youtu.be/y5ujNKkmgI8"
  },
  {
    "videoId": "21MXha13qCU",
    "title": "Confirm The Table Is Sorted By A Column",
    "description": "In this video, I explain how to confirm that a table gets sorted by checking a column of dates. We need to write a single \"should(callback)\" function that extracts the inner text from each cell, then converts the strings into timestamps, and checks that the array is sorted. Find the full example at https://glebbahmutov.com/cypress-examples/recipes/sorted-list.html",
    "publishedAt": "2021-11-18T14:20:02Z",
    "url": "https://youtu.be/21MXha13qCU"
  },
  {
    "videoId": "4TLjsCmXZlM",
    "title": "Add Cypress GitHub Integration To A Repo Step By Step",
    "description": "In this video, I add Cypress GitHub Integration (https://on.cypress.io/github-integration) to connect Cypress Dashboard to GitHub Pull Requests and see the test results right in the PR comments and status checks. Find this project at https://github.com/bahmutov/cypress-examples and check out the pull requests there to see the Cypress comments.",
    "publishedAt": "2021-11-16T16:09:07Z",
    "url": "https://youtu.be/4TLjsCmXZlM"
  },
  {
    "videoId": "MLDsqBd_gVU",
    "title": "Introduction To cy-spok Plugin For Writing Powerful Assertions For Objects",
    "description": "This video shows how to use cy-spok https://github.com/bahmutov/cy-spok plugin (which is a wrapper around the https://github.com/thlorenz/spok assertion library) to write powerful assertions in Cypress tests. In a single shot you can confirm both the values inside an object, and other conditions, like a property should be a string, or a number larger than N, etc.\n\nWhenever the cy-spok assertion passes or fails, it outputs all relevant information to the Cypress Command Log, showing you precisely what the values were, and why the assertion might have failed. Check out a small usage example in https://github.com/bahmutov/vue-vuex-todomvc repo.",
    "publishedAt": "2021-11-15T20:41:14Z",
    "url": "https://youtu.be/MLDsqBd_gVU"
  },
  {
    "videoId": "-Jr9vLpa1Ak",
    "title": "Disable The Input Element Until The Application Is Ready To Avoid Flake",
    "description": "In my previous video \"Avoid Flake When Typing Into The Input Elements Using cypress-recurse\" https://youtu.be/aYX7OVqp6AE I have shown how to use the cypress-recurse plugin to re-type text into the input element if the application clears the field suddenly. This avoids the test flake, but the ultimate solution is to look at the application's code and figure out why it allows the user interaction before the application is ready. \n\nIn this video, I add the \"disabled\" attribute to the input element and remove it only after the application stops re-rendering and clearing the input. By removing the attribute, the application signals to the user and to the test runner, that it is ready to accept the user actions. Cypress commands like cy.clear and cy.type automatically wait for the input elements to be enabled before trying to clear them or to type characters.",
    "publishedAt": "2021-11-15T14:48:41Z",
    "url": "https://youtu.be/-Jr9vLpa1Ak"
  },
  {
    "videoId": "aYX7OVqp6AE",
    "title": "Avoid Flake When Typing Into The Input Elements Using cypress-recurse",
    "description": "In this video, an input element resets its value several times after the page loads, simulating an input element that re-renders at the start. The fast test runner does not know about the re-renders and keeps \"losing\" part of the input string when typing into the visible element. We can get around this problem by using cypress-recurse plugin - it can type, then check the result, and if the input's value is different from expected, the plugin clears it and tries again. Find the plugin and the example spec in the repo https://github.com/bahmutov/cypress-recurse\n\nI have also recorded a second video showing how to solve the flake in this application example for good, see \"Disable The Input Element Until The Application Is Ready To Avoid Flake\" https://youtu.be/-Jr9vLpa1Ak",
    "publishedAt": "2021-11-12T21:04:58Z",
    "url": "https://youtu.be/aYX7OVqp6AE"
  },
  {
    "videoId": "pz_orYM-7xM",
    "title": "Request A Specific Comment Using Text From The Page",
    "description": "If the page is showing an ID text, and you want to make a request to the backend API using that text, this video is for you. We grab the element's text, clean it up by removing all non-digit characters, convert the text into a number, then make a request to the backend API using the cy.request command. We then assert the properties of the response object. Find this recipe at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2021-11-12T15:42:49Z",
    "url": "https://youtu.be/pz_orYM-7xM"
  },
  {
    "videoId": "-4_Pg5eJD7g",
    "title": "Cypress vs cy Difference Explanation",
    "description": "In this video, I explain the different between the global objects \"cy\" and \"Cypress\". In short: \"cy\" sets and chains everything inside a test, while \"Cypress\" is a global static object that has properties and methods you can call at any point: inside a test, outside it, or even from the DevTools console. For more details, read the blog post tip: https://glebbahmutov.com/blog/cypress-tips-and-tricks/#difference-between-cy-and-cypress-globals",
    "publishedAt": "2021-11-11T15:00:54Z",
    "url": "https://youtu.be/-4_Pg5eJD7g"
  },
  {
    "videoId": "qkofPocd7lY",
    "title": "Test Each URL From Sitemap In Its Own Separate Cypress Test",
    "description": "In the previous video \"Check Sitemap And Verify Every URL Using Cypress.io\" https://youtu.be/QIuAcJO1klg I have shown how to fetch sitemap.xml and verify each URL. In this video, I fetch the sitemap.xml and generate a separate test for each URL to be verified separately. Find the source code at https://github.com/bahmutov/vuepress-cypress-test-example and the cypress-each plugin at https://github.com/bahmutov/cypress-each",
    "publishedAt": "2021-11-10T16:20:54Z",
    "url": "https://youtu.be/qkofPocd7lY"
  },
  {
    "videoId": "QIuAcJO1klg",
    "title": "Check Sitemap And Verify Every URL Using Cypress.io",
    "description": "We can request the sitemap file, parse XML response, and then check if every listed URL is valid using Cypress test. Find the full source code in the repo https://github.com/bahmutov/vuepress-cypress-test-example. Watch the next part of this demo in the video \"Test Each URL From Sitemap In Its Own Separate Cypress Test\" at https://youtu.be/qkofPocd7lY",
    "publishedAt": "2021-11-10T15:50:28Z",
    "url": "https://youtu.be/QIuAcJO1klg"
  },
  {
    "videoId": "4YMAERddHYA",
    "title": "Debug cypress-grep Plugin",
    "description": "This video teaches you how to debug cypress-grep not behaving as you expect it to behave.\n1: check the \"env\" object\n2: enable debug messages in the browser\n3: enable debug messages in the terminal\n\nFor more, see the debugging section in the README file https://github.com/cypress-io/cypress-grep",
    "publishedAt": "2021-11-09T16:06:02Z",
    "url": "https://youtu.be/4YMAERddHYA"
  },
  {
    "videoId": "BbxjeXmIUeo",
    "title": "Confirm The Text On The Page Changes After A Click",
    "description": "In this video, I explain how to confirm that a value on the page (like the text of a particular element) changes when the user clicks on the button. We know neither the original text nor the final text. We just confirm from the test that the value changes. Find the code at the https://glebbahmutov.com/cypress-examples site",
    "publishedAt": "2021-11-08T18:32:57Z",
    "url": "https://youtu.be/BbxjeXmIUeo"
  },
  {
    "videoId": "MSalZBsbsNQ",
    "title": "Define A Window Property To Access A Cypress Aliased Element (Advanced)",
    "description": "This video shows how to abstract accessing an element via cy.get(aliasName) by defining a window object property with a getter method. The test looks like it is using \"normal\" variables, but each access calls the \"cy.get\" command under the hood. \n\n// create an aliased element\ncy.contains('button[role=tab]', 'Page 1').as('page1')\n// magic!\n// use \"page1\" to operate on the element\npage1.should('have.attr', 'aria-selected', 'true')\n\nFind the code in the repo https://github.com/bahmutov/emulate-navigation-allow-stopping-pure-css-native-js",
    "publishedAt": "2021-11-05T13:59:26Z",
    "url": "https://youtu.be/MSalZBsbsNQ"
  },
  {
    "videoId": "UNSCLtoHfgk",
    "title": "Search Part Of The List",
    "description": "In this video, I show how to take the entire list with multiple items, find a particular item, and then return a part of the list. We can then search that part for something specific. I use Lodash commands to work with jQuery objects (_.findIndex, _.slice), and you can find the shown recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-11-05T13:40:08Z",
    "url": "https://youtu.be/UNSCLtoHfgk"
  },
  {
    "videoId": "eBrUo8zDVXI",
    "title": "Use Cypress Aliases Created With cy.as Command to Access The Page Elements",
    "description": "This video shows how to abstract working with page elements by storing a reference to them using the cy.as command. Later we can access that element using the cy.get command and passing the alias name\n\n// creating an alias\ncy.contains('button[role=tab]', 'Page 1').as('page1')\n// using an element alias\ncy.get('@page1').should('have.attr', 'aria-selected', 'true')\n\nWe can refactor the aliases to be page objects, as shown in the video. Find the full source code in repo https://github.com/bahmutov/emulate-navigation-allow-stopping-pure-css-native-js",
    "publishedAt": "2021-11-04T13:05:35Z",
    "url": "https://youtu.be/eBrUo8zDVXI"
  },
  {
    "videoId": "7_gx2yp9oeE",
    "title": "Make The Test Faster Using cy.clock And cy.tick Commands",
    "description": "If the application uses a setTimeout or other time-related functions, you can speed it up by controlling the application's clock using the Cypress test commands cy.clock (to freeze the application's clock) and manually advance it instantly using cy.tick(ms) command. In our example test, we speed up the loading from 2 or 10 seconds to be almost instant. Find the example test in the repo https://github.com/bahmutov/emulate-navigation-allow-stopping-pure-css-native-js",
    "publishedAt": "2021-11-04T13:02:15Z",
    "url": "https://youtu.be/7_gx2yp9oeE"
  },
  {
    "videoId": "ccgBkageKB0",
    "title": "Test The Loading Element With Cancel Feature",
    "description": "In this video, I show how to test a page where the user can transition from state to state. The loading element that appears during the transition has an extra feature: if the user clicks on it, the transition is canceled. We confirm using the tests that the cancel works correctly. Find the source code in the repo https://github.com/bahmutov/emulate-navigation-allow-stopping-pure-css-native-js",
    "publishedAt": "2021-11-03T15:08:52Z",
    "url": "https://youtu.be/ccgBkageKB0"
  },
  {
    "videoId": "EIbSzT6QSxc",
    "title": "Cypress-highlight Plugin Introduction",
    "description": "This video shows https://github.com/bahmutov/cypress-highlight plugin that allows you to see which elements on the page have good data attributes for selecting elements during Cypress tests.",
    "publishedAt": "2021-11-01T18:15:31Z",
    "url": "https://youtu.be/EIbSzT6QSxc"
  },
  {
    "videoId": "jAU4dLRXVIA",
    "title": "Create High Resolution Videos And Screenshots In Cypress Using This Plugin",
    "description": "By using the https://github.com/bahmutov/cypress-high-resolution you can easily resize the browser window and generate super high resolution (like 4k) videos of your Cypress tests. As long as your machine is capable of it, the videos and screenshots can capture a lot of details.",
    "publishedAt": "2021-10-29T14:12:11Z",
    "url": "https://youtu.be/jAU4dLRXVIA"
  },
  {
    "videoId": "pHzroBFY5V0",
    "title": "Add A Red Border Around Elements That Have data-cy Attribute",
    "description": "By adding the red border around the elements that have data-cy attribute, we can highlight the elements that are selectable during Cypress.io test. To avoid modifying the production CSS resource, we intercept the css/style.css resource using cy.intercept command and append the additional style to the server's response. To avoid receiving 304 \"use cached resource\" from the server, we delete the caching headers on the request to the server. Find the source code in the repo https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-10-29T12:55:52Z",
    "url": "https://youtu.be/pHzroBFY5V0"
  },
  {
    "videoId": "CtU43GzaicI",
    "title": "Run All Tests That Have No Tags Using cypress-grep Plugin",
    "description": "This video shows how to execute all tests that have no tags using cypress-grep plugin using \"grepUntagged=true\" option. I also show how to create a GitHub Actions job to run all untagged tests after parallel jobs running the specific tags. Find the plugin at https://github.com/cypress-io/cypress-grep and the shown source code at https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-10-28T13:50:12Z",
    "url": "https://youtu.be/CtU43GzaicI"
  },
  {
    "videoId": "44kkiCa7VJk",
    "title": "Implementing File Grep Extension To Cypress-Grep Plugin Using Cypress Config",
    "description": "In this video, I explain how to use the Cypress config object to change what specs it runs. We will use the configuration object to discover the specs ourselves, then filter them to only leave the specs that have a specific text in the title using the https://github.com/bahmutov/find-test-names utility. We set the filtered list of spec names as \"config.testFiles\" property allowing the cypress-grep plugin to deal with just those specs during the run. Find the cypress-grep plugin at https://github.com/bahmutov/find-test-names\n\nI have mentioned in the video my blog about Cypress test statuses: https://glebbahmutov.com/blog/cypress-test-statuses/",
    "publishedAt": "2021-10-27T13:30:24Z",
    "url": "https://youtu.be/44kkiCa7VJk"
  },
  {
    "videoId": "0SgRYcJACjM",
    "title": "Interactive Cypress Skills Form",
    "description": "This video shows the interactive Cypress skills form hosted at https://cypress.tips/skills You can use this form for self-evaluation or while interviewing a candidate for a job position that requires writing Cypress tests. You can even copy the filled information and paste it into your recruitment system or share it by email. For more, read the blog post https://glebbahmutov.com/blog/cypress-skills-ladder/",
    "publishedAt": "2021-10-26T13:16:05Z",
    "url": "https://youtu.be/0SgRYcJACjM"
  },
  {
    "videoId": "NdeHg0u8Wro",
    "title": "Stub window.prompt Method From Cypress",
    "description": "Using cy.stub we can stub the call to the window.prompt method, and return a test value. Then the video shows how to confirm the application receives that test value and calls the window.alert correctly. Find the test code in the https://github.com/bahmutov/cypress-examples repo",
    "publishedAt": "2021-10-25T13:40:31Z",
    "url": "https://youtu.be/NdeHg0u8Wro"
  },
  {
    "videoId": "wnFLb04iJp8",
    "title": "Stub window.alert From The Cypress Test",
    "description": "This video explains how to stub the window.alert method calls made by the application. The Cypress test can then confirm the details of the call. Find the example source code in the repo https://github.com/bahmutov/cypress-examples",
    "publishedAt": "2021-10-25T13:30:13Z",
    "url": "https://youtu.be/wnFLb04iJp8"
  },
  {
    "videoId": "ujJVl5blk1g",
    "title": "Use GraphQL Cypress.io Stub With The Times Parameter To Return A Different Fixture On Each Call",
    "description": "In this video, I. respond to a question that asked how to efficiently intercept and mock GraphQL calls that all go through the same endpoint, but return a different fixture file on a different call. For example, return fixture A on the first call to operation Z, then return fixture B on the second call to the same operation Z, etc. Find the full source code in the repo https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-10-23T18:07:47Z",
    "url": "https://youtu.be/ujJVl5blk1g"
  },
  {
    "videoId": "KHn7647xOz8",
    "title": "Use cypress-recurse To Scroll The Page Until It Loads The Text We Are Looking For",
    "description": "In this video, I use cypress-recurse function to keep scrolling the page until we find the word \"debug\". We yield that found quote and highlight it. The same technique can be used to find an element on the paginated sites, or when the content changes on reload. Find the plugin at https://github.com/bahmutov/cypress-recurse and the example test at",
    "publishedAt": "2021-10-22T13:46:17Z",
    "url": "https://youtu.be/KHn7647xOz8"
  },
  {
    "videoId": "918BqmTa-w4",
    "title": "Testing The Infinite Scroll With Cypress",
    "description": "In this video, I confirm the infinite scroll fetches the items as I scroll to the bottom of the page. Different tests confirm the loading element appears and disappears, the number of items gets incremented correctly, the backend API is called, and that the user can get back to the top of the page by clicking the \"Back to Top\" element. Find the source code at https://github.com/bahmutov/infinite-scroll-quotes",
    "publishedAt": "2021-10-20T19:30:15Z",
    "url": "https://youtu.be/918BqmTa-w4"
  },
  {
    "videoId": "E6P_rBt6caU",
    "title": "Prepare Intercept And Wait Using cypress-network-idle Plugin",
    "description": "In this video, I start listening to the network calls before the action that triggers them occurs. This gives the cypress-network-idle plugin an accurate view of the requests that are in flight or already finished. Find the plugin at https://github.com/bahmutov/cypress-network-idle",
    "publishedAt": "2021-10-19T19:56:48Z",
    "url": "https://youtu.be/E6P_rBt6caU"
  },
  {
    "videoId": "adHjTf5j6uE",
    "title": "Cypress-network-idle plugin",
    "description": "This video introduces the cypress-network-idle plugin that can wait for the network activity to stop before continuing the test. Find the plugin at https://github.com/bahmutov/cypress-network-idle",
    "publishedAt": "2021-10-18T20:13:29Z",
    "url": "https://youtu.be/adHjTf5j6uE"
  },
  {
    "videoId": "utPKRV_fL1E",
    "title": "Using cypress-each To Create Separate Tests",
    "description": "In this video, I refactor a test to create independent data-driven tests using cypress-each plugin. Find the plugin at https://github.com/bahmutov/cypress-each For more information read the blog post https://glebbahmutov.com/blog/dynamic-api-tests-using-cypress-each/",
    "publishedAt": "2021-10-14T13:13:07Z",
    "url": "https://youtu.be/utPKRV_fL1E"
  },
  {
    "videoId": "DnmnzemS_HA",
    "title": "Refactor Common Command Repetition in Cypress Test",
    "description": "In this test, we will refactor repeated Cypress commands into a \"forEach\" loop. Each iteration will get the elements and check if they are visible. For more, see the tests in https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2021-10-13T16:45:29Z",
    "url": "https://youtu.be/DnmnzemS_HA"
  },
  {
    "videoId": "G5CtE_LBIno",
    "title": "Using Cyclope Visual Testing Plugin With realHover Command",
    "description": "We can generate accurate and consistent application screenshots using the cyclope plugin (at https://github.com/bahmutov/cyclope), even if there is a hover state. The generated PNG images then can be used with any image-diffing service to check if the application data or styles have changed.",
    "publishedAt": "2021-10-06T20:05:35Z",
    "url": "https://youtu.be/G5CtE_LBIno"
  },
  {
    "videoId": "7ipCvJQixI0",
    "title": "Introduction To cypress-data-session Plugin",
    "description": "Create the test data only when necessary in a TodoMVC GraphQL example application. Invalidate the data session from a test that changes the server data. See the full code in the repo https://github.com/bahmutov/todo-graphql-example and use the plugin https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2021-10-06T17:53:19Z",
    "url": "https://youtu.be/7ipCvJQixI0"
  },
  {
    "videoId": "XIaA8k7TOA4",
    "title": "Load Global Cypress Types In VSCode Using jsconfig.json File",
    "description": "We can tell VSCode to load Cypress TypeScript definition and apply it to the global \"cy\" and \"Cypress\" objects. This lets the editor show intellisense warnings and type check our Cypress specs. To do this for all JavaScript spec files at once we can use jsconfig.json file (see https://code.visualstudio.com/docs/languages/jsconfig) in the cypress folder. Find the example source code in the repo https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-10-06T16:29:11Z",
    "url": "https://youtu.be/XIaA8k7TOA4"
  },
  {
    "videoId": "0KTGc83wSoA",
    "title": "Quickly Create A User And Log in Using Dependent Data Sessions",
    "description": "Let's say you need to create a user and log in. Do you recreate the user before each test? No, you use cy.dataSession from the cypress-data-session plugin to only create the user if needed. How do you log in? You use another cy.dataSession to execute the commands, and cache the session cookie. And the final step: if the user data session is invalidated, and the user is recreated, then the cookie data session is automatically invalidated using the \"dependsOn\" parameter linking the second data session to the first one. See the full source code in https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-10-05T21:27:09Z",
    "url": "https://youtu.be/0KTGc83wSoA"
  },
  {
    "videoId": "HaX2VREEgYs",
    "title": "Testing Custom WebComponent With Shadow DOM",
    "description": "In this example, I show how Cypress can access the elements inside the Shadow DOM of a custom \"Tasty Toaster\" WebComponent. We will use cy.within command and cy.root command and custom timeouts.",
    "publishedAt": "2021-10-05T15:54:33Z",
    "url": "https://youtu.be/HaX2VREEgYs"
  },
  {
    "videoId": "fy4qYGK690Q",
    "title": "Nodemon And cypress-watch-and-reload Utilities",
    "description": "In this video, I show how I typically set up file watch for my projects during the local development. Utility nodemon https://nodemon.io/ watches the server code and restarts my server on file changes. Cypress plugin cypress-watch-and-reload https://github.com/bahmutov/cypress-watch-and-reload watches the frontend source files and re-runs the Cypress tests on any changes (Cypress already re-runs the tests automatically on spec file changes).\n\nSee the project at https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-10-01T20:00:04Z",
    "url": "https://youtu.be/fy4qYGK690Q"
  },
  {
    "videoId": "PTlcRBgFJaM",
    "title": "Use cy.dataSession To Create A User And Log In",
    "description": "In this example, I am using the plugin https://github.com/bahmutov/cypress-data-session to create a user if necessary, and then log in. The data session can store all sorts of data, including the user and the browser cookies, and I show in this video how the cy.dataSession can finish the login step after validating the stored user.\n\nFind the full source code in https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-30T18:15:31Z",
    "url": "https://youtu.be/PTlcRBgFJaM"
  },
  {
    "videoId": "ws4TitQJ7fQ",
    "title": "Share Data Across Specs Using cypress-data-session Plugin",
    "description": "This video shows how to use the \"shareAcrossSpecs\" parameter to cache the computed data not just in the current browser spec, but in the Cypress plugin process. This storage is persistent across browser reloads and different specs. Thus a database item created in one spec can be reused from another spec, speeding up the tests.\n\nSee the source code in https://github.com/bahmutov/chat.io and the plugin in https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2021-09-30T13:32:44Z",
    "url": "https://youtu.be/ws4TitQJ7fQ"
  },
  {
    "videoId": "SyDz6l_EFoc",
    "title": "Invalidate cy.session From cypress-data-session",
    "description": "In this video, I use a combination of cy.dataSession and cy.session and if the data needs to be recomputed, we invalidate all saved Cypress sessions to have the user account log in again with the recomputed user.\n\nSee the source in https://github.com/bahmutov/chat.io and the plugin code in https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2021-09-29T19:25:09Z",
    "url": "https://youtu.be/SyDz6l_EFoc"
  },
  {
    "videoId": "P-sb5OHSNsM",
    "title": "Create User Using cypress-data-session Command",
    "description": "We can use multiple cy.dataSession commands to conditionally create separate pieces of data. In this video, I use the command to create the user, if the user is invalid or missing. Find the full test code in https://github.com/bahmutov/chat.io and the plugin code in https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2021-09-29T14:39:36Z",
    "url": "https://youtu.be/P-sb5OHSNsM"
  },
  {
    "videoId": "VQtjDGCuRzI",
    "title": "Use Data Alias Created Automatically By cypress-data-session",
    "description": "You can access the cached data yielded by the setup function via an alias. This alias is created by cypress-data-session automatically. Find the full example code in https://github.com/bahmutov/chat.io and the plugin itself in https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2021-09-29T14:20:47Z",
    "url": "https://youtu.be/VQtjDGCuRzI"
  },
  {
    "videoId": "As5yqkoZOx8",
    "title": "Introduction to cypress-data-session package",
    "description": "This video shows the cypress-data-session package that abstracts setting up the test data. We need to provide the data setup function and the data validation methods, and this custom command cy.dataSession takes care of the rest. The setup runs only if the data is not there already, or if the validation function returns false. This speeds up the test a lot, since you no longer need to unnecessarily recreate the data from scratch.\n\nPlugin code: https://github.com/bahmutov/cypress-data-session\nExample spec: https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-29T14:07:50Z",
    "url": "https://youtu.be/As5yqkoZOx8"
  },
  {
    "videoId": "1SOn8NbZF4o",
    "title": "Use cy.session Command To Prepare Test Data But Only When Needed",
    "description": "In this video, I show how to use the Cypress command cy.session to prepare the test data. Then we use the \"validate\" option to run Cypress commands to tell the cy.session if the test data needs to be recreated again. This makes the test both fast and convenient. If the validate function passes, the data is still valid and does not need to be re-created. If the validate function returns false, or fails an assertion, the cy.session recreates the data.\n\nFind the full source code in the repository https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-28T17:56:34Z",
    "url": "https://youtu.be/1SOn8NbZF4o"
  },
  {
    "videoId": "Wk4l8p9JQNA",
    "title": "Connect And Send Socket Messages From Cypress Test",
    "description": "In this video, we connect to the Socket.io backend server from the Cypress test and send the \"make new room\" message. Then we check if the first connection from the application shows the created room and visit it. This proves that acting as another user from the test is possible. Find the full code in the repo https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-27T20:03:56Z",
    "url": "https://youtu.be/Wk4l8p9JQNA"
  },
  {
    "videoId": "EKq7RC_uNsA",
    "title": "Use cy.request Command To Create A User And Log in",
    "description": "We can avoid using the page user interface to register a new user and to log in an existing user. Instead, a much faster test can use cy.request command to mimic form submissions. It also sets and sends all necessary cookies, thus no need to call cy.visit. Find the full source code in the repo https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-27T19:44:31Z",
    "url": "https://youtu.be/EKq7RC_uNsA"
  },
  {
    "videoId": "EXVwvJrUGJ8",
    "title": "Dynamic Tests From Cypress.io Fixture File",
    "description": "This video shows how you can import a JSON fixture file into the Cypress spec and create a separate test for each data item. This allows you to clearly separate the data from the test logic while creating multiple tests. For details, read the blog post https://glebbahmutov.com/blog/dynamic-tests-from-fixture/ and see the full source code in the repo https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-27T16:02:00Z",
    "url": "https://youtu.be/EXVwvJrUGJ8"
  },
  {
    "videoId": "tjK_FCYikzI",
    "title": "Time Part Of A Cypress Test Or A Single Command",
    "description": "By taking timestamps around part of a Cypress test, we can confirm that the application performs a certain action within a certain time limit. Find the full source code in the repo https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2021-09-27T14:15:06Z",
    "url": "https://youtu.be/tjK_FCYikzI"
  },
  {
    "videoId": "QiaphZibZsE",
    "title": "Use Docker Compose To Run Application Locally And On GitHub Actions",
    "description": "In this video, we are using docker-compose to run Redis and MongoDB containers locally. Our application then connects to those services using exposed ports and environment variables injected using as-a utility. We can run the same docker-compose command on GitHub Actions CI to run the services, and then start the application and run Cypress tests using cypress-io/github-action code.\n\n- as-a utility https://github.com/bahmutov/as-a\n- source code for the app https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-24T16:36:25Z",
    "url": "https://youtu.be/QiaphZibZsE"
  },
  {
    "videoId": "h-pXOjgZG24",
    "title": "Use MongoDB From The Plugin File Or Call Task From DevTools Console",
    "description": "In this video, I show how to connect to the MongoDB instance from the Cypress plugin file using the application code. Once we wrote the task to clear the rooms, we can call this task before each test to start from nothing. I also show how to use the super low-level cy.now command to call a task yourself from the DevTools Console. This lets you explore the application and perform actions right from the browser running the Cypress tests. Find the full source code in https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-24T16:12:18Z",
    "url": "https://youtu.be/h-pXOjgZG24"
  },
  {
    "videoId": "vsH2SESJuik",
    "title": "Wait For jQuery slideDown Animation To Finish",
    "description": "In this video, I show how to wait for the JavaScript animation to finish before continuing with the test. The element slides down, using the style attribute to change its position. We can check if the element is visible and has an empty style attribute using Cypress assertions, before the test continues. Find the full source code in the application https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-23T22:25:17Z",
    "url": "https://youtu.be/vsH2SESJuik"
  },
  {
    "videoId": "f2n6cZVMS34",
    "title": "Detect Document Reload",
    "description": "Here is a nice little trick that is useful when submitting the forms, or when the application reloads. Make the Cypress test wait until the reload happens by checking the document reference.\n\ncy.document().then(function (doc) {\n  cy.contains('button', 'create').click()\n  cy.document().should(function (d) {\n    assert(d !== doc, 'document changed')\n  })\n})\n\nSee more tricks like this in https://glebbahmutov.com/blog/cypress-tips-and-tricks/",
    "publishedAt": "2021-09-22T16:25:02Z",
    "url": "https://youtu.be/f2n6cZVMS34"
  },
  {
    "videoId": "DlGQEQ2q35w",
    "title": "Introduction to cy.session command",
    "description": "In this video, I replace beforeEach hook with beforeEach + cy.session callback that creates todos and stores them in the local storage. Each test after that starts almost instantly because the session restores the local storage, the application reads the todos, and is ready to continue testing. Find the command documentation at https://on.cypress.io/session and the source code from my example in https://github.com/bahmutov/cyclope",
    "publishedAt": "2021-09-21T15:40:30Z",
    "url": "https://youtu.be/DlGQEQ2q35w"
  },
  {
    "videoId": "mmKOSQxQwEU",
    "title": "Test Dragging Items",
    "description": "In this video, we will drag an item by dispatching custom events to the right elements. Then we will confirm the correct updated order by checking the localStorage where the application writes the updated list. Find the source code in https://github.com/bahmutov/cyclope",
    "publishedAt": "2021-09-21T13:12:08Z",
    "url": "https://youtu.be/mmKOSQxQwEU"
  },
  {
    "videoId": "KZqYqsjgKco",
    "title": "Use LocalStorage From Cypress Test To Set Initial Data",
    "description": "We can set the initial data to be read by the application by using localStorage from the Cypress test. We can then verify the application shows that data correctly. If we interact with the page, we can confirm the localStorage is updated. Find the full source code in https://github.com/bahmutov/cyclope",
    "publishedAt": "2021-09-21T12:52:34Z",
    "url": "https://youtu.be/KZqYqsjgKco"
  },
  {
    "videoId": "yt5eVUOxf_0",
    "title": "Cyclope: Save A Full Page With Styles If A Cypress Test Fails",
    "description": "One can save the full page DOM snapshot using the utility https://github.com/bahmutov/cyclope It uses Cypress DOM utility to extract static HTML with CSS and other resources but without any JavaScript. You can save such pages automatically if a test fails and store them on CI as test artifacts. Then you can inspect the page to understand its structure - and this is a nice addition to the Cypress images and videos.",
    "publishedAt": "2021-09-20T22:25:01Z",
    "url": "https://youtu.be/yt5eVUOxf_0"
  },
  {
    "videoId": "sG_ulvTKJzw",
    "title": "Conditionally Clear Items In A Cypress Test",
    "description": "In this example, we clear the items in the application by clicking the delete button on each item. But we have to be careful about writing this test to avoid the default assertions built inside Cypress commands like cy.get. \n\ncy.visit('/').wait(100)\n\ncy.get('.todo')\n  .should('have.length.gte', 0)\n  .then(function ($todos) {\n    if (!$todos.length) {\n      cy.log('nothing to delete')\n      return\n    }\n    cy.wrap($todos)\n      .find('.destroy')\n      .click({ force: true, multiple: true })\n  })\n\n// confirm there are no items\ncy.get('.todo', { timeout: 100 }).should('have.length', 0)\n\nSee the full source code in https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2021-09-20T12:59:02Z",
    "url": "https://youtu.be/sG_ulvTKJzw"
  },
  {
    "videoId": "raWgcTzPAww",
    "title": "Use Cypress Aliases Set Inside The beforeEach and before Hooks",
    "description": "We can conveniently avoid the pyramid of Doom of .then callbacks by using \"beforeEach\" hook to fetch our data. We can also fetch or prepare the data once using the \"before\" hook, but then we need to recreate the aliases from that data value using \"beforeEach\" hooks. See more details in https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2021-09-18T17:18:00Z",
    "url": "https://youtu.be/raWgcTzPAww"
  },
  {
    "videoId": "-aptS3yvqcc",
    "title": "When To Use Cypress .Then Callback To Use The Value",
    "description": "Often, people ask when they should use .then callback in Cypress tests. This video answers it: when you are using a value from the application page, or from the application server, or from another Cypress command, you must use .then to have this value.\n\nFind more details in https://github.com/bahmutov/cypress-workshop-basics and read https://docs.cypress.io/guides/core-concepts/introduction-to-Cypress#Commands-Are-Asynchronous Also watch the video \"Why cy.log sometimes prints nothing\" https://www.youtube.com/watch?v=uGWWoq0ECY8",
    "publishedAt": "2021-09-18T17:16:15Z",
    "url": "https://youtu.be/-aptS3yvqcc"
  },
  {
    "videoId": "XadOqS0YNJE",
    "title": "Directly Spying on GraphQL Calls Made By The Application",
    "description": "In this video, I show how to directly spy on the GraphQL client method calls like \"client.mutate\" made by the application. Find the source in the repo https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-17T13:47:07Z",
    "url": "https://youtu.be/XadOqS0YNJE"
  },
  {
    "videoId": "CBQdo-22jzQ",
    "title": "Call API Using cy.request To Create Data For The Test",
    "description": "In this example (coming from https://github.com/bahmutov/cypress-workshop-basics) I am using the cy.request command and Lodash methods to create items on the server before visiting the page. This creates the data much faster than using the page itself to post new Todo items.",
    "publishedAt": "2021-09-17T13:20:43Z",
    "url": "https://youtu.be/CBQdo-22jzQ"
  },
  {
    "videoId": "l7E7K7x7V8g",
    "title": "Delete All Items Using GraphQL Client As Part Of Cypress Test",
    "description": "In this video, I am fetching all items using the Apollo GraphQL client. Then I call a mutation operation to delete each item one by one. Find the full source code in https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-16T13:38:51Z",
    "url": "https://youtu.be/l7E7K7x7V8g"
  },
  {
    "videoId": "IxgWmzy26gM",
    "title": "Stub The Initial Data Load Using A Fixture",
    "description": "When the application fetches all todos at the start, we can use a fixture to respond with the same list of items. This video is a good example of stubbing a GraphQL network call using cy.intercept and returning a fixture. We then check the number of items, including filtering the elements using the cy.not command and jQuery \":not\" selector. Find the full code in https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-15T19:21:49Z",
    "url": "https://youtu.be/IxgWmzy26gM"
  },
  {
    "videoId": "6ykTS40_scM",
    "title": "Use Application GraphQL Client To Make Calls From The Cypress Test",
    "description": "In this video, instead of cy.request, we use the application's GraphQL client helper to make calls from the Cypress test. Find the full source code in https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-15T18:32:58Z",
    "url": "https://youtu.be/6ykTS40_scM"
  },
  {
    "videoId": "ubnJ9kWD1yQ",
    "title": "Add A New Item By Making GraphQL Call Using cy.request Command",
    "description": "In this video, I am making a GraphQL call from the Cypress test using the cy.request command. Then I verify that the new item has been added. Find the full spec in the repo https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-15T17:45:55Z",
    "url": "https://youtu.be/ubnJ9kWD1yQ"
  },
  {
    "videoId": "AcU5mkedchM",
    "title": "Set GraphQL Operation Name As Custom Header And Use It In cy.intercept",
    "description": "This video shows how to set the graphql operation name as a custom request header, and then use cy.intercept command to match the requests using this header. Find the full code in https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-15T14:55:50Z",
    "url": "https://youtu.be/AcU5mkedchM"
  },
  {
    "videoId": "jN1vsGGXAjw",
    "title": "Set GraphQL Network Intercept Alias",
    "description": "We can set an alias using cy.intercept by inspecting the GraphQL request body object. For example, we could use the operation name property as an alias. Then our test can wait for that specific network call and confirm the request and response data. Find the full source code in the https://github.com/bahmutov/todo-graphql-example repo",
    "publishedAt": "2021-09-15T14:40:02Z",
    "url": "https://youtu.be/jN1vsGGXAjw"
  },
  {
    "videoId": "QA_moq_Yh5M",
    "title": "Toggle Todo When Using GraphQL Calls",
    "description": "This example Cypress.io test from https://github.com/bahmutov/todo-graphql-example shows how to spy on the GraphQL query and then confirm the page classes are set correctly.",
    "publishedAt": "2021-09-15T13:15:49Z",
    "url": "https://youtu.be/QA_moq_Yh5M"
  },
  {
    "videoId": "HGju0gZdZ6o",
    "title": "Overlapping Elements",
    "description": "In this video, I show how to get several DOM elements and then check if they are overlapping on the page. We are going to use the element's getBoundingClientRect method to get the rectangles, and then a small utility function to check if a pair of elements are overlapping. You can find the full source code at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-09-13T14:01:59Z",
    "url": "https://youtu.be/HGju0gZdZ6o"
  },
  {
    "videoId": "RAFdYqRO2vI",
    "title": "Mock ES6 Module From Cypress E2E Test",
    "description": "In this video, I show how without modifying the application code we can replace a module inside a Webpack dev bundle with a mock value or code. We will replace a named method that generates a Sudoku board, and then we will replace a Timer component with a different React component during the test. For more, see https://github.com/bahmutov/mock-in-bundle utility (this is still alpha-alpha-alpha work) and the demo repo https://github.com/bahmutov/sudoku-mock-module\n\nFollow my blog https://glebbahmutov.com/blog/ where I plan to describe how this utility works in detail.",
    "publishedAt": "2021-09-03T15:45:03Z",
    "url": "https://youtu.be/RAFdYqRO2vI"
  },
  {
    "videoId": "qDn-segvIhw",
    "title": "Cypress DOM Snapshot To Static HTML File",
    "description": "In this video, I show how to take DOM snapshots you can create using Cypress utility code, clean them up, and save them as a static HTML file.\nSee video https://youtu.be/pKi6nUMw6Tc for how the snapshot creation works.",
    "publishedAt": "2021-08-26T19:15:58Z",
    "url": "https://youtu.be/qDn-segvIhw"
  },
  {
    "videoId": "zRAjO6rccfI",
    "title": "Spy On Console Method From Component Tests",
    "description": "When using Cypress Component Testing https://on.cypress.io/component-testing you can stub console methods like console.error - and it is easier than you think. Components run in the same JavaScript context as the spec itself, thus you can directly stub \"console.error\" - it is the same console object in the spec as is in the component!\n\ncy.stub(console, 'error').as('consoleError')\nmount(your component)\ncy.get('@consoleError').should('have.been.calledOnce')",
    "publishedAt": "2021-08-26T15:36:25Z",
    "url": "https://youtu.be/zRAjO6rccfI"
  },
  {
    "videoId": "CMOjrKoBBwc",
    "title": "How To Avoid Element Detached From DOM Error",
    "description": "In this video, I go through a Cypress test that gets the dreaded \"element is detached from the DOM\" error. This example is provided in the issue https://github.com/cypress-io/cypress/issues/9032 which is linked from the main issue https://github.com/cypress-io/cypress/issues/7306\n\nI explain why the problem happens and 3 different ways to solve it. The takeaway is to tell the test runner to wait for the application to finish doing whatever it is doing before the test proceeds. \n\nThis particular situation was described in the blog post https://cypress.io/blog/2020/11/17/when-can-the-test-submit-a-form/ and you can find similar bog posts for other situations under the tag https://cypress.io/blog/tag/flake/ For more info on how to minimize flake in your tests, read the Cypress retry-ability guide https://on.cypress.io/retry-ability",
    "publishedAt": "2021-08-25T21:47:40Z",
    "url": "https://youtu.be/CMOjrKoBBwc"
  },
  {
    "videoId": "HC0T9aEO6yM",
    "title": "Test A Downshift.js Dropdown Using Keyboard",
    "description": "The example comes from https://github.com/bahmutov/cypress-downshift-examples where we test the basic select widget using keyboard events only while checking the selection options.",
    "publishedAt": "2021-08-25T19:10:48Z",
    "url": "https://youtu.be/HC0T9aEO6yM"
  },
  {
    "videoId": "0lnOnO84nvY",
    "title": "Testing A Basic Downshift.js Dropdown Example",
    "description": "An example from https://github.com/bahmutov/cypress-downshift-examples where I test the basic dropdown created using Downshift.js library https://www.downshift-js.com/",
    "publishedAt": "2021-08-25T18:31:05Z",
    "url": "https://youtu.be/0lnOnO84nvY"
  },
  {
    "videoId": "bbJ2ygOOZ4c",
    "title": "Confirm The List Of Items Is Sorted By Price",
    "description": "This video shows how to extract all elements that show the price number, convert them into actual floats, and then check that they are listed in the sorted order from the smallest price to the largest.\n\nYou can find this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-08-25T18:03:55Z",
    "url": "https://youtu.be/bbJ2ygOOZ4c"
  },
  {
    "videoId": "RaKbf1c2-9o",
    "title": "Scrape Reveal.js Slides Using Cypress Test Runner Into Algolia",
    "description": "In this video, I show the scraper for my slides.com https://slides.com/bahmutov Reveal.js decks. The scraper uses Cypress.io to browse the slides (see video https://www.youtube.com/watch?v=oq2P1wtIZYY explaining how all slides are visited), then transforms the individual headings, paragraphs, and list items into Algolia record to be uploaded. You can read the step-by-step instructions in the blog post \"Scrape Slides\" at https://glebbahmutov.com/blog/scrape-slides/ and find the full source code at https://github.com/bahmutov/scrape-book-quotes Finally, you can search my Cypress-related presentations using the https://cypress.tips/search page.",
    "publishedAt": "2021-08-24T22:00:16Z",
    "url": "https://youtu.be/RaKbf1c2-9o"
  },
  {
    "videoId": "oq2P1wtIZYY",
    "title": "Browse Reveal.js Slides Using Cypress and cypress-recurse",
    "description": "By using https://github.com/bahmutov/cypress-recurse we can browse vertical and horizontal slides at slides.com (made using Reveal.js). In this video I create a new project, add Cypress and implement the browse test. Find the full source code in https://github.com/bahmutov/browse-slides",
    "publishedAt": "2021-08-17T19:27:27Z",
    "url": "https://youtu.be/oq2P1wtIZYY"
  },
  {
    "videoId": "UMtvmVgpZdU",
    "title": "Upgrading Cypress",
    "description": "In this video, I show upgrading the Cypress version from 8.2.0 to 8.3.0\n- the update is available button\n- the changelog shows if upgrade is worth it https://on.cypress.io/changelog\n- renovate bot (see my blog post https://glebbahmutov.com/blog/renovate-app/)",
    "publishedAt": "2021-08-16T20:11:40Z",
    "url": "https://youtu.be/UMtvmVgpZdU"
  },
  {
    "videoId": "UjGONGE3vws",
    "title": "Cypress Voice Transcription",
    "description": "In this video, I set up voice transcription using Cypress and Chrome browser, play the video, and get the transcript when the video finishes. See the full source code in https://github.com/bahmutov/video-example",
    "publishedAt": "2021-08-14T17:56:39Z",
    "url": "https://youtu.be/UjGONGE3vws"
  },
  {
    "videoId": "w5vZspiCiuQ",
    "title": "Test And Play Video From Cypress",
    "description": "From a Cypress test, we can find the video element, check its properties, invoke play, and wait for the video to finish playing. See the full code in https://github.com/bahmutov/video-example\n\nit('plays video', function () {\n  cy.visit('index.html')\n  // https://html.spec.whatwg.org/multipage/media.html#playing-the-media-resource\n  cy.get('video')\n    .should('have.prop', 'paused', true)\n    .and('have.prop', 'ended', false)\n    .then(function ($video) {\n      $video[0].play()\n    })\n  cy.get('video', { timeout: 10000 }).should('have.prop', 'ended', true)\n})\n\nFor more information, read the blog post https://glebbahmutov.com/blog/test-video-play/",
    "publishedAt": "2021-08-13T17:18:11Z",
    "url": "https://youtu.be/w5vZspiCiuQ"
  },
  {
    "videoId": "LV9Hm0cQ_lQ",
    "title": "Cypress And Promises",
    "description": "In this video, I explain how to create promises correctly during Cypress tests (because promises are eager), and how to make Cypress test wait for the promise to resolve using https://on.cypress.io/wrap and https://on.cypress.io/then The full code is below\n\nfunction delay(ms) {\n  console.log('delay start')\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      console.log('delay stop')\n      resolve(42)\n    }, ms)\n  })\n}\n\nit('delays by 2 seconds', function () {\n  cy.visit('/')\n    .then(function () {\n      // create the promise only after the visit\n      // has finished. Promises are eager\n      // so this promise starts running right away\n      // By returning it from the Cypress .then command\n      // you make Cypress wait for the promise to resolve\n      return delay(2000)\n    })\n    // the resolved value of the promise is passed\n    // to the assertion here\n    .should('eq', 42)\n})",
    "publishedAt": "2021-08-12T18:06:37Z",
    "url": "https://youtu.be/LV9Hm0cQ_lQ"
  },
  {
    "videoId": "IEtK3QOMHYc",
    "title": "Cypress.tips Search Page",
    "description": "From a single page https://cypress.tips/search you can search my Cypress blog posts, my code examples, and even the official Cypress.io documentation.",
    "publishedAt": "2021-08-12T17:37:33Z",
    "url": "https://youtu.be/IEtK3QOMHYc"
  },
  {
    "videoId": "GyjCGKzFjWA",
    "title": "Use Utility as-a To Load Multiple Secrets And Pass To Cypress",
    "description": "Using NPM module as-a https://github.com/bahmutov/as-a I load multiple environment variables and launch Cypress command. The variables are only available to Cypress process and are gone when it exits. This is a perfect way to use secrets in Cypress tests without exposing them to the outside world.",
    "publishedAt": "2021-08-11T19:19:25Z",
    "url": "https://youtu.be/GyjCGKzFjWA"
  },
  {
    "videoId": "33Hq41O0bvU",
    "title": "Stub Network Calls Made by Next.js App in getServerSideProps Method",
    "description": "This video shows how to run Next.js server inside Cypress plugin process. We can mock network calls using \"nock\" utility in this process and thus the app returns the expected results, even if the network call happens in the getServerSideProps function. For more details, read https://glebbahmutov.com/blog/mock-network-from-server/",
    "publishedAt": "2021-08-10T16:12:40Z",
    "url": "https://youtu.be/33Hq41O0bvU"
  },
  {
    "videoId": "mIyTBtUmmdE",
    "title": "Re-run Cypress Tests When Application Files Change",
    "description": "Using the plugin https://github.com/bahmutov/cypress-watch-and-reload we can watch the application's source files and re-run the tests on file save.",
    "publishedAt": "2021-08-09T18:38:18Z",
    "url": "https://youtu.be/mIyTBtUmmdE"
  },
  {
    "videoId": "Axr1Je9KKB8",
    "title": "How To Use PubSub From Cypress Test To Publish Events To Application",
    "description": "In this video, I show how to use the same PubSub from the Cypress test as the application uses. The test can deliver events to the application and then confirm the UI is updated correctly. Read the blog post https://glebbahmutov.com/blog/test-pubsub/",
    "publishedAt": "2021-08-06T17:46:28Z",
    "url": "https://youtu.be/Axr1Je9KKB8"
  },
  {
    "videoId": "Uo99lvfZLJQ",
    "title": "Testing DOM Events Sent to ref.current Element By React App",
    "description": "Cypress can listen to the events dispatched to the native DOM element from the React Application. \nRead the blog post https://glebbahmutov.com/blog/listen-to-events/ Find the source code in https://github.com/bahmutov/listen-to-custom-event\n\nThe relevant app code\nconsole.log('sending DOM event loading to the ref element')\n\nconst myEvent = new CustomEvent('clicked', {\n  detail: {\n    message: 'Button clicked',\n  },\n})\nref.current.dispatchEvent(myEvent)\n\nThe test code\ncy.visit('/')\ncy.get('[data-cy=ref]').invoke('on', 'clicked', cy.stub().as('clicked'))\ncy.get('button').click().click()\ncy.get('@clicked').should('have.been.calledTwice')",
    "publishedAt": "2021-08-05T14:15:15Z",
    "url": "https://youtu.be/Uo99lvfZLJQ"
  },
  {
    "videoId": "h3O-ZxIItPk",
    "title": "Listen To The Application Dispatching Events To The Document",
    "description": "Sometimes an application dispatches a custom DOM to the document. This video shows how to listen to such events from the Cypress test. Read the blog post https://glebbahmutov.com/blog/listen-to-events/ Find the app in https://github.com/bahmutov/listen-to-custom-event\n\nThe application code:\n\nconst loadingEvent = new CustomEvent('loading', {\n  detail: {\n    message: 'Loading...',\n  },\n})\ndocument.dispatchEvent(loadingEvent)\n\nThe spec code:\ncy.document()\n  .invoke('addEventListener', 'loading', cy.stub().as('loading'))\n\n// on load the app should have sent an event\ncy.get('@loading')\n  .should('have.been.calledOnce')\n  .its('firstCall.args.0.detail')\n  .should('deep.equal', {\n    message: 'Loading...',\n  })",
    "publishedAt": "2021-08-05T13:50:05Z",
    "url": "https://youtu.be/h3O-ZxIItPk"
  },
  {
    "videoId": "09KbTRLrgWA",
    "title": "Install Node and Cypress",
    "description": "In this video, I install Node on a new development machine, install Cypress and open a sample test. You can download the Node installer from https://nodejs.org/en/download/ Pro tip: if you need to install multiple versions of Node, you can use NVM tool https://github.com/nvm-sh/nvm or a tool called \"n\" https://www.npmjs.com/package/n\n\nWatch my video https://youtu.be/CNnCz6StbbY to learn how to install and use NVM to install multiple Node versions on the same machine.",
    "publishedAt": "2021-08-04T14:23:43Z",
    "url": "https://youtu.be/09KbTRLrgWA"
  },
  {
    "videoId": "q4bhaXl3pEc",
    "title": "Test The Custom jQuery Events Using Cypress",
    "description": "In this video, I show how to correctly listen to the custom jQuery events sent by the application from Cypress tests. Read the blog post https://glebbahmutov.com/blog/listen-to-events/ Find the full source code in repo https://github.com/bahmutov/jquery-custom-events-example",
    "publishedAt": "2021-08-03T14:58:23Z",
    "url": "https://youtu.be/q4bhaXl3pEc"
  },
  {
    "videoId": "pKi6nUMw6Tc",
    "title": "Cypress DOM Snapshots From DevTools Console",
    "description": "In this video, I show how to create a DOM snapshot of the application right from the DevTools console using Cypress utility method. Then I restore that DOM snapshot when I want to show it instead of the application.",
    "publishedAt": "2021-08-03T13:58:23Z",
    "url": "https://youtu.be/pKi6nUMw6Tc"
  },
  {
    "videoId": "H04KlMirMYs",
    "title": "Visit The Blank Page Between The Tests",
    "description": "We will visit the blank page at the start of each test to make sure all code callbacks and network calls from the previous test are stopped and do not leak into the current test. For more details, read https://glebbahmutov.com/blog/visit-blank-page-between-tests/",
    "publishedAt": "2021-08-02T19:01:36Z",
    "url": "https://youtu.be/H04KlMirMYs"
  },
  {
    "videoId": "HxAjSUxr84w",
    "title": "Burn Tests Using cypress-grep And CircleCI Pipelines",
    "description": "This video shows how to run a particular test using cypress-grep multiple times in a row (called burning a test) from the browser DevTools Console. I also show how to set up burning using CircleCI pipeline parameters, so that we can start a new pipeline run and run a single test multiple times in a row on demand. \n\nSee the code in https://github.com/bahmutov/todomvc-tests-circleci and use the plugin https://github.com/cypress-io/cypress-grep\n\nRead the blog post https://glebbahmutov.com/blog/burn-tests-on-circle/",
    "publishedAt": "2021-07-29T17:56:39Z",
    "url": "https://youtu.be/HxAjSUxr84w"
  },
  {
    "videoId": "MIIEndCTVxc",
    "title": "Avoid The Pyramid Of Doom Using Aliases",
    "description": "We will rewrite a test that uses nested \".then\" callbacks to get several elements into a test that uses aliases. We will access all the aliased values using \"this.alias name\" syntax.\n\nNote: you need to use \"function () { }\" callback format to correctly get the \"this\" object. Read the blog post https://glebbahmutov.com/blog/avoid-cypress-pyramid-of-doom/ for details.",
    "publishedAt": "2021-07-27T21:05:18Z",
    "url": "https://youtu.be/MIIEndCTVxc"
  },
  {
    "videoId": "uGWWoq0ECY8",
    "title": "Why cy.log prints null or undefined",
    "description": "Sometimes we call cy.log(variable) yet it always prints null or undefined. In this video, I explain why this happens and how to solve this problem by moving the cy.log call into .then callback.\n\nSee the code in https://glebbahmutov.com/cypress-examples and read the blog post https://glebbahmutov.com/blog/why-cy-log-prints-nothing/ for full details.",
    "publishedAt": "2021-07-08T16:40:48Z",
    "url": "https://youtu.be/uGWWoq0ECY8"
  },
  {
    "videoId": "LtjAUzmPHIY",
    "title": "Play Video When The Videoplayer is Ready",
    "description": "In this video I show how to spy on the videoplayer to only execute \"play\" method call when the video is ready to be played.",
    "publishedAt": "2021-07-07T21:20:24Z",
    "url": "https://youtu.be/LtjAUzmPHIY"
  },
  {
    "videoId": "soNyOqpi_gQ",
    "title": "Mock WebSocket Connection from Cypress test using socket.io-mock",
    "description": "In this example, we will mock the socket used by the application. The mock will be created by the Cypress spec file and injected into the page using cy.intercept\n\nFind the code at https://github.com/bahmutov/cypress-socketio-chat",
    "publishedAt": "2021-06-28T14:42:59Z",
    "url": "https://youtu.be/soNyOqpi_gQ"
  },
  {
    "videoId": "MFGQB0nQ2J0",
    "title": "Testing WebBrowser.openBrowserAsync",
    "description": "We can confirm the RN application is calling WebBrowser.openBrowserAsync method by stubbing window.open method and confirming it was called with the right arguments. Find the source code at https://github.com/bahmutov/expo-cypress-examples",
    "publishedAt": "2021-06-18T20:32:54Z",
    "url": "https://youtu.be/MFGQB0nQ2J0"
  },
  {
    "videoId": "y4Z5ywhd85s",
    "title": "Test React Native Tabs",
    "description": "In this test we will navigate from tab to tab using Cypress and confirm the React Native running inside the browser using Expo works correctly. Find the source code in https://github.com/bahmutov/expo-cypress-examples",
    "publishedAt": "2021-06-18T19:53:45Z",
    "url": "https://youtu.be/y4Z5ywhd85s"
  },
  {
    "videoId": "fg5ituAWexQ",
    "title": "Add Cypress Custom Commands To Access Elements By Aria Role",
    "description": "We will abstract finding elements by aria attribute into custom commands to be in the support file.\n\nThe code is at https://github.com/bahmutov/react-native-web-example and find the Cypress documentation at https://on.cypress.io/custom-commands",
    "publishedAt": "2021-06-17T14:21:12Z",
    "url": "https://youtu.be/fg5ituAWexQ"
  },
  {
    "videoId": "rADMQUpUpSc",
    "title": "Add Cypress Test To React-Native-Web Example",
    "description": "I am adding the first Cypress test to a React Native project that uses react-native-web to show the app in the browser.\n\n- the source code is at https://github.com/bahmutov/react-native-web-example\n- https://necolas.github.io/react-native-web/",
    "publishedAt": "2021-06-17T14:13:48Z",
    "url": "https://youtu.be/rADMQUpUpSc"
  },
  {
    "videoId": "Yaxi26X2wyg",
    "title": "Adding Code Coverage To React Native Tests",
    "description": "I have configured the code coverage following the Cypress code coverage guide at https://on.cypress.io/code-coverage The coverage shows that we missed testing what happens when the Ajax call to load the data fails. We add a test that simulates a network error using cy.intercept and get a 100% code coverage.",
    "publishedAt": "2021-06-16T20:36:00Z",
    "url": "https://youtu.be/Yaxi26X2wyg"
  },
  {
    "videoId": "3YfgZnlPSNo",
    "title": "Stub Ajax Network Call From The Application Using cy.intercept and Fixture File",
    "description": "The cy.intercept command can stub a network call using a fixture file. In this video we will save a JSON response from the server and then use it in our tests. Find the source code at https://github.com/bahmutov/my-react-native-project",
    "publishedAt": "2021-06-16T15:26:23Z",
    "url": "https://youtu.be/3YfgZnlPSNo"
  },
  {
    "videoId": "7YoHLJ69ijA",
    "title": "Testing The Loading Indicator by Slowing Down The Request",
    "description": "Using cy.intercept we slow down the Ajax call and confirm the loading indicator is first visible, then is removed from the DOM.\n\nThe source code is at https://github.com/bahmutov/my-react-native-project\nAlso read https://glebbahmutov.com/blog/negative-assertions/",
    "publishedAt": "2021-06-16T15:18:47Z",
    "url": "https://youtu.be/7YoHLJ69ijA"
  },
  {
    "videoId": "ChzzKbpXl9w",
    "title": "Test an Ajax Call From React Native App Using Cypress",
    "description": "We use cy.intercept command to spy on the Ajax call the React Native application is making to fetch the list of users. Then we verify the list is displayed by the application. Tip: we use testID and accessibilityLabel props in our application to be able to select elements using either \"[data-testid=user]\" or \"[aria-label=user]\" selectors.\n\nSee also:\n- the code at https://github.com/bahmutov/my-react-native-project\n- cy.intercept documentation at https://on.cypress.io/intercept",
    "publishedAt": "2021-06-16T14:49:26Z",
    "url": "https://youtu.be/ChzzKbpXl9w"
  },
  {
    "videoId": "nZnnqX6nMdI",
    "title": "Run Cypress React Native Tests Using GitHub Actions",
    "description": "We will set up a GitHub Actions workflow to run Expo + Cypress React Native tests on CI. See the code in https://github.com/bahmutov/my-react-native-project\n\nTools used:\n- https://github.com/cypress-io/github-action",
    "publishedAt": "2021-06-16T14:21:02Z",
    "url": "https://youtu.be/nZnnqX6nMdI"
  },
  {
    "videoId": "m0dAL83rnRc",
    "title": "Testing React Native Application Using Cypress: Introduction",
    "description": "In this video I create a new React Native project using Expo CLI, then add a simple test using Cypress. The application runs in the Web mode. You can find the application at https://github.com/bahmutov/my-react-native-project\n\nTools used:\n- https://expo.io/\n- https://www.cypress.io/\n- https://github.com/bahmutov/start-server-and-test",
    "publishedAt": "2021-06-16T13:55:37Z",
    "url": "https://youtu.be/m0dAL83rnRc"
  },
  {
    "videoId": "m8gxagI4IM8",
    "title": "Confirm The Responsive Image is Loaded by the Picture Element",
    "description": "Using cy.intercept we can confirm from the Cypress test that the right image is loaded depending on the viewport width. Find the full recipe in the https://github.com/cypress-io/cypress-example-recipes repo",
    "publishedAt": "2021-06-10T20:40:19Z",
    "url": "https://youtu.be/m8gxagI4IM8"
  },
  {
    "videoId": "Fo2S7l23eOA",
    "title": "Confirm Class Names using Custom Logic",
    "description": "Using have.prop \"classList\" we get the full class list from an element. We can convert that result into an Array and use \"some\" method with custom logic to check if the list of classes includes a name matching some predicate. See the full test at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-06-08T16:57:00Z",
    "url": "https://youtu.be/Fo2S7l23eOA"
  },
  {
    "videoId": "hjM-hhw4Llk",
    "title": "Check Elements Classes",
    "description": "Using should('have.class') assertions we can confirm the classes on the element. We can also get the entire class name using the prop assertion. Find this test at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-06-08T16:41:28Z",
    "url": "https://youtu.be/hjM-hhw4Llk"
  },
  {
    "videoId": "xdVRVhUUgCI",
    "title": "Cypress and StackBlitz: stubbing server-side Ajax call",
    "description": "StackBlitz has recently announced Node containers running right in the browser https://blog.stackblitz.com/posts/introducing-webcontainers/. This video shows a little experiment: running a Next.js server making a server-side Ajax call to fetch data, and stubbing this call using Cypress cy.intercept command. See the code in https://github.com/bahmutov/cypress-stackblitz",
    "publishedAt": "2021-06-04T20:43:15Z",
    "url": "https://youtu.be/xdVRVhUUgCI"
  },
  {
    "videoId": "EBzEEwCroIM",
    "title": "Running tests and suites of tests using cypress-grep",
    "description": "The https://github.com/bahmutov/cypress-grep plugin allows you to grep tests by tag. You can also run the entire suite of tests using tags.",
    "publishedAt": "2021-06-04T15:29:46Z",
    "url": "https://youtu.be/EBzEEwCroIM"
  },
  {
    "videoId": "VSIaDbv4GyE",
    "title": "Use a Single cy.contains Command",
    "description": "You should use a single \"cy.contains(selector, text)\" command instead of \"cy.get(selector).contains(text)\" chain. The entire command will be retried, which is more robust (see https://on.cypress.io/retry-ability guide). You also do not need to add \"cy.contains(...).should('exist')` assertion, since the existence assertion is built-in, see https://on.cypress.io/contains page.",
    "publishedAt": "2021-06-04T14:01:25Z",
    "url": "https://youtu.be/VSIaDbv4GyE"
  },
  {
    "videoId": "SgTsCJCujNw",
    "title": "How to use Cypress cy.log command to output messages to the Command Log",
    "description": "We can use `.then(cy.log)` to quickly dump some info into the Cypress Command Log. If needed, we can use `.then(JSON.stringify).then(cy.log)` to print larger objects. For more Cypress tips like this, read the blog post  https://glebbahmutov.com/blog/cypress-tips-and-tricks/",
    "publishedAt": "2021-06-03T16:25:45Z",
    "url": "https://youtu.be/SgTsCJCujNw"
  },
  {
    "videoId": "mML36U62-fQ",
    "title": "Replace window.location.replace from Cypress test",
    "description": "In this video, I show how to use cy.intercept to rewrite application code to avoid an application redirect via window.location.replace method call. For more details, read the blog post https://glebbahmutov.com/blog/cypress-tips-and-tricks/",
    "publishedAt": "2021-06-02T13:44:35Z",
    "url": "https://youtu.be/mML36U62-fQ"
  },
  {
    "videoId": "WGigbAupExQ",
    "title": "Canvas image diffing in the browser using pixelmatch",
    "description": "See the full source code in https://github.com/bahmutov/monalego repository. We will use pixelmatch library to compare the canvas to itself after a short delay to detect when the animation has finished. Then we can compare the image to the baseline image on disk, or save the baseline image.",
    "publishedAt": "2021-05-29T20:37:02Z",
    "url": "https://youtu.be/WGigbAupExQ"
  },
  {
    "videoId": "4eEc3x24D64",
    "title": "Give Chrome Browser Clipboard Permissions from Cypress Test",
    "description": "Using \"Cypress.automation\" command and Chrome Debugger Protocol we can access the clipboard text from the Cypress test to verify the application has copied the expected text there. Find the full Clipboard recipe at https://github.com/cypress-io/cypress-example-recipes",
    "publishedAt": "2021-05-26T20:21:53Z",
    "url": "https://youtu.be/4eEc3x24D64"
  },
  {
    "videoId": "N_VNS8ysUQc",
    "title": "Cypress Testing for HTML Emails Sent via SendGrid Service",
    "description": "This video shows how to receive HTML emails sent via SendGrid (or any other 3rd party SMTP service) using a test email account from Ethereal.email. The received email is then loaded in the Cypress browser to validate and interact with it. Read the blog post https://www.cypress.io/blog/2021/05/24/full-testing-of-html-emails-using-ethereal-accounts/ for full details. The source code is available in https://github.com/bahmutov/cypress-ethereal-email-example repository",
    "publishedAt": "2021-05-26T14:42:18Z",
    "url": "https://youtu.be/N_VNS8ysUQc"
  },
  {
    "videoId": "SExmed1dCL4",
    "title": "Access the clipboard from Cypress test using Electron browser",
    "description": "In this code example (available in the https://github.com/cypress-io/cypress-example-recipes) we see how to copy and read text from the clipboard using Electron browser.\n\nWatch the next video https://www.youtube.com/watch?v=4eEc3x24D64 for giving Chrome browser permission to access the clipboard",
    "publishedAt": "2021-05-26T13:14:51Z",
    "url": "https://youtu.be/SExmed1dCL4"
  },
  {
    "videoId": "LxkrhUEE2Qk",
    "title": "Multiple elements and should('be.visible') assertion",
    "description": "In this example, I show how the assertion should('be.visible') passes in the case of multiple elements when only some of them are visible. I also show how to filter elements by visibility to get just the visible elements or just the invisible ones. The demo uses Cypress v7.4.0, find the full test at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-05-26T12:35:14Z",
    "url": "https://youtu.be/LxkrhUEE2Qk"
  },
  {
    "videoId": "kB2uyJ2W41I",
    "title": "Burning test using cypress-grep",
    "description": "In this video, I show how to run a test multiple times in a row (burning it) to figure out if it is flaky or not. I am using the https://github.com/bahmutov/cypress-grep plugin with \"burn\" parameter. By using this plugin we can run just a single test multiple times in a row without modifying the spec source file. Read the blog post https://glebbahmutov.com/blog/burning-tests/ for details.",
    "publishedAt": "2021-05-18T12:24:52Z",
    "url": "https://youtu.be/kB2uyJ2W41I"
  },
  {
    "videoId": "16WTH7XeIVw",
    "title": "Testing HTML emails using Cypress",
    "description": "In this example, I explain how Cypress can be used to mock a local SMTP server and receive HTML emails sent by the local application. The full source code is at https://github.com/bahmutov/cypress-email-example and the corresponding blog post is at https://www.cypress.io/blog/2021/05/11/testing-html-emails-using-cypress/ For the full presentation, see the slides https://slides.com/bahmutov/email-testing",
    "publishedAt": "2021-05-13T18:54:31Z",
    "url": "https://youtu.be/16WTH7XeIVw"
  },
  {
    "videoId": "SFW7Ecj5TNE",
    "title": "How I organize pull request workflows by running smoke tests first",
    "description": "Using an example from the repository https://github.com/bahmutov/cypress-grep-example I show how I run smoke tests first (using https://github.com/bahmutov/cypress-grep plugin), before running all tests. Everything is recorded to the Cypress Dashboard, and I use Cypress GitHub Action to run everything.",
    "publishedAt": "2021-05-12T21:26:09Z",
    "url": "https://youtu.be/SFW7Ecj5TNE"
  },
  {
    "videoId": "HS-Px-Sghd8",
    "title": "Plugin cypress-grep introduction",
    "description": "Introduction to the plugin https://github.com/bahmutov/cypress-grep that allows you to pick tests to run by part of the title or tags. Shows how to install the plugin and how to run tests by title or by tag. Also shows how to use the reference comment to include its TypeScript type definition for the test config \"tags\" field.",
    "publishedAt": "2021-05-12T14:24:11Z",
    "url": "https://youtu.be/HS-Px-Sghd8"
  },
  {
    "videoId": "Kkdkas9l3b0",
    "title": "Introduction to the cy.intercept \"times\" option",
    "description": "We will reply to the same network call with different stubs using cy.intercept \"times\" option. See the https://on.cypress.io/intercept API documentation page and find the full source code in the \"Intercept recipe\" in https://github.com/cypress-io/cypress-example-recipes",
    "publishedAt": "2021-05-11T16:33:09Z",
    "url": "https://youtu.be/Kkdkas9l3b0"
  },
  {
    "videoId": "Sp1NfcLPpwg",
    "title": "cypress-grep: filter tests dynamically from DevTools console",
    "description": "In this video, I show how to dynamically execute tagged tests or a particular test using the https://github.com/bahmutov/cypress-grep plugin. You can find the example repo at https://github.com/bahmutov/cypress-grep-example",
    "publishedAt": "2021-04-30T20:17:23Z",
    "url": "https://youtu.be/Sp1NfcLPpwg"
  },
  {
    "videoId": "Cj1g_PWZJF8",
    "title": "Answering the user question by coding a new recipe",
    "description": "I show the entire process for coding an answer to a user question via https://github.com/bahmutov/cypress-examples. The recipe shows how to collect attributes from the multiple elements and confirm their values. This video is a good companion to the blog post https://glebbahmutov.com/blog/answer-cypress-question/",
    "publishedAt": "2021-04-26T13:53:33Z",
    "url": "https://youtu.be/Cj1g_PWZJF8"
  },
  {
    "videoId": "RV7FoWu1w0c",
    "title": "Cypress aliases and before and beforeEach hooks",
    "description": "We will refactor the Cypress tests to visit the page just once using before hook. Then we will refactor the tests to access the same elements using an alias - but we will have to use the beforeEach hook to create the alias, as the aliases are reset before each test automatically. For more read the blog post https://glebbahmutov.com/blog/scrape-list-of-slides/",
    "publishedAt": "2021-04-23T20:18:29Z",
    "url": "https://youtu.be/RV7FoWu1w0c"
  },
  {
    "videoId": "AvsYI9kU0tA",
    "title": "Cypress test statuses",
    "description": "In this video I explain the four different statuses a finished Cypress test can have: passing, failing, pending, and skipped. The important thing to remember is that \"it.skip\" is the \"pending\" test. For more details, read the blog post https://glebbahmutov.com/blog/cypress-test-statuses/",
    "publishedAt": "2021-04-22T17:09:54Z",
    "url": "https://youtu.be/AvsYI9kU0tA"
  },
  {
    "videoId": "TZjphtLrRT4",
    "title": "Cypress hover example",
    "description": "In this example, we will look at testing DOM elements that are visible during mouse over and elements that are only visible during the true CSS hover state. For those events, we can use https://github.com/dmtrKovalenko/cypress-real-events#cyrealhover command. Find the full source code in https://github.com/bahmutov/cy-hover-example repo",
    "publishedAt": "2021-04-13T14:11:33Z",
    "url": "https://youtu.be/TZjphtLrRT4"
  },
  {
    "videoId": "6CxZuolWlYM",
    "title": "Confirming the text with non breaking space entity",
    "description": "In this video I answer the question from https://github.com/cypress-io/cypress/issues/15863 by showing how to assert text that uses non-breaking space HTML entity. By searching the Cypress docs I find that cy.contains command handles non-breaking space, and if I want to use other assertions like \"should include.text\", I can use Unicode character \"\\u00a0\" where the non-breaking space is expected in the text.",
    "publishedAt": "2021-04-09T14:58:17Z",
    "url": "https://youtu.be/6CxZuolWlYM"
  },
  {
    "videoId": "wkcot8eOcvs",
    "title": "cy.stub: stub a method on every window object",
    "description": "By using cy.on event listener we can stub the window.track on every window object created by the browser during the test. Even if the page reloads, or the browser navigates to another page, the stub will be attached.",
    "publishedAt": "2021-04-01T14:58:15Z",
    "url": "https://youtu.be/wkcot8eOcvs"
  },
  {
    "videoId": "tkpz20haiCA",
    "title": "cy.stub: stub window method that will be defined later",
    "description": "By using Object.defineProperty we can prepare to stub window.track that will be set later by the application code. Then we can confirm it was called during the page load phase.",
    "publishedAt": "2021-03-30T12:38:11Z",
    "url": "https://youtu.be/tkpz20haiCA"
  },
  {
    "videoId": "eOEDCmqpMjE",
    "title": "cy.stub: stub a method on the window object",
    "description": "We will stub our \"analytics\" method window.track to confirm how it was called by our application. Find more information in the blog post https://glebbahmutov.com/blog/stub-window-open/ and in the workshop https://github.com/cypress-io/testing-workshop-cypress",
    "publishedAt": "2021-03-29T21:07:31Z",
    "url": "https://youtu.be/eOEDCmqpMjE"
  },
  {
    "videoId": "aeBclf9A92A",
    "title": "cypress-recurse: testing the canvas with bar chart",
    "description": "We are using the https://github.com/bahmutov/cypress-recurse to confirm the bar chart rendered on the canvas looks the same as the good image. This example comes from https://github.com/bahmutov/monalego",
    "publishedAt": "2021-03-17T23:02:33Z",
    "url": "https://youtu.be/aeBclf9A92A"
  },
  {
    "videoId": "6-xHHtAzNtk",
    "title": "cypress-recurse: pagination example",
    "description": "Using https://github.com/bahmutov/cypress-recurse we click the \"next page\" until it has class disabled, which means we are on the last page.",
    "publishedAt": "2021-03-16T14:27:54Z",
    "url": "https://youtu.be/6-xHHtAzNtk"
  },
  {
    "videoId": "CU8C6MRP_GU",
    "title": "cypress-recurse: Wait for the API to respond",
    "description": "Let's ping the API endpoint using cy.request until it responds with success, we can use https://github.com/bahmutov/cypress-recurse to do this. After the API responds we can continue with the rest test. Find the source code in the \"Wait for API\" recipe in https://github.com/cypress-io/cypress-example-recipes",
    "publishedAt": "2021-03-15T22:04:53Z",
    "url": "https://youtu.be/CU8C6MRP_GU"
  },
  {
    "videoId": "f2uXdCOkJb0",
    "title": "NPM Quick Run",
    "description": "In this video I am showing my utility https://github.com/bahmutov/npm-quick-run for running NPM scripts by prefix or word match. This utility makes running even complicated scripts a breeze. Find the full blog post at https://glebbahmutov.com/blog/organize-npm-scripts/",
    "publishedAt": "2021-03-11T15:17:40Z",
    "url": "https://youtu.be/f2uXdCOkJb0"
  },
  {
    "videoId": "6iDjbAXvLa0",
    "title": "Start server and test",
    "description": "I show the utility https://github.com/bahmutov/start-server-and-test to combine multiple scripts into a single command. Makes running the app and the tests a breeze. For the full blog post see https://glebbahmutov.com/blog/organize-npm-scripts/",
    "publishedAt": "2021-03-11T15:14:59Z",
    "url": "https://youtu.be/6iDjbAXvLa0"
  },
  {
    "videoId": "jJLMZ8k85OA",
    "title": "NPM Script Names",
    "description": "How I organize NPM script names in the package.json file in my projects. See the full discussion in https://glebbahmutov.com/blog/organize-npm-scripts/",
    "publishedAt": "2021-03-11T15:08:21Z",
    "url": "https://youtu.be/jJLMZ8k85OA"
  },
  {
    "videoId": "2EkOI-gO2VY",
    "title": "Debugging RegExp Cypress test",
    "description": "In this case I will refactor the original test that uses regular expression to assert an attribute's value. We will simplify the test to make the entire thing pretty small. \n\nShows https://on.cypress.io/fixture and https://on.cypress.io/assertions in action.",
    "publishedAt": "2021-03-10T16:19:53Z",
    "url": "https://youtu.be/2EkOI-gO2VY"
  },
  {
    "videoId": "g9ToLSD_lbQ",
    "title": "Fast Cypress project scaffolding",
    "description": "By using https://github.com/bahmutov/cly we can quickly scaffold new Cypress projects without Kitchensink spec files. We can also scaffold TypeScript and bare-bones projects.",
    "publishedAt": "2021-03-09T16:03:40Z",
    "url": "https://youtu.be/g9ToLSD_lbQ"
  },
  {
    "videoId": "iP2tNhEbF8Y",
    "title": "Testing the SELECT options text",
    "description": "I will show how to confirm the options inside a SELECT element. Then we can look at comparing the arrays of strings. Find this example test at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-03-08T23:52:22Z",
    "url": "https://youtu.be/iP2tNhEbF8Y"
  },
  {
    "videoId": "7ZSwrhh6BLk",
    "title": "Record to Cypress Dashboard from GitHub Actions",
    "description": "We set up Cypress Dashboard recording from the project that uses GH Actions. We use https://github.com/cypress-io/github-action to make it simple. The recording helps us watch the video of the test run to see that the test fails due to the different image size of the saved PNG file.",
    "publishedAt": "2021-03-06T21:53:08Z",
    "url": "https://youtu.be/7ZSwrhh6BLk"
  },
  {
    "videoId": "7mEcUOo5fCk",
    "title": "Refactor clock control to for loop",
    "description": "In this video we refactor the visual canvas test with clock control to keep all state local. After a while we have exactly the same code in 4 steps and can switch to using a normal JavaScript for loop. Find the code in https://github.com/bahmutov/monalego repo.",
    "publishedAt": "2021-03-06T21:28:16Z",
    "url": "https://youtu.be/7mEcUOo5fCk"
  },
  {
    "videoId": "QvXDaRNYPDY",
    "title": "Pause canvas animation using cy.clock and cy.tick",
    "description": "We visually compare our canvas at different times by freezing the clock using cy.clock command and advancing it via cy.tick. Find the full source code in the https://github.com/bahmutov/monalego repository",
    "publishedAt": "2021-03-06T21:15:20Z",
    "url": "https://youtu.be/QvXDaRNYPDY"
  },
  {
    "videoId": "xSK6fe5WD1g",
    "title": "cypress-recurse: retries for visual canvas testing",
    "description": "We will use cypress-recurse to download and compare a canvas to a previously saved good PNG image. This retries until the command times out or the images match. Read the full info at https://glebbahmutov.com/blog/canvas-testing/ and find the finished code at https://github.com/bahmutov/monalego",
    "publishedAt": "2021-03-04T22:24:13Z",
    "url": "https://youtu.be/xSK6fe5WD1g"
  },
  {
    "videoId": "Ty5ltRdgr5M",
    "title": "cypress-recurse: use cypress-recurse to find the downloaded file",
    "description": "In this video, we are using https://github.com/bahmutov/cypress-recurse to find the downloaded file in the \"File download\" recipe. The code is in https://github.com/cypress-io/cypress-example-recipes/pull/663",
    "publishedAt": "2021-03-03T13:20:31Z",
    "url": "https://youtu.be/Ty5ltRdgr5M"
  },
  {
    "videoId": "V82p7qTowXg",
    "title": "(7 of 7) Published cypress-recurse NPM package",
    "description": "The utility function for calling Cypress commands recursively until the predicate passes has been published in its own NPM package. Find the source code in https://github.com/bahmutov/cypress-recurse This video walks through the package explaining it.",
    "publishedAt": "2021-03-02T14:14:40Z",
    "url": "https://youtu.be/V82p7qTowXg"
  },
  {
    "videoId": "g4qispkHH-o",
    "title": "(6 of 7) Add JSDoc types to the options parameter",
    "description": "We will use JSDoc comments to quickly give types to the parameters our \"recurse\" function expects. See https://glebbahmutov.com/blog/trying-typescript/#types-from-jsdoc for more on using JSDoc with ts-check directive.",
    "publishedAt": "2021-02-28T23:37:57Z",
    "url": "https://youtu.be/g4qispkHH-o"
  },
  {
    "videoId": "DeMRtTD5p7s",
    "title": "(5 of 7) Convert recurse to use options object",
    "description": "Adding more positional arguments to our recurse function quickly becomes very tedious. In this video, I convert the function to accept the options object as the last argument. Find the source at https://github.com/bahmutov/avoid-while-loops-in-cypress repo",
    "publishedAt": "2021-02-28T21:28:56Z",
    "url": "https://youtu.be/DeMRtTD5p7s"
  },
  {
    "videoId": "Cn8Ubhd49Gw",
    "title": "(4 of 7) Recursion function with time limit",
    "description": "We improve our recursive function for running Cypress commands by replacing the iteration limit with a time limit. This is similar to the way Cypress commands are retried up until the command's timeout limit. Find the source code at https://github.com/bahmutov/avoid-while-loops-in-cypress",
    "publishedAt": "2021-02-27T21:09:55Z",
    "url": "https://youtu.be/Cn8Ubhd49Gw"
  },
  {
    "videoId": "I1oNKD6NNjg",
    "title": "(3 of 7) Reusable function for running Cypress commands with attempts limit",
    "description": "We continue working on the reusable recursive function for running Cypress commands until the expected value is produced. In this video, we add a limit to how many times the recursive function can be called. Find the source code at https://github.com/bahmutov/avoid-while-loops-in-cypress",
    "publishedAt": "2021-02-27T21:08:05Z",
    "url": "https://youtu.be/I1oNKD6NNjg"
  },
  {
    "videoId": "Q_7-gRQLLMA",
    "title": "(2 of 7) Reusable recursive function to running Cypress commands",
    "description": "We are making a reusable function that calls itself recursively until Cypress commands produce the expected value. Find the full code in https://github.com/bahmutov/avoid-while-loops-in-cypress",
    "publishedAt": "2021-02-27T21:04:28Z",
    "url": "https://youtu.be/Q_7-gRQLLMA"
  },
  {
    "videoId": "r8_hFwYAo5c",
    "title": "(1 of 7) Call cy task until it returns an expected value",
    "description": "We implement a test that recursively calls cy.task until it returns the expected number 7. The source code is in the repo https://github.com/bahmutov/avoid-while-loops-in-cypress",
    "publishedAt": "2021-02-26T15:12:27Z",
    "url": "https://youtu.be/r8_hFwYAo5c"
  },
  {
    "videoId": "2qxbSmSRZQQ",
    "title": "Cypress viewport and window sizes",
    "description": "I show how Cypress scales the application's iframe to fit inside the available browser window while preserving the aspect ratio of the viewport. See the full recipe to learn how to generate high-quality screenshots and video recordings in https://github.com/cypress-io/cypress-example-recipes#fundamentals",
    "publishedAt": "2021-02-25T20:50:51Z",
    "url": "https://youtu.be/2qxbSmSRZQQ"
  },
  {
    "videoId": "62cDLO533OY",
    "title": "A GitHub Actions workflow with separate install and test steps",
    "description": "I am showing the https://github.com/bahmutov/cypress-gh-action-split-jobs workflow where we use two jobs. The first job installs the dependencies and builds the site. The second job downloads the built site and runs Cypress tests. Splitting the workflow like this allows us to build the site just once and potentially run multiple tests in parallel using Cypress GitHub Action.",
    "publishedAt": "2021-02-24T19:55:11Z",
    "url": "https://youtu.be/62cDLO533OY"
  },
  {
    "videoId": "5Z8BaPNDfvA",
    "title": "Avoid while loop in Cypress",
    "description": "This example shows how to reload the page in test multiple times until the expected number 7 appears. The test teaches how to properly execute the asynchronous commands while avoiding a runaway test scenario. Find the code in the https://github.com/cypress-io/cypress-example-recipes repository.",
    "publishedAt": "2021-02-22T23:05:26Z",
    "url": "https://youtu.be/5Z8BaPNDfvA"
  },
  {
    "videoId": "OiVFiLnmXEM",
    "title": "Testing anchor element with ping attribute",
    "description": "How to use the cy.intercept to confirm the \"A\" DOM element with \"ping=/track\" attribute really is making the POST request to the backend. The source code is in https://github.com/cypress-io/cypress-example-recipes#stubbing-and-spying under \"Stubbing and Spying\" recipe, see \"cy.intercept\" recipe.",
    "publishedAt": "2021-02-21T22:44:12Z",
    "url": "https://youtu.be/OiVFiLnmXEM"
  },
  {
    "videoId": "sq6XbXbUXtA",
    "title": "How Cypress cy.intercept works",
    "description": "Explanation video showing the steps in cy.intercept command and how the browser and the Cypress network proxy layer communicate with your test. Taken from the presentation https://slides.com/bahmutov/how-cy-intercept-works",
    "publishedAt": "2021-02-20T20:05:18Z",
    "url": "https://youtu.be/sq6XbXbUXtA"
  },
  {
    "videoId": "4TeSOj2Iy_Q",
    "title": "Test External Site Using GitHub Actions",
    "description": "Using workflow_dispatch event I can start GitHub Actions workflow by clicking a button in GitHub Repo UI. It is convenient for testing external sites, like my personal site that does not have its own tests.\n\nThe video shows using Cypress GitHub Action https://github.com/cypress-io/github-action to testing my personal site http://glebbahmutov.com/. Find the source code at https://github.com/bahmutov/test-personal-site",
    "publishedAt": "2021-02-06T20:21:09Z",
    "url": "https://youtu.be/4TeSOj2Iy_Q"
  },
  {
    "videoId": "Qfo5ZVOdJNA",
    "title": "Showing GitHub Actions VSCode Plugin",
    "description": "How to see GitHub Actions CI status right from your VSCode editor, thanks to cschleiden.vscode-github-actions plugin. Also shows how to debug a failing Cypress test due to a stray character by looking at the error snapshot at Cypress Dashboard.",
    "publishedAt": "2021-02-03T20:14:30Z",
    "url": "https://youtu.be/Qfo5ZVOdJNA"
  },
  {
    "videoId": "mnctGqswGM0",
    "title": "Capture extra video for failed test",
    "description": "This video shows how you can capture extra video at the end of a failed test",
    "publishedAt": "2021-01-27T22:04:18Z",
    "url": "https://youtu.be/mnctGqswGM0"
  },
  {
    "videoId": "jAiYePsxPl4",
    "title": "Passing the environment variables to Cypress",
    "description": "Using either --env or plugin file. The plugin file way is the most powerful way to pass the environment variables, plus it makes it simple to create objects out of passed values. Watch out for single quotes, as they may prevent shell interpolation.\n\nRelated documentation: https://on.cypress.io/environment-variables",
    "publishedAt": "2021-01-27T15:05:41Z",
    "url": "https://youtu.be/jAiYePsxPl4"
  },
  {
    "videoId": "f5UaXuAc52c",
    "title": "How to correctly use the baseUrl to visit a site in Cypress",
    "description": "Use baseUrl to avoid page reloads. This is much better than the alternatives: hardcoding the URL or passing it via the environment variables.\n\nSee https://on.cypress.io/visit and https://on.cypress.io/configuration",
    "publishedAt": "2021-01-22T18:26:06Z",
    "url": "https://youtu.be/f5UaXuAc52c"
  },
  {
    "videoId": "pXpVAQZ-Gi4",
    "title": "Find DOM Elements From DevTools While Using Cypress",
    "description": "If you do not trust cy.get, cy.find, or cy.contains commands, if you want to confirm they find the expected DOM elements, this video shows how to correctly query the document yourself.\n\n- IMPORTANT: switch the DevTools console to the application iframe\n- use document.querySelector, document.querySelectorAll, or special DevTools aliases $ and $$ to find elements\n- you can query even when the Cypress Time-Traveling Debugger shows command DOM snapshots",
    "publishedAt": "2021-01-16T19:34:10Z",
    "url": "https://youtu.be/pXpVAQZ-Gi4"
  },
  {
    "videoId": "VY9yVle8LRQ",
    "title": "How to fail Cypress test if the application creates unhandled rejected promise",
    "description": "In this video, I show how to install a window event listener that catches unhandled rejected promises created by the application. When Cypress catches the event it can fail the test. For more details see the recipe \"Handling errors\" in https://github.com/cypress-io/cypress-example-recipes#fundamentals",
    "publishedAt": "2021-01-08T00:07:17Z",
    "url": "https://youtu.be/VY9yVle8LRQ"
  },
  {
    "videoId": "DwVezYq4zPM",
    "title": "Filtering app errors in Cypress tests",
    "description": "This video shows how Cypress catches exceptions thrown from the application code, and how to ignore some of the errors. Then it shows how to register the error handler for all tests. For more, see the \"Handling errors\" recipe https://github.com/cypress-io/cypress-example-recipes#fundamentals",
    "publishedAt": "2021-01-07T23:47:46Z",
    "url": "https://youtu.be/DwVezYq4zPM"
  },
  {
    "videoId": "BrZbNCrrlx8",
    "title": "Cypress hosts configuration explanation",
    "description": "You can specify the hostname to IP using Cypress' config object, similar to how you can use /private/etc/hosts to map domains before going to the DNS server. This video shows an example of mapping a non-existent domain www.demo-site.com to localhost and testing it.",
    "publishedAt": "2021-01-02T21:40:19Z",
    "url": "https://youtu.be/BrZbNCrrlx8"
  },
  {
    "videoId": "3uQpeyBlw3w",
    "title": "Avoid using cy.writeFile inside cy.intercept command",
    "description": "In this video I show how to avoid using Cypress command like cy.writeFile inside the network interceptor code. Find the written guide in https://glebbahmutov.com/blog/cypress-intercept-problems blog post",
    "publishedAt": "2020-12-12T21:23:42Z",
    "url": "https://youtu.be/3uQpeyBlw3w"
  },
  {
    "videoId": "nSmHxxwceDU",
    "title": "Debug Cypress element visibility issues",
    "description": "This video shows how to step through the Cypress.dom.isVisible function to investigate why Cypress thinks an element is invisible, even though it is clearly shown in the browser. \n\nSee https://on.cypress.io/dom#is-visible",
    "publishedAt": "2020-12-03T17:13:39Z",
    "url": "https://youtu.be/nSmHxxwceDU"
  },
  {
    "videoId": "_wfKbYQlP_Y",
    "title": "Cypress v6: Network control using cy.intercept introduction",
    "description": "In this video, I will give a glimpse of cy.intercept command (see https://on.cypress.io/intercept) which is a much more powerful replacement for the deprecated cy.route command. Find the source code at https://github.com/bahmutov/cy-intercept-example",
    "publishedAt": "2020-11-26T20:09:09Z",
    "url": "https://youtu.be/_wfKbYQlP_Y"
  },
  {
    "videoId": "hMAXX9k1q-Q",
    "title": "Debugging A Failing Cypress Test Locally",
    "description": "Using an example from https://github.com/cypress-io/cypress-example-todomvc app I will show how to debug a failing Cypress test using its built-in time-traveling debugger, cy.pause command, and the standard JavaScript debugger keyword. For more Cypress tips & tricks, read the blog post https://glebbahmutov.com/blog/cypress-tips-and-tricks/",
    "publishedAt": "2020-10-28T23:10:11Z",
    "url": "https://youtu.be/hMAXX9k1q-Q"
  },
  {
    "videoId": "inLue14mxm0",
    "title": "How to restore mocked clock",
    "description": "Shows how to mock the application's clock using \"cy.clock\" and how to restore it to let the application run normally. See https://on.cypress.io/clock",
    "publishedAt": "2020-06-23T16:05:02Z",
    "url": "https://youtu.be/inLue14mxm0"
  },
  {
    "videoId": "AcM4Uhp3yOw",
    "title": "Refactor loading fixtures",
    "description": "We will first move loading JSON fixtures into \"before\" hook. Then we will refactor the loading of fixtures by using \"import\" statement.",
    "publishedAt": "2020-06-13T17:15:21Z",
    "url": "https://youtu.be/AcM4Uhp3yOw"
  },
  {
    "videoId": "yVvCYtsmkZU",
    "title": "How to read code coverage report",
    "description": "We will look at code coverage HTML report generated after Cypress test run, and I will explain the line counters, if/else branching and JSX coverage.",
    "publishedAt": "2020-06-02T16:19:37Z",
    "url": "https://youtu.be/yVvCYtsmkZU"
  },
  {
    "videoId": "AlltFcsIFvc",
    "title": "Assert that the stub was called twice",
    "description": "We will assert the component invoked the stub prop twice when clicked in several ways. See https://on.cypress.io/retry-ability for more examples of Cypress retrying assertions automatically",
    "publishedAt": "2020-05-28T22:57:22Z",
    "url": "https://youtu.be/AlltFcsIFvc"
  },
  {
    "videoId": "6JMVh8V7DcI",
    "title": "Open code editor at the right failed command from Cypress",
    "description": "Cypress 4.6.0 uses source maps to correctly open your code editor right at the failed command.",
    "publishedAt": "2020-05-20T21:42:03Z",
    "url": "https://youtu.be/6JMVh8V7DcI"
  },
  {
    "videoId": "9Eq_gIshK0o",
    "title": "Checking code coverage on pull request",
    "description": "We will compare current code coverage against the coverage badge in the README using https://github.com/bahmutov/check-code-coverage#set-gh-status to make sure a pull request does not skip tests accidentally. The source code is in https://github.com/bahmutov/instrument-example",
    "publishedAt": "2020-05-05T15:21:35Z",
    "url": "https://youtu.be/9Eq_gIshK0o"
  },
  {
    "videoId": "AAl4HmJ3YuM",
    "title": "Show code coverage in commit status check",
    "description": "Shows how to use https://github.com/bahmutov/check-code-coverage#set-gh-status to show the current code coverage as a status check on GitHub",
    "publishedAt": "2020-05-04T20:04:16Z",
    "url": "https://youtu.be/AAl4HmJ3YuM"
  },
  {
    "videoId": "bNVRxb-MKGo",
    "title": "Adding code coverage badge to your project",
    "description": "This video shows how to add and update code coverage badge to your README without using external service, just https://shields.io and https://github.com/bahmutov/check-code-coverage#update-badge",
    "publishedAt": "2020-05-02T22:00:27Z",
    "url": "https://youtu.be/bNVRxb-MKGo"
  },
  {
    "videoId": "dwU5gUG2-EM",
    "title": "Check code coverage robustly using 3rd party tool",
    "description": "NYC will happily pass coverage check with an empty JSON file ... which is not what you probably want. In this video, I will show https://github.com/bahmutov/check-code-coverage scripts that are stricter.",
    "publishedAt": "2020-04-30T22:38:46Z",
    "url": "https://youtu.be/dwU5gUG2-EM"
  },
  {
    "videoId": "3LuVZgd4Ib4",
    "title": "Use Chromium Dev browser to run Cypress tests",
    "description": "Shows how to download Chromium browser from https://on.cypress.io/chromium-downloads and run Cypress tests",
    "publishedAt": "2020-04-28T21:01:53Z",
    "url": "https://youtu.be/3LuVZgd4Ib4"
  },
  {
    "videoId": "-YgitwmwFo0",
    "title": "Linting Cypress code using ESLint and eslint-plugin-cypress",
    "description": "Installing ESLint, linting React application and using https://github.com/cypress-io/eslint-plugin-cypress to add settings for Cypress specs to pass the linter",
    "publishedAt": "2020-04-27T23:38:14Z",
    "url": "https://youtu.be/-YgitwmwFo0"
  },
  {
    "videoId": "DlceMpRpbAw",
    "title": "Excluding code from code coverage reports",
    "description": "In this video, we will exclude a file, a branch, and an entire function from the code coverage report produced by Cypress. See https://github.com/cypress-io/code-coverage#exclude-code",
    "publishedAt": "2020-04-26T22:32:43Z",
    "url": "https://youtu.be/DlceMpRpbAw"
  },
  {
    "videoId": "y8StkffYra0",
    "title": "Get code coverage reports from Cypress tests",
    "description": "Report code coverage using https://github.com/cypress-io/code-coverage plugin for Cypress",
    "publishedAt": "2020-04-25T20:57:26Z",
    "url": "https://youtu.be/y8StkffYra0"
  },
  {
    "videoId": "mYXXSvcmQ6Y",
    "title": "Using start-server-and-test to start app, run tests and shut everything down",
    "description": "I will use https://github.com/bahmutov/start-server-and-test to run the web application, to wait for localhost:3000 to respond, then to run end-to-end Cypress tests. When the tests are done, the start-server-and-test shuts down the application.",
    "publishedAt": "2020-04-25T20:57:16Z",
    "url": "https://youtu.be/mYXXSvcmQ6Y"
  },
  {
    "videoId": "edgeQZ8UpD0",
    "title": "How to instrument react-scripts web application for code coverage",
    "description": "I will show how to instrument source code to collect code coverage. This method requires 1 dependency and works with any web application that uses react-scripts. We will use https://github.com/cypress-io/instrument-cra",
    "publishedAt": "2020-04-25T20:57:05Z",
    "url": "https://youtu.be/edgeQZ8UpD0"
  }
]
