[
  {
    "videoId": "zPLr_YHZckU",
    "title": "Stub Window Open Method And Confirm The Call Arguments",
    "description": "We can prevent a second browser window from opening by stubbing the \"window.open\" method using the cy.stub command. Then we can click the button, which causes the application to call the \"window.open\" method. Now the method does not open a second browser window, but it does record the arguments of the call. We can then confirm the stub was called with exact arguments, or with Sinon matches\n\ncy.window().then(function (win) {\n  cy.stub(win, 'open').as('open')\n})\ncy.contains('button', 'Show help').click()\n// confirm the call arguments\ncy.get('@open').should('have.been.calledWith', '/help', '_blank')\n\nFind this example at https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html and my blog post for dealing with the second browser window at https://glebbahmutov.com/blog/cypress-second-tab/",
    "publishedAt": "2022-06-17T11:53:04Z"
  },
  {
    "videoId": "HkXx79JE2nU",
    "title": "Use Stronger Assertions",
    "description": "You should also strive to write the strongest assertion possible in your Cypress tests. For example, when checking a phone number, it is not enough to confirm it is a string and length. You probably want to check its format, or even assert the exact expected value\n\n// the weakest assertion\ncy.get('.phone')\n  .invoke('text')\n  .should('be.a', 'string')\n  .and('have.length', 14)\n// a much stronger assertion\nconst phoneFormat = /^\\(\\d{3}\\) \\d{3}-\\d{4}$/\ncy.contains('.phone', phoneFormat)\n// the strongest is to confirm the exact value\ncy.get('.phone').should('have.text', '(123) 456-7890')\n\nYou can find more assertions at https://glebbahmutov.com/cypress-examples/commands/assertions.html",
    "publishedAt": "2022-06-15T19:55:00Z"
  },
  {
    "videoId": "HAJXZ8Pr50E",
    "title": "Set Multiple Input Fields Inside A Form At Once",
    "description": "Here is a nifty trick: get from the document a form elements object and set multiple input values at once.\n\ncy.document()\n  .its('forms.personal-info.elements')\n  .then(function (elements) {\n    elements['first-name'].value = 'Joe'\n    elements['last-name'].value = 'Smith'\n    elements.city.value = 'Boston'\n  })\n\nFor more, see the \"Form recipes\" at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-06-15T15:05:59Z"
  },
  {
    "videoId": "4nxrivWXYnM",
    "title": "Stub The Window Confirm Popups",
    "description": "This video teaches how to stub the \"confirm(...)\" popups to accept or cancel them from a Cypress test. We will use cy.stub command to reliably return true or false to the application code. Find this recipe and many more at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-06-15T11:57:11Z"
  },
  {
    "videoId": "wGeoWxBq3P4",
    "title": "Compare Two Scores",
    "description": "If we need to compare two numbers on the page, we need to grab each element, get its text, then convert the text to a number, and then we can compare them. Tip: any time you get something from the application, you need to use cy.then(callback) to actually have the value. For more examples, see https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-06-14T11:48:29Z"
  },
  {
    "videoId": "butlgoP4SzI",
    "title": "Automatically Skip all.cy.js Utility Spec When Using cypress run In Cypress v10",
    "description": "If we create a spec to import and run all other specs in Cypress v10 (see video https://www.youtube.com/watch?v=z56rRoh0z_c) then we need to control skipping that spec using the environment variable CI=1 This video shows a better way\n\n1. Better: control the flag using a Cypress env parameter \"--env CI=1\" to skip it\n2. Best: check if we are inside the \"cypress run\" mode and skip the all.cy.js file\n\nThe final cypress.config.js is as follows:\n\nconst { defineConfig } = require('cypress')\n\n// cypress run\n// isInteractive: true,\n// isTextTerminal: true,\n// cypress open\n// isInteractive: true,\n// isTextTerminal: false,\n\nmodule.exports = defineConfig({\n  projectId: '1qsjjk',\n  e2e: {\n    baseUrl: 'http://localhost:3000',\n    setupNodeEvents(on, config) {\n      // implement node event listeners here\n      if (config.isTextTerminal) {\n        return {\n          excludeSpecPattern: ['cypress/e2e/all.cy.js'],\n        }\n      }\n    },\n  },\n\n  component: {\n    viewportHeight: 1000,\n    viewportWidth: 1000,\n    devServer: {\n      framework: 'create-react-app',\n      bundler: 'webpack',\n    },\n  },\n})\n\nFor more details, read the blog post https://glebbahmutov.com/blog/run-all-specs-cypress-v10/",
    "publishedAt": "2022-06-10T19:21:15Z"
  },
  {
    "videoId": "ovNH_UJK62s",
    "title": "Check Part Of The URL Using Chained Commands",
    "description": "In this video, I explain how to get just a part of the URL, split it into parts, and check the last part using a chain of commands. The final solution is simply:\ncy.location('pathname')\n  .should('include', '/item/')\n  // subject is a string \"...\"\n  .invoke('split', '/')\n  // subject is string[]\n  .should('not.be.empty')\n  // we can use Lodash _.last\n  // to yield the last element\n  .then(Cypress._.last)\n  // subject is a string\n  .should('equal', '470')\nFind more examples like this at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-06-10T15:12:01Z"
  },
  {
    "videoId": "8HaNYv5KUxE",
    "title": "Use Cypress Have.Attr Assertion",
    "description": "The Cypress assertion \"have.attr\" behaves slightly differently from the other assertions. It changes the subject from the DOM element to the value of the attribute. This video shows how useful it could be - you can chain the assertions to check if the attribute is present, then chain assertions to check something about its value.\n\n// check the presence of an attribute\ncy.get('#my-link').should('have.attr', 'id')\n// check the attribute and its exact value\ncy.get('#my-link').should('have.attr', 'id', 'my-link')\n// check the presence of an attribute and\n// then validate the length of its value\n// the anchor title should be at least 5 characters\ncy.get('#my-link')\n  .should('have.attr', 'title')\n  .its('length')\n  .should('be.greaterThan', 5)\n\nFor more examples, see https://glebbahmutov.com/cypress-examples/commands/assertions.html",
    "publishedAt": "2022-06-07T22:32:18Z"
  },
  {
    "videoId": "z56rRoh0z_c",
    "title": "How To Run All Specs In Cypress v10",
    "description": "This video shows my workaround for running all or some specs in Cypress v10 (where the \"Run all\" button has been removed). Read more about this solution in the blog post https://glebbahmutov.com/blog/run-all-specs-cypress-v10/\n\nUpdate: I have improved this solution to automatically ignore the \"app.cy.js\" spec file when using the \"cypress run\" command, watch the video https://www.youtube.com/watch?v=butlgoP4SzI",
    "publishedAt": "2022-06-04T18:46:52Z"
  },
  {
    "videoId": "rFhTejdPGAM",
    "title": "Stub cy.request Command Using cy.stub And Use cypress-recurse Example",
    "description": "In this video, we will use the https://github.com/bahmutov/cypress-recurse plugin to call the server using cy.request command until it responds with an object \"status: COMPLETE\". We simulate the server by stubbing the cy.request command using cy.stub command to return incomplete responses at first, and on the 3rd call to return the completed response. Find more cy.stub and cy.spy examples at https://glebbahmutov.com/cypress-examples/commands/spies-stubs-clocks.html",
    "publishedAt": "2022-06-03T12:58:29Z"
  },
  {
    "videoId": "E4Thn8FAcWI",
    "title": "Test The HTML Dialog Element Using Cypress",
    "description": "All modern browsers support the HTML Dialog element (see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog). In this video, I show a Cypress test that works with such dialog - it is a normal HTML markup after all. Find the full test and more Dialog test examples at https://glebbahmutov.com/cypress-examples\n\nThe test:\n\ncy.get('dialog')\n  .should('be.visible')\n  .and('have.attr', 'open', 'open')\n  .contains('button', 'OK')\n  .click()\ncy.get('dialog')\n  .should('not.be.visible')\n  .and('not.have.attr', 'open')\ncy.get('dialog').invoke('attr', 'open', 'open')",
    "publishedAt": "2022-06-01T13:05:44Z"
  },
  {
    "videoId": "r-fMXwHblKM",
    "title": "Select A Duplicate Option Using Its Index",
    "description": "If your \"select\" element has options with duplicate values, cy.select refuses to select them - because it is not sure which item you want. Luckily, we can still select an item by index. This video shows how to find the index by the value attribute and then cy.select(index) from a Cypress test. Find the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-05-31T18:40:32Z"
  },
  {
    "videoId": "wRLODxdWyuw",
    "title": "Click Each Item Test Refactoring",
    "description": "In this example, we start with a test that is imperative and keeps track of the number of clicks by using a local variable. The test also uses jQuery methods to trigger click events. We refactor this test to:\n- work correctly as a human user (who cannot click on the disabled button)\n- click multiple buttons one after another without using cy.each + cy.click commands\n- be declarative and not use local variables\n\nFind the full example and lots more Cypress test examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-05-31T13:32:17Z"
  },
  {
    "videoId": "MU08Air76bI",
    "title": "Find Duplicate Text Kiwi And Confirm The Rest Of Elements Are Unique",
    "description": "What if the list of elements has one duplicate value and the rest of the elements have unique text? We can confirm it using \"cy.get\" (but not the \"cy.contains\") command with \":contains\" selector. We can also invert the selection using \":not(:contains)\" combination.\n\ncy.get('li:contains(Kiwi)').should('have.length', 2)\ncy.get('li:not(:contains(Kiwi))')\n  .should('have.length', 4)\n  .then(function ($el) { return Cypress._.map($el, 'innerText') })\n  .then(function (values) {\n    const distinct = Cypress._.uniq(values)\n    expect(distinct).to.have.length(values.length)\n  })\n\nFind this and many more Cypress examples and recipes at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-05-30T14:30:12Z"
  },
  {
    "videoId": "yMiJj8qRx1s",
    "title": "Get And Confirm Element's Own Text Without Children Elements",
    "description": "This video explains how to get an element from the page, and then extract the element's own text (without the text of its children's elements) before confirming it. Find the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-05-22T18:39:11Z"
  },
  {
    "videoId": "PvfCOn1lq9Y",
    "title": "Text File Download Example",
    "description": "A small Cypress example showing how to download and verify a text file. We also delete the \"cypress/downloads\" folder before each test using the plugins file code. See the code in the repo https://github.com/bahmutov/cypress-file-download-example and more Cypress file download examples in the recipe \"File Download\" in the repo https://github.com/cypress-io/cypress-example-recipes",
    "publishedAt": "2022-05-20T17:30:43Z"
  },
  {
    "videoId": "OiL9zvd9xjc",
    "title": "Bonus Lesson 21: intercept and confirm navigator.sendBeacon calls",
    "description": "This is a bonus lesson from my \"Cypress Network Testing Exercises\" course https://cypress.tips/courses which shows spying on the application making \"navigator.sendBeacon\" calls to send small analytics events to the server. We confirm that the browser is sending plain text, converting it to a JSON object, and confirming it has the property \"fruit\". We then ensure that fruit is shown on the loaded page.\n\ncy.intercept('POST', '/got-fruit').as('beacon')\ncy.visit('/')\ncy.wait('@beacon')\n  .its('request.body')\n  .should('be.a', 'string')\n  .then(JSON.parse)\n  .should('have.property', 'fruit')\n  .then(function (fruit) {\n    cy.contains('#fruit', fruit)\n  })\n\nSee the \"navigator.sendBeacon\" docs at https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon and find an example application to test at https://github.com/bahmutov/fastify-example",
    "publishedAt": "2022-05-19T13:09:47Z"
  },
  {
    "videoId": "iXpIh6e5nA4",
    "title": "Cypress QRCode Example",
    "description": "This video teaches you how to use the \"@nuintun/qrcode\" NPM module to decode a Cypress PNG fixture file and confirm the text encoded in it. We load the fixture as base64 string, create an image \"src\" string and then pass to the qrcode module. It returns a promise that Cypress test waits for. The resolved value has data and other properties. We grab the \"data\" property and confirm the text inside. That is the text encoded in the QR image\n\nFind the full source code in the repo https://github.com/bahmutov/qrcode-example",
    "publishedAt": "2022-05-16T12:36:07Z"
  },
  {
    "videoId": "wJ3VyGEDHA0",
    "title": "Pass Data From One Spec To Another",
    "description": "Here is how you can pass data from one spec to another (caution: this approach makes the test execution dependent on the order of specs, which is an anti-pattern). You send it from the spec to the plugins file, where it is stored while the browser closes one spec and opens another.\n\nTip: for a better approach, use my https://github.com/bahmutov/cypress-data-session plugin",
    "publishedAt": "2022-05-15T15:18:51Z"
  },
  {
    "videoId": "0sY1tp0aVNM",
    "title": "Get Multiple Values From The Page Via Aliases And Test Context Properties",
    "description": "What if you need to get the current values or text of multiple page elements? Do you get a pyramid of doom? No, it can be done very simply in several ways (see the recipe \"Get multiple fields\" from https://glebbahmutov.com/cypress-examples/ for all my solutions), but the simplest in my mind is to use Cypress cy.as aliases and extract the values from the test context object\n\nfunction getFormValues() {\n  cy.get('#fname').invoke('val').as('fname')\n  cy.get('#lname').invoke('val').as('lname')\n  return cy.then(function () {\n    return {\n      fname: this.fname,\n      lname: this.lname,\n    }\n  })\n}\n\ngetFormValues().should('deep.equal', {\n  fname: 'Joe',\n  lname: 'Smith',\n})\n\nFor more, see https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-05-13T14:37:20Z"
  },
  {
    "videoId": "5VJOpg09w2k",
    "title": "Correctly Using instanceof Assertion In Cypress Test",
    "description": "Cypress tests run in its own iframe with its own \"window\" object. It is a separate iframe and a different \"window\" object from the application; the application runs in its own iframe. Thus grabbing an element from the application and using \"instanceof HTMLDivElement\" will fail - it compares the element created using one window's HTMLDivElement with a different HTMLDivElement function.\n\ncy.get('#name').should(function ($el) {\n  // 🚨 INCORRECT, WILL FAIL, JUST A DEMO\n  expect($el[0], 'is element').to.be.instanceof(HTMLDivElement)\n})\n\nThis video explains the Cypress iframe setup, and how to solve the above test case: you need to use the \"app window.HTMLDivElement\" and you can grab the \"app window\" reference using the cy.window command\n\ncy.window().then(function (win) {\n  cy.get('#name').should(function ($el) {\n    // ✅ a DOM element retrieved from the application's window\n    // is an instance of that window's HTMLDivElement\n    expect($el[0], 'is element').to.be.instanceof(\n      win.HTMLDivElement,\n    )\n  })\n})\n\nSee the full instanceof recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-05-12T13:25:28Z"
  },
  {
    "videoId": "O4ZBRoZCP-I",
    "title": "Validate Each Array Item",
    "description": "We can check each item in an array using cy.each command and assertions\n\ncy.wrap([1, 2, 3])\n  .should('be.an', 'array')\n  .each(function (x) {\n    expect(x).to.be.a('number').and.be.within(1, 3)\n  })\n\nThis example comes from https://glebbahmutov.com/cypress-examples/commands/assertions.html",
    "publishedAt": "2022-05-06T14:55:27Z"
  },
  {
    "videoId": "XMJP07Ft1nA",
    "title": "Instant Application Login Via External Domain Using cy.session And cy.origin Commands",
    "description": "The most awaited Cypress feature is here in Cypress v9.6.0 - visiting multiple domains in the same test. This short video shows how I log in via 3rd party auth provider using the new cy.origin command. \n\nThe test goes one step beyond that - it uses cy.session command to instantly restore the session, including the 3rd party cookies. Thus every login after the 1st one skips visiting the external domain 🤯\n\nbeforeEach(function () {\n  cy.session('login', function () {\n    // start the login\n\n    cy.origin('2nd domain', function () {\n      // log in via UI\n    })\n\n    // back to the local courses page\n    cy.location('pathname').should('equal', '/courses')\n  })\n})\n\nit('logs in', function () {\n  cy.visit('/courses')\n  // we are logged in!\n})",
    "publishedAt": "2022-05-05T17:47:54Z"
  },
  {
    "videoId": "jdXeKtrwJ8A",
    "title": "A Quick Should Have Text Example With Multiline Text",
    "description": "In this short example, I show an example where cy.contains fails to match the text of the element due to newlines and multiple whitespace characters. Instead, we should (pun intended) use the Chai assertion should \"have.text\".\n\nFind the full recipe and many more short examples of Cypress commands at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-05-04T19:35:54Z"
  },
  {
    "videoId": "sUHs2zLFjIM",
    "title": "Log In Using Words",
    "description": "This example comes from the blog post https://glebbahmutov.com/blog/login-words/ We collect the words shown on the page in the first part of the test. Then the application shows input elements for some words and we need to enter the correct word from the saved list.\n\nCollecting the shown words into an array:\nconst words = []\ncy.get('#show-words .words li')\n  .each(function ($li) {\n    words.push($li.text())\n  })\n\nPrinting the list of words (remember, you can use the information from the page only inside the cy.then callback)\nconst words = []\n// collect the words\n.then(function () {\n  cy.log(JSON.stringify(words))\n})\n\nType the words into the input element at that position\ncy.get('#login .words li').each(function ($li, k) {\n  const $input = $li.find('input')\n  if ($input.length) {\n    cy.wrap($input).type(words[k])\n  }\n})",
    "publishedAt": "2022-05-03T15:48:11Z"
  },
  {
    "videoId": "deNl1q1el0E",
    "title": "Query Elements With Retry-Ability To Avoid Flake",
    "description": "This example rewrites a flaky test to be less flaky. Instead of\n\ncy.get('#cart input') // query command\n  .eq(2) // query command\n  .clear() // action command\n  .type('20') // action command\n\nWe do the following\n\nconst selector = '#cart input:nth(2)'\ncy.get(selector) // query command\n  .clear() // action command\ncy.get(selector).should('have.value', '')\ncy.get(selector).type('20') // action command\ncy.get(selector).should('have.value', '20')\n\nThe new test follows the principles:\n- re-query the element from the page after big changes (like clearing it)\n- use a single complex selector like \"#cart input:nth(2)\" instead of separating \"cy.get(...).eq(...)\" commands\n- alternates commands and assertions to check if the application has finished processing the previous command\n\nFind this recipe at my https://glebbahmutov.com/cypress-examples/ and read the Cypress retry-ability guide at http://on.cypress.io/retry-ability",
    "publishedAt": "2022-05-02T13:12:59Z"
  },
  {
    "videoId": "Gxoo6uZMo9I",
    "title": "Filter Input Elements By Value Using cypress-should-really Plugin",
    "description": "This video teaches you how to find the input elements with the given value using https://github.com/bahmutov/cypress-should-really plugin. It builds up a \"should(callback)\" using small individual utility functions to modify and filter the data.\n\nimport { really, map, its, filter, isEqual } from \"cypress-should-really\"\n\ncy.get('#inputs input').should(\n  // [jqueryElement]\n  really(\n    map(its('value')), // [string]\n    filter(isEqual('fox')),\n    'have.length',\n    2,\n  ),\n)\n\nFor more, see the blog post https://glebbahmutov.com/blog/fp-cy-helpers/",
    "publishedAt": "2022-04-29T12:49:55Z"
  },
  {
    "videoId": "IRsPdCHyBSk",
    "title": "Find Input Elements With The Given Value Using cy.filter Command",
    "description": "How do you find all input elements with the current value X? Not the declared attribute \"value=X\", but the current runtime value X? This video shows my trick: get all possible input elements, then filter them using cy.filter(callback) to inspect the current \"element.value\" property. \n\ncy.get('#inputs input')\n  .filter(function (k, el) {\n    return el.value === 'fox'\n  })\n  .should('have.length', 2)\n\nFind this recipe and many others at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-04-28T12:18:22Z"
  },
  {
    "videoId": "512p4E4fQAc",
    "title": "Hide The Entered Email In The Form",
    "description": "And confirm the form submission works by checking the intercepted network call. This test comes from https://glebbahmutov.com/cypress-examples and shows a few tricks for working with forms in Cypress:\n- using cy.within to limit the commands to the elements inside a form\n- changing the \"type\" attribute of the input element to hide the email\n- attaching dummy \"click\" event handlers from the test\n- stubbing the form submission and confirming the sent form fields\n\nFor more, check out the blog post \"Keep passwords secret in E2E tests\" https://glebbahmutov.com/blog/keep-passwords-secret-in-e2e-tests",
    "publishedAt": "2022-04-27T15:34:39Z"
  },
  {
    "videoId": "2LdVcnYAE7Q",
    "title": "The cy.its Command Examples With Retries And Without",
    "description": "The cy.its command will retry checking the given property or path in the subject until it times out or the property exists. This video shows when you should use the \"timeout: 0\" option to disable the retries - when the subject can never change. For example, the subject yielded by the cy.request command will never change, thus we can disable the retries using the \"timeout: 0\" option to fail the test faster.\n\nThe test code (find the full source code at https://glebbahmutov.com/cypress-examples)\n\n// the following chain of commands checks the \"window\" object\n// again and again until the application sets the property \"appCustomField\"\n// The value of the property is yielded to the assertion\ncy.window().its('appCustomField').should('equal', 42)\n// tip: alternative solution using a single assertion\n// (which cannot have nested paths compared to the cy.its command)\ncy.window().should(\n  'have.property',\n  'appCustomField',\n  42,\n  'property added',\n)\n\n// We can avoid unnecessary retries when getting the property\n// using the \"timeout: 0\" option\ncy.request('https://jsonplaceholder.cypress.io/users/1')\n  .its('body', { timeout: 0 })\n  .should('include.keys', 'id', 'name', 'email')",
    "publishedAt": "2022-04-25T17:48:55Z"
  },
  {
    "videoId": "RyHSIk7nzD0",
    "title": "Find Text Item Without Flake Using cy.contains Command",
    "description": "This example comes from https://glebbahmutov.com/cypress-examples recipes. Imagine you need to find an item on the page with the given text. You can do it in several ways. This video shows a robust way, that retries the search. Even if the list is dynamic, the test will succeed because the cy.contains(selector, text) command retries finding the element. If you need to find several items, call cy.contains several times. Here is the final test code, and it could not be simpler.\n\nconst items = ['three', 'four', 'one']\nitems.forEach(function (item) {\n  cy.contains('#list li', item)\n})",
    "publishedAt": "2022-04-25T13:35:56Z"
  },
  {
    "videoId": "yE20OuYTcGo",
    "title": "Compare Numbers Using closeTo Assertion",
    "description": "If you have an imprecise number to check, the assertion \"closeTo(expected, precision)\" is your friend. In this video, I show how to use it to confirm the font size of an element to be 16 pixels +/- 1 pixel.\n\ncy.get('#font-size-example')\n  .invoke('css', 'fontSize')\n  .then(cy.log)\n  // the font size returned is in pixels, like \"16px\"\n  .should('match', /^\\d+px$/)\n  .invoke('replace', 'px', '')\n  .then(Number)\n  .should('be.closeTo', 16, 1)\n\nFind these examples and more at https://glebbahmutov.com/cypress-examples/commands/assertions.html",
    "publishedAt": "2022-04-20T21:10:49Z"
  },
  {
    "videoId": "XLgwQsSa9PM",
    "title": "Check Visible Elements In The Current Viewport",
    "description": "This video shows how to wait for the loading elements in the current viewport to go away. We will use the current window and the element's bounding rectangle to check if the element is invisible. \n\nFind the source code in the repo https://github.com/bahmutov/loading-elements and read the blog post https://glebbahmutov.com/blog/visible-in-the-viewport/",
    "publishedAt": "2022-04-14T14:27:50Z"
  },
  {
    "videoId": "AO9iPIg9yKk",
    "title": "Use cy.filter For Complex Element Filtering",
    "description": "If you need to select elements on the page using some kind of complex logic, like \"find all elements with class X or having the text Y\", then the cy.filter is your solution. It allows one to use a predicate callback function that gets each DOM element and can return \"true\" or \"false\" to select it. In this example from https://glebbahmutov.com/cypress-examples we filter elements by class and by text. Let's find all list items with the text \"cat\" or class \"pet\".\n\ncy.get('#animals li')\n  .should('have.length', 5)\n  .filter(function (k, el) {\n    return (\n      el.classList.contains('pet') ||\n      el.innerText.includes('cat')\n    )\n  })\n  .should('have.length', 4)",
    "publishedAt": "2022-04-13T14:38:04Z"
  },
  {
    "videoId": "WUQpyB-oquE",
    "title": "Select Elements By Computed Style",
    "description": "How do you select elements by the run-time color? For example, how do you select anchor links that are red? An element can be red because a class was applied, or an inline style, or it could be made red using JavaScript. To help you, the cy.filter https://on.cypress.io/filter command allows using a callback function that can grab the computed style of an element and return true if the current runtime color of an element is red.\n\ncy.get('a').filter(function (k, el) {\n  const color = window.getComputedStyle(el).color\n  return color === 'rgb(255, 0, 0)'\n})\n\nFind this example among the recipes at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-04-12T13:00:27Z"
  },
  {
    "videoId": "h71mYvrsKWo",
    "title": "Disable CSS Animations",
    "description": "This video shows how we can \"speed up\" CSS Animations by injecting a piece of CSS into the body of the page. This piece of code overrides all app-defined transitions, effectively removing them. For more information, read the blog post \"How Cypress Freezes CSS Animations And You Can Too\" https://glebbahmutov.com/blog/css-animations/ and find the source code in the repo https://github.com/bahmutov/css-animation-cypress-example",
    "publishedAt": "2022-03-31T18:24:17Z"
  },
  {
    "videoId": "KHJkRp_rRYg",
    "title": "cypress-recurse: Reload The Page Until We See 7 Plus Check The Numbers Before That",
    "description": "This is an introduction to the \"reduce\" feature of cypress-recurse plugin https://github.com/bahmutov/cypress-recurse In this example, we reload the page until we see the number 7. We want to check if any of the previous numbers randomly shown are NOT 7 after we stop. We can accumulate all values we see while iterating using Cypress commands. Then we can grab the reduced value with all the numbers and run assertions against it. \n\nrecurse(\n  function () {\n    return cy.get('#result').invoke('text').then(parseInt)\n  },\n  function (n) {\n    return n === 7\n  },\n  {\n    limit: 60,\n    delay: 1000, // sleep for 1 second before reloading the page\n    timeout: 60_000, // try up to one minute\n    log: false,\n    reduceFrom: [],\n    reduce(numbers, n) {\n      numbers.push(n)\n    },\n    post () {\n      cy.reload()\n    },\n    yield: 'reduced',\n  },\n).then(function (numbers) {\n  expect(numbers).to.not.include(7)\n})",
    "publishedAt": "2022-03-25T11:39:01Z"
  },
  {
    "videoId": "u2JUQY2TE3A",
    "title": "cypress-recurse: Click On The Button Until It Becomes Disabled",
    "description": "Another https://github.com/bahmutov/cypress-recurse example: in a paginated table we need to go to the last page. We know we reached the last page when the \"Next\" button gets the attribute \"disabled\" We can check if an element has this attribute by using the jQuery attr() method call.\n\nrecurse(\n  function () { \n    return cy.get('[value=next]') \n  },\n  function ($button) {\n    return $button.attr('disabled') === 'disabled'\n  },\n  {\n    log: false,\n    limit: 10,\n    timeout: 20_000,\n    delay: 500,\n    post() {\n      cy.get('[value=next]').click()\n    },\n  },\n)\n\nSee the pagination-spec.js",
    "publishedAt": "2022-03-24T14:37:31Z"
  },
  {
    "videoId": "xlc6yQLAqNg",
    "title": "Implement Todo Item Toggle Using Cypress Test-Driven-Development",
    "description": "This video shows the full feature implementation while writing and running API and End-to-End Cypress tests. We implement toggling the todo items in a TodoMVC application (find its source code at https://github.com/bahmutov/cypress-workshop-basics). We first confirm the backend end supports the REST API calls to complete a todo, then we write E2E tests to make sure the web application is calling the backend correctly. Since the feature is missing in the web client, the E2E test fails and we implement it to make the test pass.\n\nRead the blog post \"Cypress Test-Driven Development Example\" https://glebbahmutov.com/blog/cypress-tdd/\n\nThe video teaches you how to perform:\n- API tests using Cypress\n- combine API steps with the user interface steps\n- inspect the inner data in the application to confirm the page UI correctly updates its state\n- spy on the network calls to ensure the expected calls are made to update the app\n\n00:00 The problem - the application does not save \"Completed\" todos\n01:28 Decide which tests to write\n03:05 Write an API test to confirm the backend updates an item\n06:15 Test the UI to Vuex data store update\n09:51 Confirm the application is making REST call to complete the todo\n14:00 The final green end-to-end test",
    "publishedAt": "2022-03-19T18:51:38Z"
  },
  {
    "videoId": "OWTrczUUVpA",
    "title": "Write An API Test Using Cypress",
    "description": "In this video, I write a simple CREATE + GET + DELETE an item API test using Cypress. I will use cy.request command to make HTTP calls, get the new item's ID back and then delete that item.\n\n// reset the backend data using POST /request call\n// https://on.cypress.io/request\ncy.request('POST', '/reset', { todos: [] })\n// add an item using POST /todos call\n// passing the title and the completed: false properties\ncy.request('POST', '/todos', \n  { title: 'write more tests', completed: false })\n  // from the response get the body and confirm\n  // it has the expected properties, including the \"id\"\n  .its('body')\n  .should('have.keys', ['id', 'title', 'completed'])\n  // get the \"id\" property and confirm it is a number\n  .its('id')\n  // TIP: add a short wait for our simple server to\n  // really save the added item\n  .wait(100, { log: false })\n  .then(cy.log)\n  .then(function (id) {\n    expect(id).to.be.a('number')\n    cy.request('GET', `/todos/${id}`)\n      .its('body.title')\n      .should('eq', 'write more tests')\n    // and then use the DELETE /todos/:id call to delete it\n    // the status of the response should be 200\n    cy.request('DELETE', `/todos/${id}`)\n      .its('status').should('equal', 200)\n  })\n\nThe above example comes from https://github.com/bahmutov/cypress-workshop-basics For more, see the plugin https://github.com/bahmutov/cy-api",
    "publishedAt": "2022-03-19T17:59:10Z"
  },
  {
    "videoId": "M43XVZrZRtU",
    "title": "Confirm The Total Sum Shown Under The Table Of Prices",
    "description": "In this example, we are going to do a lot of text parsing to get the prices and the totals and confirm the displayed total is correct. Find the full example in the recipes at https://glebbahmutov.com/cypress-examples\n\nWe need to grab the prices from the 4 column of the table, sum the up, then confirm the value show under the table is correct\n\ncy.get('table#sales tbody td:nth-child(4)')\n  .then(function ($cells) {\n    const totals = $cells\n      .toArray()\n      .map(function (el) {\n        return el.innerText\n      })\n      .map(function (s) {\n        return s.replace('$', '')\n      })\n      .map(parseFloat)\n    const sum = Cypress._.sum(totals)\n    cy.log(`Total should be ${sum}`)\n    cy.contains('#total', '$' + sum)\n  })\n\nRelated video: \"Check The Prices Table Rows\" https://youtu.be/DxlqDA7tIOw",
    "publishedAt": "2022-03-18T16:37:04Z"
  },
  {
    "videoId": "rMviL8RiGEk",
    "title": "Check The List Of Zip Codes",
    "description": "This video shows an application that \"validates\" a list of zip codes. The application takes the zip code one by one and returns a status if the application delivers to that zip area. Our test needs to check a list of zip codes, and to fill two lists: supported and unsupported zip codes, and then verify the two lists.\n\nWe iterate over the data, entering the zip code one by one, then waiting for the application to give us an answer. We store the zip codes and then compare the results with the computed lists. This fun little exercise comes from the recipes in https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-03-17T13:50:06Z"
  },
  {
    "videoId": "8LcTNeILQtQ",
    "title": "Overwrite The cy.each Command",
    "description": "In this video, I overwrite the standard cy.each command. Instead we will use the \"each\" function from cypress-recurse plugin to allow us to iterate until the predicate function returns true\n\n// https://github.com/bahmutov/cypress-recurse\nimport { each } from 'cypress-recurse'\n\nCypress.Commands.overwrite(\n  'each',\n  function (originalFn, items, itemCallback, stopPredicate) {\n    return each(itemCallback, stopPredicate)(items)\n  },\n)\n\nFind the full test in https://github.com/bahmutov/better-cypress-each-example and read the blog post https://glebbahmutov.com/blog/better-cy-each/",
    "publishedAt": "2022-03-15T21:36:41Z"
  },
  {
    "videoId": "a-LErnTG1lU",
    "title": "Use each Function From cypress-recurse Plugin To Iterate And Stop",
    "description": "This video shows how to use \"each\" function from the https://github.com/bahmutov/cypress-recurse plugin to iterate over the elements and stop when we see the number 7. It is simpler than using the standard cy.each command.\n\n// https://github.com/bahmutov/cypress-recurse\nimport { each } from 'cypress-recurse'\n\nit('stops when it sees 7 using each from cypress-recurse', function () {\n  cy.visit('index.html')\n\n  cy.get('tbody button').then(\n    each(\n      function ($button) {\n        return cy\n          .wrap($button)\n          .click()\n          .parent()\n          .parent()\n          .contains('td', /\\d/)\n          .invoke('text')\n          .then(Number)\n      },\n      function (n) {\n        return n === 7\n      }\n    ),\n  )\n})\n\nFind this test in https://github.com/bahmutov/better-cypress-each-example repository and read the blog post https://glebbahmutov.com/blog/better-cy-each/",
    "publishedAt": "2022-03-15T17:23:59Z"
  },
  {
    "videoId": "DyPr8Dq9D58",
    "title": "Cy.each Yields The Original Subject",
    "description": "The cy.each command https://on.cypress.io/each yields the original subject unchanged, even if you stop the iteration early, or return different values.\n\nconst fruits = ['apples', 'bananas', 'oranges', 'pears']\ncy.wrap(fruits)\n  .each(function (fruit, k) {\n    console.log(k, fruit)\n    if (k === 2) {\n      return false\n    }\n    cy.log('fruit', fruit)\n  })\n  // cy.each yields the original subject\n  // even if you stop the iteration early\n  .should('equal', fruits)\n\nFind this example at https://github.com/bahmutov/better-cypress-each-example and read the blog post https://glebbahmutov.com/blog/better-cy-each/",
    "publishedAt": "2022-03-15T15:30:28Z"
  },
  {
    "videoId": "G4xs9_cAm2c",
    "title": "Stop cy.each Iteration When Using Cypress Commands Inside The Callback Function",
    "description": "If the cy.each callback uses Cypress commands and we want to stop the iteration based on the output of those commands, we need to use cy.then + a local closure variable to stop queueing up Cypress commands. The final solution from https://github.com/bahmutov/better-cypress-each-example is this:\n\ncy.visit('index.html')\nlet shouldStop = false\ncy.get('tbody button').each(function ($button, k) {\n  cy.then(function () {\n    if (shouldStop) {\n      return\n    }\n    console.log('button', k)\n    cy.wrap($button)\n      .click()\n      .parent()\n      .parent()\n      .contains('td', /\\d/)\n      .invoke('text')\n      .then(Number)\n      .then(function (n) {\n        if (n === 7) {\n          shouldStop = true\n        }\n      })\n  })\n})\n\nTip: to visualize the Cypress command chain this video uses https://github.com/bahmutov/cypress-command-chain plugin and read the blog post https://glebbahmutov.com/blog/better-cy-each/",
    "publishedAt": "2022-03-15T14:53:19Z"
  },
  {
    "videoId": "lhb5Lt9RwE4",
    "title": "How To Stop cy.each Iterations For Simple Cases",
    "description": "If the cy.each callback is synchronous, it can return \"false\" value to stop the iteration.\n\nit('cy.each stops iteration when returning false', function () {\n  const fruits = ['apples', 'bananas', 'oranges', 'pears']\n  cy.wrap(fruits).each(function (fruit, k) {\n    console.log(k, fruit)\n    if (k === 2) {\n      return false\n    }\n    cy.log('fruit', fruit)\n  })\n})\n// prints \"apples\" and \"bananas\"\n\nFind this example at https://github.com/bahmutov/better-cypress-each-example and read the blog post https://glebbahmutov.com/blog/better-cy-each/",
    "publishedAt": "2022-03-15T14:50:07Z"
  },
  {
    "videoId": "M0RxEeJaq_E",
    "title": "Iterate Over Table Rows And Click A Button In Each Row Using cy.each Command",
    "description": "This video introduces the cy.each command and shows how to iterate over multiple elements, and perform Cypress commands for each element. Find the full source code in https://github.com/bahmutov/better-cypress-each-example (spec01.js and spec02.js)\n\nit('clicks every button', function () {\n  cy.visit('index.html')\n  cy.get('tbody button').each(function ($button) {\n    cy.wrap($button)\n      .click()\n      .parent()\n      .parent()\n      .contains('td', /\\d/)\n      .invoke('text')\n      .then(cy.log)\n  })\n})\n\nRead the blog post https://glebbahmutov.com/blog/better-cy-each/",
    "publishedAt": "2022-03-15T13:27:09Z"
  },
  {
    "videoId": "FTjWAeCWpHQ",
    "title": "Using Should Match Assertion Against Elements Or Text",
    "description": "If you use Cypress \".should('match', ...)\" assertion, its behavior depends on what the current subject is. If the current subject is a jQuery object, then the match assertion uses the jQuery https://api.jquery.com/is/ method to check if the element matches the given text selector. If the current subject is a string, the match assertion checks if that string matches the given regular expression. This video shows both variants in action.\n\n// check if the element matches the complex jQuery selector\ncy.get('#one').should(\n  'match',\n  '#one.btn-large.btn:contains(\"First\")',\n)\n// checks if the text of the element matches the regular expression\ncy.get('#fruit')\n  .invoke('text')\n  .should('match', /(orange|apple)/i)\n\nFind this and many other examples at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-03-15T12:29:58Z"
  },
  {
    "videoId": "h8NfDFsgdW4",
    "title": "Randomly Pick Two Checkboxes Out Of Four And Click On Them",
    "description": "This example starts with four clear checkboxes, picks random two, and then clicks on them. Then it verifies that two checkboxes are checked. \n\ncy.get('#checkboxes input[type=checkbox]')\n  .should('be.visible')\n  .and('have.length', 4)\n  .then(function ($items) {\n    return Cypress._.sampleSize($items.toArray(), 2)\n  })\n  .should('have.length', 2)\n  .click({ multiple: true })\ncy.get('#checkboxes input[type=checkbox]:checked').should(\n  'have.length',\n  2,\n)\n\nFind this example and more at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-03-14T16:05:02Z"
  },
  {
    "videoId": "G-4HbUuUqIM",
    "title": "Use cypress-recurse To Click The Back Button Until It No Longer Exists",
    "description": "In this example, I show how to grab the Back button, and click on it. We repeat the same commands until we get to the very first page where the button no longer exists. We will use https://github.com/bahmutov/cypress-recurse plugin to iterate without any boilerplate code",
    "publishedAt": "2022-03-11T14:34:56Z"
  },
  {
    "videoId": "8rtBk9MBjXA",
    "title": "Use cypress-recurse To Ping The Site Before Visiting It",
    "description": "In this video, I show 3 ways of checking if the server is responding before loading it using the cy.visit command. \n\n- write your own recurse function that uses \"fetch('/')\" to check if the server is responding\n- overwrite the cy.visit command to check the site first by pinging it\n- use cypress-recurse plugin to remove the boilerplate code of recursively calling the pinging function\n\nFind the full source code in the branch \"recursive\" of the repo https://github.com/bahmutov/live-example/tree/recursive/cypress/integration\n\nFind the cypress-recurse plugin at https://github.com/bahmutov/cypress-recurse",
    "publishedAt": "2022-03-11T13:38:17Z"
  },
  {
    "videoId": "8Gvwsch1bao",
    "title": "Implement A Test That Finds A Particular Slide In A Carousel",
    "description": "This test shows how to check if an element is visible, and if not, click on the \"Next\" button in the carousel. The test keeps clicking and checking until the desired slide becomes visible. Then the test clicks on the slide and checks the destination URL\n\nThe full test is below\n\nit('finds the right slide', function () {\n  cy.visit('/')\n  cy.contains('section', '20+ Courses video library FREE ACCESS')\n    .should('be.visible')\n    .scrollIntoView()\n    .next()\n    .within(function () {\n      function getNextSlide() {\n        cy.contains('.swiper-slide', 'with 7 live projects').then(\n          function (el) {\n            if (Cypress.dom.isVisible(el)) {\n              cy.log('Found it!')\n              cy.wrap(el).contains('Get Started').click()\n            } else {\n              cy.wait(1000)\n              cy.get('.swiper-button-next').click().then(getNextSlide)\n            }\n          },\n        )\n      }\n      getNextSlide()\n    })\n  cy.url().should(\n    'equal',\n    'https://www.selenium-tutorial.com/p/automation-architect-in-selenium-7-live-projects',\n  )\n})\n\nFor more, see https://glebbahmutov.com/cypress-examples/ and subscribe to https://cypresstips.substack.com/",
    "publishedAt": "2022-03-09T17:28:19Z"
  },
  {
    "videoId": "_vqOtLIGI9o",
    "title": "Iterate Through Pages And Count Rows Using Recursion",
    "description": "In this example, I have to iterate through pages until the \"Next\" button is disabled. On every page, I grab the number of visible table rows, adding them all up. After we get to the last page and the \"Next\" button is disabled, we wrap the total rows count and use an alias to save the final value. Later, we will get the value using the alias and confirm it is equal to the expected number. Find the source code and more examples like this one at https://github.com/bahmutov/cypress-recurse",
    "publishedAt": "2022-03-07T13:40:30Z"
  },
  {
    "videoId": "o9zsDXl97L8",
    "title": "Detect Duplicate Attributes Using Lodash Functions And Should Callback",
    "description": "Imagine we have several elements, and each has a data attribute. Can we confirm there are no duplicate data attributes in the list? Yes, using a \"should(callback)\" function that uses the convenient Lodash functions to extract and process the attributes.\n\nconst { map, countBy, pickBy } = Cypress._\ncy.get('li').should(function ($li) {\n  const ids = map($li, function ($el) {\n    return $el.getAttribute('data-product-id')\n  })\n  const counts = countBy(ids)\n  const duplicates = pickBy(counts, n is larger than 1)\n  expect(duplicates).to.be.empty\n})\n\nFind this recipe and more examples at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-03-04T18:57:36Z"
  },
  {
    "videoId": "51WPx7gvbAU",
    "title": "Confirm Total Sum Using Data Attributes And Automatic Waiting",
    "description": "In this example (taken from https://glebbahmutov.com/cypress-examples/) I how to sum up multiple data attributes, and then correctly print the value to the Command Log. We then wait for another element to have its data attribute set (we use built-in Cypress retries) and confirm the sum of item prices is equal to the total computed by the application.",
    "publishedAt": "2022-03-03T16:31:03Z"
  },
  {
    "videoId": "BuSBVc3d99Y",
    "title": "Increase Chai Truncate Threshold To Show More Information",
    "description": "In this tip, I show how to fully show arrays when comparing them in Cypress. Since Cypress uses Chai assertions under the hood, you can apply a setting to increase the error message truncate limit, and longer arrays will be shown without shortening them into \"[ Array ]\" strings\n\nchai.config.truncateThreshold = 200\nconst fruits = ['Apples', 'Oranges', 'Pears', 'Kiwi']\ncy.wrap(fruits).should('deep.equal', [\n  'Oranges',\n  'Grapefruits',\n  'Plums',\n  'Grapes',\n])\n\nThanks to https://www.linkedin.com/posts/gurudatt-s-a-5b892224_cypress-cypressio-testautomation-activity-6903244451108519936-4klR for this tip\n\nFind this example at http://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-03-02T16:33:21Z"
  },
  {
    "videoId": "wAjhXohhYjc",
    "title": "Fight The Element Detached From DOM Error Using jQuery Click",
    "description": "Sometimes all standard ways to fight the test flake and the \"Element detached from DOM\" error are not solving the problem. In this case, the application removes the button while the test is trying to click on it, causing an error. To solve this, we can use jQuery \"click()\" method instead of cy.click() command. The jQuery method does not have the checks built into the Cypress command (is the button actionable, visible, etc), thus it clicks and the attached handler executes.\n\ncy.get('#jquery-click #a-button')\n  .wait(1000)\n  .then(function ($button) {\n    $button.click()\n  })\n\nFind this example and others at http://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-03-01T13:33:54Z"
  },
  {
    "videoId": "R79ai463xIM",
    "title": "Check If An Image Loads",
    "description": "You can verify that an image on the page truly loads by checking its property \"naturalWidth\". If the image does not load, that property stays at zero. If the image loads in the browser correctly, then this property will have a value from the image (number of columns). Find this example and many more recipes at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-02-28T21:08:29Z"
  },
  {
    "videoId": "HXe5tdaTfMM",
    "title": "A Quick Cypress Unit Test For Universal JavaScript Code",
    "description": "If you are writing end-to-end Cypress tests, you can quickly unit test any JavaScript code that can run in the browser. In this video, I am testing a function parsing a line of text by creating a few unit tests to be executed in the browser.\n\nFind this example code in https://github.com/bahmutov/grep-tests-from-pull-requests repo and read the blog post https://glebbahmutov.com/blog/universal-code-test/",
    "publishedAt": "2022-02-28T18:55:34Z"
  },
  {
    "videoId": "K5x2oXWsWqI",
    "title": "Cypress Command Chain Plugin Introduction",
    "description": "Cypress queues every command into a single chain of commands to be executed. This sometimes confuses people new to Cypress; what commands are in the queue? What are their arguments? Why does cy.log print an undefined value? In this video, I introduce the https://github.com/bahmutov/cypress-command-chain - a tiny module that adds to the Cypress Command Log the \"Command Queue\" list. It shows all queued-up commands with their arguments, making it clear which test commands have finished, and which ones are still about to run. \n\nThe approach has been described in the blog post https://glebbahmutov.com/blog/visualize-cypress-command-queue/\n\nTake a look at my presentation https://slides.com/bahmutov/reactive-conf for more information about Cypress command queue and how it is different from the other test runners.",
    "publishedAt": "2022-02-26T19:38:30Z"
  },
  {
    "videoId": "4jx7YQ48gQc",
    "title": "Do Not Use cy Commands Inside A Should Callback Function",
    "description": "The following test is incorrect: it uses cy.contains command inside a callback function passes to the \"should(cb)\". It will time out\n\nfunction checkFruit(fruit) {\n  cy.contains('#fruit', fruit)\n}\ncy.wait('@fruit')\n  .its('response.body.fruit')\n  .should(checkFruit)\n\nThe \"should(cb)\" will run potentially multiple times, retrying the given value. Each time it tries to schedule the cy.contains command, leading to unpredictable chain of commands. The right way is to first assert the value (if necessary) and then call the \"checkFruit\" function just once using cy.then instead of cy.should\n\ncy.wait('@fruit')\n  .its('response.body.fruit')\n  .should('be.a', 'string')\n  .then(checkFruit)\n\nFor more, read the blog post \"Cypress Should Callback\" https://glebbahmutov.com/blog/cypress-should-callback/",
    "publishedAt": "2022-02-25T18:10:06Z"
  },
  {
    "videoId": "gd7Zx93VxOo",
    "title": "Wait For The Page And Elements To Fully Render Before Interacting To Avoid Detached From DOM Error",
    "description": "This video shows how I wait for the page to fully load by observing the new elements that appear during the tests, and the Ajax calls the application is making. My goal is to only work with the page after it has finished loading and re-rendering (otherwise I might get a dreaded \"Element detached from DOM\" Cypress error). In this case, when testing a Shopware site, the charts were loaded at the start, and the menu items were getting their labels from the server using an Ajax call. If the test does not \"wait\" for the labels, it might try to click the menu item. If the Ajax call returns and the application re-renders the menu item element, Cypress might fail to click the menu properly. Here is my more robust test:\n\n// make sure the application has finished loading its charts\ncy.get('.sw-chart').should('have.length.gte', 2)\ncy.get('.sw-admin-menu__item--sw-order').click()\n// the menu item will request the label \"Overview\" from the server\n// let's wait for that menu to appear before clicking the menu item\ncy.contains('.navigation-list-item__sw-order-index', 'Overview').click()\n// verify we end up on the right page after the menu click\ncy.location('hash').should('include', '/sw/order/index')\n\nFor more information, see video https://youtu.be/CMOjrKoBBwc",
    "publishedAt": "2022-02-24T17:50:25Z"
  },
  {
    "videoId": "o6hRLV6a9Hc",
    "title": "Check Input Element Trimming Spaces From The Entered Values",
    "description": "A simple Cypress test can confirm our application trims the leading and trailing spaces. \n\ncy.get('#name').type('   Joe  ')\ncy.get('#name').should('have.value', 'Joe')\n\nFor this and many more test examples, check out https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-02-21T20:11:52Z"
  },
  {
    "videoId": "_b6Mf8xI5bA",
    "title": "Find Elements With Specific Child Elements Using Cypress jQuery :has Selector",
    "description": "Let's find the LI elements but only the ones that have a child element with class \"label\" or class \"warning\". You can use cy.get and jQuery selector \":has\" to do it:\n\ncy.get('li:has(.label, .warning)').should('have.length', 3)\n\nThis example comes from https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-02-21T17:09:13Z"
  },
  {
    "videoId": "uzAbSwAlX7Q",
    "title": "Write E2E Tests Using Cypress And Run Them On GitHub Actions",
    "description": "Can you clone someone's web application, write end-to-end tests, and then execute them on CI, all in 10 minutes of total time? This video teaches you how to do this using my favorite tools:\n- Cypress test runner https://www.cypress.io/\n- GitHub Actions using my reusable workflow https://github.com/bahmutov/cypress-workflows\nTip: I even set up Prettier and explain how to use the start-server-and-test utility to work with the app and the tests locally.\nFind the full app and its tests in the https://github.com/bahmutov/todo-react-redux repo",
    "publishedAt": "2022-02-18T21:25:09Z"
  },
  {
    "videoId": "0iXISW0owWM",
    "title": "Labels For Checkboxes",
    "description": "In this video, I get all the checked checkboxes from the page. For each checked checkbox, I find the label and store its text in an array. Then I confirm the labels list to the expected values. This is a good each of complex querying of the page that you might need to do in order to collect the data to be asserted.\n\nconst labels = []\ncy.get('input[type=checkbox]')\n  .should('have.length', 4)\n  .filter(':checked')\n  .each(function ($checkbox) {\n    const id = $checkbox.attr('id')\n    cy.get(`label[for=\"${id}\"]`)\n      .invoke('text')\n      .then(function (s) {\n        labels.push(s)\n      })\n  })\ncy.wrap(labels).should('deep.equal', [\n  'I ❤️ apples',\n  'I ❤️ grapes',\n])\n\nFind the full recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-02-17T15:03:33Z"
  },
  {
    "videoId": "liFRu0Fu-Gs",
    "title": "Querying SVG From A Cypress Test",
    "description": "SVG elements are normal DOM elements in the browser, thus Cypress commands can query and check them. In this example, I show how to query an SVG element, check its attributes, and even change the \"fill\" attribute to make the element red. Find the full example at https://glebbahmutov.com/cypress-examples\n\n// get the SVG element, just like any DOM element\ncy.get('svg')\n  .should('have.attr', 'width', '90')\n  .and('have.attr', 'height', '90')\n  .find('path')\n  .first()\n  .invoke('attr', 'fill', 'red')",
    "publishedAt": "2022-02-17T14:29:18Z"
  },
  {
    "videoId": "2NpHXkZN1SY",
    "title": "jQuery :has and :contains Selectors in Cypress Tests",
    "description": "Cypress uses jQuery to select DOM elements, thus it can use advanced and powerful selectors like :has and :contains to find elements. For example, we can find all LI elements that have an element with class \"label\" and text \"New\" inside of them:\n\ncy.get('li:has(.label:contains(\"New\"))')\n\nThis example comes from https://glebbahmutov.com/cypress-examples site",
    "publishedAt": "2022-02-16T20:47:37Z"
  },
  {
    "videoId": "QzWAyCTvBY8",
    "title": "Test-Driven Development Using Cypress Unit Tests",
    "description": "In this video, I write unit tests for a simple function and run these tests using Cypress test runner. I also show how to use cy.wrap and cy.invoke methods to experiment with the code, while seeing the intermediate steps using Cypress time-traveling debugger.  The final spec file:\n\nimport { reverse } from '../../src/reverse'\n\nit('reverses a string', function () {\n  expect(reverse('hello')).to.equal('olleh')\n  expect(reverse()).to.equal('')\n  expect(reverse(42)).to.equal('')\n})\n\nit('wraps a string', function () {\n  cy.wrap('hello')\n    .invoke('split', '')\n    .invoke('reverse')\n    .invoke('join', '')\n    .should('equal', 'olleh')\n})\n\nFor more examples, read my Cypress blog posts https://glebbahmutov.com/blog/tags/cypress/",
    "publishedAt": "2022-02-14T17:33:34Z"
  },
  {
    "videoId": "ufmdrL28z-4",
    "title": "How To Silence cy.task and cy.invoke Command Logging",
    "description": "We can pass {log: false} to silence Cypress commands and prevent them from printing to the Command Log. Normally, this option goes after the command's arguments. But for cy.task and cy.invoke the order is different:\n\n// silence the cy.get command\ncy.get('...selector', {log: false})\n// silence the cy.task \n// the Cypress options is 3rd argument always\ncy.task('..name', null, {log: false})\n// silence the cy.invoke command\n// the Cypress options is 1st argument\ncy.wrap('hello')\n  .invoke({log: false}, 'split', '')\n\nBonus: to print something to the terminal we can create a little utility task\n// from the plugins file\non('task', {\n  print(x) {\n    console.log(x)\n    return null\n  }\n})\nWhenever we want to print something from the browser test, call the task with cy.task('print', 'my message')",
    "publishedAt": "2022-02-14T17:32:50Z"
  },
  {
    "videoId": "2Q6L6bzqQRY",
    "title": "Freeze The Page Using cy.clock Command",
    "description": "In this video, to catch the quickly disappearing toast element, I use cy.clock command that freezes all setTimeout / clock related window functions inside the application. With the DOM frozen, I can inspect the elements and find the toast element. Then I can write the correct cy.get command to confirm the message I expect to see after solving the Wordle game on the first attempt. Find the source code in https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-02-11T13:21:30Z"
  },
  {
    "videoId": "xFkIQmXiK5g",
    "title": "Use blockHosts Config To Avoid Loading 3rd Party Scripts From Tests",
    "description": "In this video, I update the spec file after Wordle has moved to NYTimes site. We need to change the baseUrl and update the local storage key in order to make the spec work again. I also add blockHosts to prevent 3rd party ads from loading during the tests. Find the updated code in https://github.com/bahmutov/cypress-wordle repository.",
    "publishedAt": "2022-02-11T12:54:28Z"
  },
  {
    "videoId": "in0ZXw1JtJQ",
    "title": "Return Cypress Chain",
    "description": "If you refactor the test code, remember to return the Cypress command chain from the utility functions. This lets you attach more commands and assertions to the returned object, and lets Cypress schedule the command execution correctly. In this video, I show how to write a utility function to wrap cy.request and handle a 404 response from the server. Find the full recipe at https://github.com/bahmutov/cypress-examples/blob/master/docs/recipes/request-not-found.md\n\nThe finished code\n\nfunction getTodo(id) {\n  const serverUrl = 'https://jsonplaceholder.cypress.io'\n  return cy\n    .request({\n      url: `${serverUrl}/todos/${id}`,\n      failOnStatusCode: false,\n    })\n    .then(function (response) {\n      if (response.status === 404) {\n        return 'Todo not found'\n      } else {\n        return response.body\n      }\n    })\n  // if the Todo is not found, return an error\n}\ngetTodo(10000001).should('equal', 'Todo not found')",
    "publishedAt": "2022-02-10T15:58:37Z"
  },
  {
    "videoId": "Ck5MutpVOQo",
    "title": "Handle 404 Status Code In cy.request Command",
    "description": "This video shows how cy.request can handle the error server response, like 404 \"Resource not found\". \n\nFind this example and more at https://glebbahmutov.com/cypress-examples/commands/network-requests.html",
    "publishedAt": "2022-02-10T15:39:55Z"
  },
  {
    "videoId": "J49ujGfe-fs",
    "title": "Decode The Phrasle Answer And Updated Vowel Logic",
    "description": "In the previous video \"Solve Phrasle Using Cypress\" https://www.youtube.com/watch?v=b2SDRH2_faE I have shown how to solve the game Phrasle by looking up the answer in the application state object. The author of the game has obfuscated the answer and has added vowel check popups. In this video, I show how to decode the answer and play the updated game using Cypress. Find the solution in the repo https://github.com/bahmutov/cypress-react-app-actions.",
    "publishedAt": "2022-02-08T14:43:32Z"
  },
  {
    "videoId": "b2SDRH2_faE",
    "title": "Solve Phrasle Using Cypress",
    "description": "In this video, I test the Phrasle.com game using Cypress test runner. I pull the answer to the daily Phrasle from the Remix context object, then enter the letters into the game, and then check that it was solved.\n\ncy.visit('/')\n  .its('__remixContext.routeData.routes/index.answer')\n  .then(function (answer) {\n    const letters = answer\n      .split('')\n      .filter(function (c) { return c.match(/[a-z]/) })\n    letters.forEach(function (letter) {\n      cy.contains('.Key', letter).click()\n    })\n  })\ncy.contains('.stat-todaysGame-info', 'PERFECT').should(\n  'be.visible',\n)\n\nFind the source code in https://github.com/bahmutov/cypress-react-app-actions/pull/1 For more, see my other videos about solving the Wordle game using Cypress and check out repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-02-07T16:34:50Z"
  },
  {
    "videoId": "d6zggQySjQM",
    "title": "Intro To Cypress React App Actions",
    "description": "This video shows how to check the React component's internal state and set it from the Cypress end-to-end test using the plugin cypress-react-app-actions. From the DOM element, get the component and check its state\n\nimport 'cypress-react-app-actions'\ncy.get('form')\n  .getComponent()\n  .its('state')\n  .should('deep.equal', startOfSecondPageState)\n\nOr set it to some object to immediately get the application into the required state\n\ncy.get('form')\n  .getComponent()\n  .invoke('setState', startOfSecondPageState)\n\nBoth development and production React builds should work. Find the full source code in the repo https://github.com/bahmutov/cypress-example-forms, the plugin at https://github.com/bahmutov/cypress-react-app-actions and read the blog post \"Control React Applications From Cypress Tests\" https://glebbahmutov.com/blog/react-app-actions/",
    "publishedAt": "2022-02-06T16:29:10Z"
  },
  {
    "videoId": "lRo8z2uVJEQ",
    "title": "What Are App Actions?",
    "description": "App actions are a way for Cypress end-to-end tests to reach into your application to validate its state or invoke methods, bypassing the user interface. They do not replace the normal tests - you still want to test the page of course, but not every test needs to perform the actions unrelated to its primary testing goal through the page interface. This particular video shows how to split a long test that fills several pages of the user registration form into separate tests. Each test finishes in the known state, and the next test can start from that state without re-filling the previous pages. Find the full source code in the repo https://github.com/bahmutov/cypress-example-forms and the approach described in the blog post \"Split a very long Cypress test into shorter ones using App Actions\" https://www.cypress.io/blog/2019/10/29/split-a-very-long-cypress-test-into-shorter-ones-using-app-actions/",
    "publishedAt": "2022-02-06T16:24:26Z"
  },
  {
    "videoId": "yk_ptq20Mic",
    "title": "Extract And Test The Day Number",
    "description": "In this video, we use \"should(match, regular expression)\" assertion to confirm that there is a number of days in the element. Then we parse the extracted string, convert the text to an integer and check if it is between 1 and 31 values. Find the full source code in the examples repo https://github.com/bahmutov/cypress-examples",
    "publishedAt": "2022-02-04T17:28:19Z"
  },
  {
    "videoId": "g_7LZXuEIMA",
    "title": "How To Call The Spy Function",
    "description": "This video shows how to call the spy function (if you must call it directly) while preserving the original \"this\" reference. Preserving the original \"this\" is needed if the method you are calling is using \"this\" inside of it.\n\nHere is our object\n\nconst testRunner = {\n  name: 'Cypress',\n  getName() {\n    return this.name\n  },\n}\n\nLet's create the spy and call it but make sure it has \"this\" pointing at the testRunner object instance\n\nexpect(\n  getNameSpy.call(testRunner),\n  'call the spy directly',\n).to.equal('Cypress')\n\nNote: calling the spy seems wrong to me. I would prefer to call the original method testRunner.getName()\n\nFind this and many other examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-02-04T16:57:15Z"
  },
  {
    "videoId": "tXqX2SQurMc",
    "title": "Stay Logged In During Tests By Preserving A Cookie",
    "description": "This video shows how to avoid logging the user in every test by using the Cypress.Cookies API\n\n// log in just once\nbefore(function () {\n  loginUser(username, password)\n})\n// preserve the session cookie before each test\nbeforeEach(function () {\n  Cypress.Cookies.preserveOnce('connect.sid')\n})\nFind the full source code in the repo https://github.com/bahmutov/chat.io\nAlternative: use cypress-data-session plugin to control the cookie explicitly https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2022-02-03T18:50:34Z"
  },
  {
    "videoId": "xIIF5joixaU",
    "title": "Run Cypress Tests Against URL Set In The Pull Request",
    "description": "In this video, I show how my Cypress tests can run the tagged tests against a preview URL listed in the pull request template text. If I want to run the tests against a different preview deploy, I just edit the baseUrl in the PR and run the tests. \n\nFind the full source code in https://github.com/bahmutov/todomvc-tests-circleci which is using https://github.com/bahmutov/grep-tests-from-pull-requests to process the pull request text and set the Cypress settings. For more, read the blog post \"How to Keep Cypress Tests in Another Repo While Using CircleCI\" https://glebbahmutov.com/blog/how-to-keep-cypress-tests-in-another-repo-with-circleci/",
    "publishedAt": "2022-02-03T15:28:08Z"
  },
  {
    "videoId": "7tzstwfuA6g",
    "title": "A Little Taste Of React App Actions",
    "description": "This video shows a React application running. From Cypress End-to-End tests we visit the site, get a DOM element, and then get to the React component. We can confirm the state of the component, its props, and even spy the calls to the \"setStste\" method - all from an end-to-end test, in the production React build without any modifications to the application. Find this particular source code in the repo https://github.com/bahmutov/react-counter\n\nPart of the example test\n\ncy.get('.Example')\n  .getComponent()\n  .its('state')\n  .should('deep.equal', { count: 2 })\ncy.get('.Example')\n  .getComponent()\n  .its('props')\n  .should('have.property', 'initialCount', 0)\n\nPart of the test showing spying on the \"setState\" call\n\ncy.get('.Example')\n  .getComponent()\n  .then(function (comp) {\n    cy.spy(comp, 'setState').as('setState')\n  })\ncy.contains('.Example button', 'Double me').click()\ncy.get('@setState').should('have.been.calledOnceWith', { count: 4 })",
    "publishedAt": "2022-02-02T22:32:23Z"
  },
  {
    "videoId": "X1yCcfIDPQk",
    "title": "Fix Circular Object Problem In Cypress",
    "description": "This short video shows how to solve the \"trying to serialize an object with circular references\" problem while trying to send an object from the spec to the plugins process. We bring a 3rd party dependency \"flatted\" that can handle objects with circular references and accurately recreate them.\n\nThe spec file\nconst { stringify } = require('flatted')\n\nit('prints object to the terminal', function () {\n  const o = {\n    name: 'Mike',\n    children: [\n      {\n        name: 'Joe',\n      },\n    ],\n  }\n  o.children[0].parent = o\n  cy.task('print', stringify(o))\n})\n\nThe plugin file\nconst { parse } = require('flatted')\nmodule.exports = function (on, config) {\n  on('task', {\n    print(x) {\n      console.log('%o', parse(x))\n      return null\n    },\n  })\n}",
    "publishedAt": "2022-02-01T18:48:38Z"
  },
  {
    "videoId": "DxlqDA7tIOw",
    "title": "Check The Prices Table Rows",
    "description": "In this short example video, I show how I would check a table with prices and quantities to confirm the table has the correct total. We can find the cells, then use cy.spread to get each cell as its own element, extract the text and convert it to numbers. \n\nLet's confirm the second row has the correct total.\n\ncy.get('#sales tbody tr')\n  .eq(1)\n  // get the row cells\n  .find('td')\n  // spread the table cells into individual DOM elements\n  .spread(function (nameEl, priceEl, quantityEl, totalEl) {\n    const name = nameEl.innerText\n    const price = parseFloat(priceEl.innerText.replace('$', ''))\n    const quantity = parseInt(quantityEl.innerText)\n    const total = parseFloat(totalEl.innerText.replace('$', ''))\n    expect(price * quantity, `total for ${name}`).to.equal(total)\n  })\n\nFind the full recipe in the repo https://github.com/bahmutov/cypress-examples",
    "publishedAt": "2022-01-28T16:48:33Z"
  },
  {
    "videoId": "y8PalMNf5N4",
    "title": "Debug cy.contains or Cypress.env problem",
    "description": "In this video, the command \"cy.contains(Cypress.env(...))\" throws an error. Is it a cy.contains or a Cypress.env problem? I show how to solve this problem step by step. Some tips from the video:\n\n- always check the value you get from the Cypress.env object before using it\n- you can see the values in the Cypress.env object right from the DevTools console\n- you can overwrite the current values in the Cypress.env object by calling Cypress.env(key, value) from the DevTools console\n- you can see the entire config object with all resolves settings and the \"env\" object by looking at the Cypress \"Settings\" tab",
    "publishedAt": "2022-01-27T17:31:26Z"
  },
  {
    "videoId": "4MOfRd6I3UY",
    "title": "Solving Various Wordle Apps Using The Same Algorithm And Different Page Objects",
    "description": "This video explains the solve function that interacts with the page via page objects. It allows us to use the same code to solve 3 different Wordle implementations, even if the structures of the page are different from each other.\n\nSolved games:\n- the original https://www.powerlanguage.co.uk/wordle/\n- a greener wordle https://agreenerworldle.org/\n- Vue implementation https://vue-wordle.netlify.app/\n\nFind the full source code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-26T16:59:38Z"
  },
  {
    "videoId": "R4Ji8lrFrec",
    "title": "Use Page Objects To Interact With Wordle",
    "description": "We can move standard \"close the initial popup\" commands into their own file, creating Page objects. Then each spec just calls static methods on the page objects without repeating the same selectors and commands. Find the full source code in https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-25T17:57:01Z"
  },
  {
    "videoId": "EWh_NMJS8uU",
    "title": "Setup Parallel CI to Run Wordle Specs Faster",
    "description": "In this video I use my parallel GitHub Actions workflow to take advantage of Cypress Dashboard and run the Wordle specs in parallel.\n\nuses: bahmutov/cypress-workflows/.github/workflows/parallel.yml@v1\nwith:\n  n: 5\n  group: 'All tests'\nsecrets:\n  recordKey: ${{ secrets.CYPRESS_RECORD_KEY }}\n\nSee this reusable workflow in https://github.com/bahmutov/cypress-workflows\n\nBy running the specs across 5 machines we shorten the test time from 5 minutes to 1 minute. Find the full source code in https://github.com/bahmutov/cypress-wordle repo",
    "publishedAt": "2022-01-24T21:11:40Z"
  },
  {
    "videoId": "vwIpCbMskYI",
    "title": "Solve The Test Hanging On CI By Printing Messages To The Terminal",
    "description": "Using cy.task we can print the test progress into the terminal where it will be visible while the test runs into an infinite loop. \n\non('task', {\n  print(message) {\n    console.log(message)\n    return null\n  }\n})\n\nThe from the test we can do the following to see where the test \"gets stuck\" on CI:\ncy.task('print', `trying ${word}`)\n\nFind the full source code in https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-24T20:34:44Z"
  },
  {
    "videoId": "1e1xU1_H0cg",
    "title": "Use Your Own Start Word",
    "description": "In this video, we create a new spec that reads the start word from the Cypress.env('startWord') call. This let's the user provide their own start word, and we even create a new GitHub workflow to enter the word when launching the start spec. To see the results, I set up Cypress Dashboard recording and save the screenshot of the solved game there. Find the full source code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-24T13:43:00Z"
  },
  {
    "videoId": "LiYJtUbe7gc",
    "title": "Confirm Network Intercept Fields Using Cypress Fluent Chain of Commands",
    "description": "In this video, I fix an example code snippet that tries to validate the intercepted network request. I explain why the console.log prints an unexpected value, how to assert multiple properties from a complex object, how to write fluent Cypress chains of commands and assertions. For full information, read the blog post https://glebbahmutov.com/blog/network-requests-with-cypress/ and find the source code in the repo https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2022-01-23T23:14:14Z"
  },
  {
    "videoId": "NOwNg-Nhv4o",
    "title": "Generate A Daily Wordle Hint Email With Screenshot",
    "description": "In this video, I show how to hide all letters from the solved Wordle puzzle, and only reveal one letter as a hint to the solution. Then we take a screenshot of the game board and email ourselves that image. We set up a daily CI workflow to generate the hint email at 5 o'clock in the morning. Find the full code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-21T14:37:50Z"
  },
  {
    "videoId": "UZwE1KTz-98",
    "title": "Use cypress-data-session To Store The Word List",
    "description": "In this video, I show how to download and extract the word list from a JavaScript Wordle bundle just once, and then keep it cached in memory using the plugin https://github.com/bahmutov/cypress-data-session. By caching using the plugin, we keep our code small, simple, and can even store the data in the plugins process, where it is available to other specs. Find the full source code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-19T19:29:10Z"
  },
  {
    "videoId": "fJmNyMnBvbs",
    "title": "Run Wordle E2E Tests On GitHub Actions Using A Workflow",
    "description": "In this video, I add CI to the cypress-wordle repo. I use GitHub Actions via my reusable workflow \"standard\", see https://github.com/bahmutov/cypress-workflows The entire CI config file is tiny\n\nname: ci\non: [push]\njobs:\n  test:\n    # use the reusable workflow to check out the code, install dependencies\n    # and run the Cypress tests\n    # https://github.com/bahmutov/cypress-workflows\n    uses: bahmutov/cypress-workflows/.github/workflows/standard.yml@v1\n\nFind the full source code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-19T14:52:57Z"
  },
  {
    "videoId": "SeRLrdtr3Vs",
    "title": "Solve Wordle In Hard Mode",
    "description": "This video shows the optimizations I made to cypress-wordle to solve the game in Hard mode by really picking the next word carefully, and by filtering the words based on the results. I also show the unit tests I have written for picking the next word. Find the full code in https://github.com/bahmutov/cypress-wordle\n\nNote: my own head video freezes midway through the video, ughh, the computer is having problems, need to restart it.",
    "publishedAt": "2022-01-19T14:31:40Z"
  },
  {
    "videoId": "ZmcOFr2UzZU",
    "title": "Play Wordle From Any Date Using cy.clock",
    "description": "This video shows how to set the Date using the cy.clock command which forces the Wordle to play the word from that day. Find the full code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-19T14:25:51Z"
  },
  {
    "videoId": "zQGLR6qXtq0",
    "title": "Solve Wordle Game For Real Using Cypress",
    "description": "In this video, I show the real solution to Worlde game using Cypress Test Runner. We will use cy.intercept to grab the list of 5-letter words, enter a random word, collect the letter status, then filter the world list and try again. As the list becomes shorter and shorter, we are closer to the solution, until we (hopefully) reach it. Find the full source code in the repo https://github.com/bahmutov/cypress-wordle",
    "publishedAt": "2022-01-18T14:15:45Z"
  },
  {
    "videoId": "pzFzOKEV-eo",
    "title": "Solve Wordle Game Using Cypress",
    "description": "In this video, we will \"solve\" World game using Cypress. We will need to cross the Shadow DOM boundary to query elements, trigger the \"keydown\" events to send the letters to the window object, and look up the solution by reading it from the application state object stored in the local storage. Find the full source code in the repo https://github.com/bahmutov/cypress-wordle\n\nUpdate: I recorded 2nd video where I solve the Wordle game using Cypress for real https://www.youtube.com/watch?v=zQGLR6qXtq0",
    "publishedAt": "2022-01-17T20:05:01Z"
  },
  {
    "videoId": "NnriKHmj5T8",
    "title": "How To Report A Cypress Bug",
    "description": "In this video, I find a bug in cy.next command and report it to the Cypress team by opening https://github.com/cypress-io/cypress/issues/19724 with a reproducible example in the forked repo https://github.com/cypress-io/cypress-test-tiny",
    "publishedAt": "2022-01-16T16:12:27Z"
  },
  {
    "videoId": "D0uH_pmcBvg",
    "title": "cy.contains With Text Transform UpperCase Example",
    "description": "Whenever you want to find a text on the page that is all uppercase, watch out! The text in the page might be \"normal\", and it is the CSS text transform that makes the rendered text all caps. This video shows how to inspect the element, how to confirm the data attribute returns a single element, and how to look up the cy.contains documentation page at https://on.cypress.io/contains",
    "publishedAt": "2022-01-15T21:22:34Z"
  },
  {
    "videoId": "MdSfViZaBnw",
    "title": "Write Unit Tests In Cypress With Mocking Node FS.readFileSync Method",
    "description": "If you have a lot of end-to-end Cypress tests and want to quickly add a few unit tests, you do not have to bring a second test runner. You can use Cypress to write and run unit tests, and even mock Node modules like fs.readFileSync if needed. Find the full source code for this example in repo https://github.com/bahmutov/cypress-testrail-simple\n\nExample source code that uses fs.readFileSync\n\nconst fs = require('fs')\nfunction findCasesInSpec(spec, readFile = fs.readFileSync) {\n  ...\n}\nmodule.exports = { findCasesInSpec }\n\nExample unit test that passes our stub to replace fs.readFileSync\n\nimport { findCasesInSpec } from '../../src/find-cases'\n\nit('finds test case ids', function () {\n  const source = `\n    it('C101', ...)\n  `\n  const readFile = cy.stub().returns(source)\n  const ids = findCasesInSpec('spec1.js', readFile)\n  expect(ids).to.deep.equal([101])\n  expect(readFile).to.be.calledWith('spec1.js', 'utf8')\n})",
    "publishedAt": "2022-01-14T22:09:41Z"
  },
  {
    "videoId": "0Bp_FXToQpg",
    "title": "Setup GitHub Actions To Run Cypress Component Tests",
    "description": "In this video, I set up GitHub Actions CI file (using https://github.com/cypress-io/github-action of course) to run Cypress component tests on every push commit. We will need to use a custom command to execute \"yarn cypress run-ct\" command on CI\n\n# Install NPM dependencies, cache them correctly\n# and run all Cypress tests\n- name: Cypress run\n  uses: cypress-io/github-action@v2\n  with:\n    # to run component tests we need to use \"cypress run-ct\"\n    command: yarn cypress run-ct\n\nFind the source code and the workflow file in the repo https://github.com/bahmutov/react-dark-mode",
    "publishedAt": "2022-01-13T16:34:15Z"
  },
  {
    "videoId": "VPznmFpa1Jc",
    "title": "Use Cypress Element Alias To Avoid The Element Detached From DOM Error",
    "description": "In this example, I show how to store the result of the long chain of Cypress commands in an alias. \n\ncy.get('#chain-example')\n  .find('#items')\n  .find('li')\n  .should('have.length', 2)\n  .first()\n  .as('fruit')\n\nWe can now get the element and add assertions to it\n\ncy.get('@fruit').should('have.text', 'Grapes')\n\nIf the element becomes detached from the page DOM (because the application has re-rendered that part of the page), the Cypress Test Runner re-queries the commands in the chain that leads to the alias, refreshing the elements from the page.\n\nFind this recipe in my examples at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2022-01-13T16:29:42Z"
  },
  {
    "videoId": "VdyZonBAeLw",
    "title": "Using Cypress Component Testing To Really Test A React Dark Mode Component",
    "description": "This video shows Cypress component testing (https://on.cypress.io/component-testing) in action. We are testing a React Dark Mode component, my code is in the repo https://github.com/bahmutov/react-dark-mode I have set up the settings using an example from https://github.com/cypress-io/cypress-component-testing-examples\n\nWe confirm the component is working, is storing and loading the theme from the localStorage and uses the Media Match method to determine the initial value.",
    "publishedAt": "2022-01-12T19:02:40Z"
  },
  {
    "videoId": "JA-exPC_8Mo",
    "title": "GitHub To Circle Trigger With Custom Test Tags",
    "description": "This video shows how conveniently I can run multiple tests using tags (provided by cypress-grep plugin) using Manual workflow on GitHub Actions. I can click off the test tags to run, and it triggers the CircleCI pipeline that actually runs the tests and reports the results to Cypress Dashboard. I even tag the recorded Dashboard run with a custom tag so I can find it easier in the list of runs. See the source code in https://github.com/bahmutov/test-todomvc-using-app-actions and read the blog post \"How To Tag And Run End-to-End Tests\" at https://glebbahmutov.com/blog/tag-tests/",
    "publishedAt": "2022-01-12T16:01:23Z"
  },
  {
    "videoId": "WU8pT7n4JTs",
    "title": "See All Tests In Your Project Using find-cypress-specs",
    "description": "This video introduces the find-cypress-specs (https://github.com/bahmutov/find-cypress-specs) utility that can report all Cypress specs in your project. It can even report all suites and tests inside each spec and count them. You can find tests by title or by tags, and count them by piping the output to other commands. See the example specs in https://github.com/bahmutov/test-todomvc-using-app-actions repo.",
    "publishedAt": "2022-01-12T14:31:04Z"
  },
  {
    "videoId": "IDJFPREpy6o",
    "title": "Refactor Tests To Use Built-in Cypress Commands",
    "description": "In this video, I take the repo https://github.com/robcaldecott/cypress-vite mentioned in the tweet https://twitter.com/robertcaldecott/status/1480848740621688832 and refactor it to use the built-in cy.contains and cy.intercept commands to check the page and stub the network requests. Bonus: we can also merge short tests into one meaningful test. The final tests are\n\ndescribe(\"app\", function () {\n  it(\"renders the heading\", function () {\n    cy.intercept('/api/names', ['Bob', 'Alice']).as('names')\n    cy.visit(\"/\").its('appReady').should('be.true');\n    cy.log('**renders in the loading state**')\n    cy.contains('[aria-label=loading]', /loading/i)\n    cy.contains('[aria-label=loading]', /loading/i).should('not.exist')\n    cy.log('**renders heading**')\n    cy.contains('h1', /cypress demo/i)\n    cy.wait('@names')\n    cy.contains('Bob')\n    cy.contains('Alice')\n  });\n\n  it(\"handles errors\", function () {\n    cy.intercept('/api/names', {forceNetworkError: true})\n    cy.visit(\"/\").its('appReady').should('be.true');\n    cy.contains(/error fetching names/i)\n  });\n});",
    "publishedAt": "2022-01-11T19:32:10Z"
  },
  {
    "videoId": "UfRhlRxy1AE",
    "title": "Collect Headings And Subheadings Using cy.each Command",
    "description": "Sometimes you want to get sections of the page, and for each section collect some information putting it all into a single object. This video shows how to do this using cy.each command. At the end of the collection, we save the entire JSON object using cy.writeFile command.\n\nYou can find this recipe in the repo https://github.com/bahmutov/cypress-examples and hosted online at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2022-01-09T18:21:40Z"
  },
  {
    "videoId": "f_H7EH0n9tE",
    "title": "Fix The Cypress Error \"You are mixing async and sync code\"",
    "description": "In this video, I show the root reason for the Cypress error \"async and sync code\" - it happens when you have both a Cypress command and a return statement inside cy.then callback. For example, the following test code inside a Cypress test will fail with an error:\n\n.then(function () {\n  cy.wrap('Anna')\n   return 'Joe'\n})\n\nCypress is not sure which value do you want to yield from the .then callback: \"Anna\" or \"Joe\". The same error happens even if you use something like cy.log\n\nthen(function () {\n  cy.log('returning Joe')\n   return 'Joe'\n})\n\nThe solution is to never use both Cy commands and a return statement inside the same .then callback. For example, if you want to log a value, attach its own callback \n\nthen(function () {\n  cy.log('returning Joe').then(function () {\n     return 'Joe'\n  })\n})\n\nAlternative solution: print in a separate .then\n\n.then(function () {\n  cy.log('returning Joe')\n})\n.then(function () {\n   return 'Joe'\n})\n\nAlternative solution: Cypress yields the value from its last command. Instead of \"return\" use cy.wrap command\n\nthen(function () {\n  cy.log('returning Joe')\n   cy.wrap('Joe')\n})\nSee the solutions in my https://glebbahmutov.com/cypress-examples/ under \"Yield value\" recipe",
    "publishedAt": "2022-01-06T17:30:55Z"
  },
  {
    "videoId": "h7taQNvj0Cs",
    "title": "Crawl Pages With Resource Check",
    "description": "In this video, I show how to improve crawling local pages using Cypress to avoid visiting the same resource if there are different links to it. For example, both /tos.html and /tos href attributes lead to the same page /tos We detect the true resource URL using cy.request and looking at the redirects it returns. By finding /tos.html redirects we get that the actual link is /tos \n\nFind the previous video \"Crawl Pages\" at https://www.youtube.com/watch?v=FDNeiwKWdb4 and the full source code at https://github.com/bahmutov/cypress-crawl-example",
    "publishedAt": "2022-01-06T16:34:50Z"
  },
  {
    "videoId": "0OfILKbqbsg",
    "title": "Test 404 Page",
    "description": "In this video, I show how to use cy.visit and cy.request commands to verify the server is returning a 404 page for invalid resource URLs. Find the full source code in https://github.com/bahmutov/cypress-crawl-example In summary, I did:\n\nconst url = '/does-not-exist'\ncy.request({ url, failOnStatusCode: false })\n  .its('status', { timeout: 0 })\n  .should('equal', 404)\ncy.visit(url, { failOnStatusCode: false })\ncy.contains('span', '404')",
    "publishedAt": "2022-01-05T14:23:57Z"
  },
  {
    "videoId": "FDNeiwKWdb4",
    "title": "Crawl Local Pages Using Cypress",
    "description": "In this video, I show how to write a recursive Cypress test crawling every local page. This test will detect invalid links and pages that throw errors on load. You can find the source code in the repo https://github.com/bahmutov/cypress-crawl-example Tip: if you want to parallelize the crawl and your site has sitemap.xml resource, you can follow the blog post https://glebbahmutov.com/blog/test-sitemap/ and generate multiple tests to hit each URL directly.\n\nNote: in the video \"Crawl Pages With Resource Check\" https://youtu.be/h7taQNvj0Cs I show how to improve the crawl to avoid duplicate visits via different links that ultimately lead to the same resource.",
    "publishedAt": "2022-01-04T23:35:45Z"
  },
  {
    "videoId": "0LLsdI0o9Iw",
    "title": "Use Multiple Aliases To Avoid Pyramid of Doom Callbacks",
    "description": "In this video, I save multiple elements under Cypress aliases using the cy.as  command. Then I use a single cy.then callback with a function to confirm the values follow a certain rule. Cypress aliases are set on the test context object as properties, thus each saved alias as(\"x\") can be read using this.x in the test. Find the source code at https://glebbahmutov.com/cypress-examples site.",
    "publishedAt": "2021-12-31T19:54:33Z"
  },
  {
    "videoId": "Csjg1qktnU0",
    "title": "Visit Two Domains In The Same Cypress Spec",
    "description": "This video shows how to visit multiple domains in the same Cypress spec and pass values from one site to another by storing it in the plugin file process via cy.task command. See the issue https://github.com/cypress-io/cypress/issues/944",
    "publishedAt": "2021-12-29T18:30:35Z"
  },
  {
    "videoId": "kBYtqsK-8Aw",
    "title": "Record A Test Using Cypress Studio",
    "description": "In this video, I use the Cypress Studio https://on.cypress.io/studio to record parts of the test, and then manually add assertions to the saved test commands. Find the full spec code at https://github.com/bahmutov/todo-app-for-cyclope",
    "publishedAt": "2021-12-23T16:56:39Z"
  },
  {
    "videoId": "VtIvGznpo_A",
    "title": "Stop CSS Animation In A Component Test",
    "description": "In this video, I use a Cypress component test (see https://on.cypress.io/component-testing) to mount a React App component. I do not like the spinning React logo, so I use the \"style\" option to load additional CSS and apply it to the Logo class, overwriting the animation property. Then I show how to verify that the animation CSS was truly applied (and I can see the logo frozen in the browser). Find the source code in the repo https://github.com/bahmutov/react-dark-mode",
    "publishedAt": "2021-12-16T18:07:02Z"
  },
  {
    "videoId": "fBcoMmNBY5w",
    "title": "Run Cypress On CircleCI From Your Terminal",
    "description": "This video introduces the \"run-cy-on-ci\" utility https://github.com/bahmutov/run-cy-on-ci that lets you trigger Cypress test workflow on CircleCI using cypress-grep https://github.com/cypress-io/cypress-grep plugin to select one test or a group of tests. Using run-cy-on-ci you can run the tests multiple times, control the number of machines (parallel run if configured), run tests on specific branch, and pass additional parameters to the workflow. Find the example project at https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-12-14T16:41:07Z"
  },
  {
    "videoId": "84NQf-HVWWE",
    "title": "Visibility Of Multiple Elements Explained",
    "description": "This video explains how to check if multiple elements returned by a query command like cy.get are visible or not. We can filter all elements by visibility to avoid accidentally passing the assertion only with some elements visible. Find the full source code at https://glebbahmutov.com/cypress-examples/commands/assertions.html",
    "publishedAt": "2021-12-10T13:20:24Z"
  },
  {
    "videoId": "PRpuE2DXRlQ",
    "title": "Cypress Dashboard, Reusing GitHub Workflows, Flake Detection, And Test Retries",
    "description": "This video has it all:\n- setting up Cypress Dashboard to record the test results\n- super simple GitHub workflow by reusing bahmutov/cypress-workflows standard.yml\n- enabling test retries in the project\n- flake detection on Cypress Dashboard\n- fixing the flaky test by enabling a longer command timeout\n\nFind the source code in https://github.com/bahmutov/cypress-3rd-party-script-example and reusable Cypress workflows in https://github.com/bahmutov/cypress-workflows",
    "publishedAt": "2021-12-09T14:12:42Z"
  },
  {
    "videoId": "MzCACth7qLE",
    "title": "Slow Down And Wait For 3rd Party JavaScript To Load",
    "description": "In this video, I will show how to slow down a particular request to load 3rd party JavaScript to see how the application handles it. We also learn how to ensure the 3rd party JS has loaded by checking the object it creates on the \"window\" object. Finally, the test shows how to invoke a method on the 3rd party JavaScript object. Find the full source code in the repo https://github.com/bahmutov/cypress-3rd-party-script-example",
    "publishedAt": "2021-12-09T00:42:58Z"
  },
  {
    "videoId": "QHGhp9yG4uw",
    "title": "Indeterminate Checkboxes",
    "description": "This video teaches you about indeterminate checkboxes (check out this article https://css-tricks.com/indeterminate-checkboxes/) and how to test them using Cypress.io test runner. Find the full set of tests in https://github.com/bahmutov/indeterminate-checkboxes",
    "publishedAt": "2021-12-07T13:34:20Z"
  },
  {
    "videoId": "jlBNdJPscJk",
    "title": "Debug Ramda Pipeline in Cypress Test",
    "description": "In this video, I take a failing test that uses R.pipe method and shows how to debug its steps using R.tap method to see the data at each step. Then I fix the test and show a few more tricks. Find the full test in repo https://github.com/bahmutov/sorted-table-example",
    "publishedAt": "2021-12-04T17:57:25Z"
  },
  {
    "videoId": "9AF-lcvh1dk",
    "title": "Fix The Dreaded Cypress Error \"Command Inside Of A Promise\"",
    "description": "In this video, I explain the dreaded \"Cypress detected that you returned a promise in a test, but also invoked one or more cy commands inside of that promise\" error and how to avoid it. Cypress commands are chains that yield a value (called the subject) to the next command. By using a promise and Cypress commands you are confusing Cypress: which value should it yield - the value resolved by the promise or the value yielded by the new Cypress commands? Luckily, every situation like this can be rewritten to only use a promise in a step, or Cypress commands.",
    "publishedAt": "2021-12-03T14:20:28Z"
  },
  {
    "videoId": "skjPl8wvHEo",
    "title": "Add Unit Tests To Verify chai-sorted Assertion Plugin",
    "description": "In https://github.com/bahmutov/sorted-table-example I have used chai-sorted assertion plugin to check if an array is sorted. To make sure the chai-sorted behaves correctly, this video shows how I add a few unit tests to run in Cypress. This way we \"lock\" the behavior of the plugin and can safely upgrade it in the future.",
    "publishedAt": "2021-12-02T14:11:02Z"
  },
  {
    "videoId": "h-2sZshFroc",
    "title": "Cypress Ramda",
    "description": "This video teaches you how to import Ramda library and set it as \"Cypress.R\" so that all its functions are available, similar to the already bundled Lodash library \"Cypress._\" property. Note: I love Ramda because its order of arguments is very convenient (the known arguments are placed first, and the dynamic data like the list of items is expected last, which works great with currying, see this video \"Hey Underscore, You're Doing It Wrong!\" https://www.youtube.com/watch?v=m3svKOdZijA). Read blog posts like https://glebbahmutov.com/blog/lodash-to-ramda-example/ and other blog posts tagged \"Ramda\" at https://glebbahmutov.com/blog/tags/ramda/. You can also flip through my functional presentation slides at https://slides.com/bahmutov/decks/functional",
    "publishedAt": "2021-11-29T17:44:05Z"
  },
  {
    "videoId": "vlLLi5N4h78",
    "title": "Replace Text In The Loaded JSON Fixture",
    "description": "In this video, I teach you how to load a JSON fixture file and replace parts of the text using cy.invoke command. We can also convert the JSON into a string or load the fixture into a Buffer object to take advantage of the \"null\" encoding available in Cypress v9. Find this example, and more Cypress training exercises in the repo https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2021-11-24T14:08:35Z"
  },
  {
    "videoId": "WO3ujoEhVUc",
    "title": "Random Data And Selective Testing Using Faker And Cypress-Each Plugin",
    "description": "This video demonstrates the Faker utility https://github.com/Marak/Faker.js#readme for generating random but deterministic fake data for testing, and cypress-each https://github.com/bahmutov/cypress-each plugin for data-driven tests. It shows how to select just a subset of items to test. Find the source code at https://github.com/bahmutov/cypress-each-and-faker-example repo",
    "publishedAt": "2021-11-22T20:32:07Z"
  },
  {
    "videoId": "Z5i60En_33A",
    "title": "Call Window Method From Cypress Spec",
    "description": "This short video explains calling application / window methods from Cypress specs - you have direct access to the application's \"window\" object by using the command cy.window. You can combine the command with assertions to get the method reference when it is ready, or use the cy.invoke command to call the method with automatic built-in checks. Find more documentation at https://on.cypress.io/window and at https://glebbahmutov.com/cypress-examples/commands/window.html\n\nTip: exposing the application methods via \"window\" object to the Cypress tests is very convenient and can super-charge your tests, take a look at https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/ blog post.",
    "publishedAt": "2021-11-19T21:28:59Z"
  },
  {
    "videoId": "Ke5Pf6IISn8",
    "title": "Use cypress-recurse Plugin To Confirm The Table Gets Sorted Eventually",
    "description": "We are using the cypress-recurse https://github.com/bahmutov/cypress-recurse plugin to retry the entire Cypress chain of commands until the table is sorted by a column.\n\nWatch the previous video \"Paginated Table Example\" https://youtu.be/y5ujNKkmgI8 for the introduction to this example",
    "publishedAt": "2021-11-19T16:55:43Z"
  },
  {
    "videoId": "y5ujNKkmgI8",
    "title": "Cypress.io Testing a Paginated Table Example",
    "description": "This video shows how to work with a paginated table, and how to verify the cells in a particular column are NOT sorted using chai-sorted plugin. Find the source code in the repo https://github.com/bahmutov/cypress-recurse Watch the next video \"Use cypress-recurse Plugin To Confirm The Table Gets Sorted Eventually\" https://youtu.be/Ke5Pf6IISn8\n\nTip: see the explanation behind map(parseInt) problem in the blog post https://glebbahmutov.com/blog/functional-js-interview-question/",
    "publishedAt": "2021-11-19T16:36:11Z"
  },
  {
    "videoId": "21MXha13qCU",
    "title": "Confirm The Table Is Sorted By A Column",
    "description": "In this video, I explain how to confirm that a table gets sorted by checking a column of dates. We need to write a single \"should(callback)\" function that extracts the inner text from each cell, then converts the strings into timestamps, and checks that the array is sorted. Find the full example at https://glebbahmutov.com/cypress-examples/recipes/sorted-list.html",
    "publishedAt": "2021-11-18T14:20:02Z"
  },
  {
    "videoId": "4TLjsCmXZlM",
    "title": "Add Cypress GitHub Integration To A Repo Step By Step",
    "description": "In this video, I add Cypress GitHub Integration (https://on.cypress.io/github-integration) to connect Cypress Dashboard to GitHub Pull Requests and see the test results right in the PR comments and status checks. Find this project at https://github.com/bahmutov/cypress-examples and check out the pull requests there to see the Cypress comments.",
    "publishedAt": "2021-11-16T16:09:07Z"
  },
  {
    "videoId": "MLDsqBd_gVU",
    "title": "Introduction To cy-spok Plugin For Writing Powerful Assertions For Objects",
    "description": "This video shows how to use cy-spok https://github.com/bahmutov/cy-spok plugin (which is a wrapper around the https://github.com/thlorenz/spok assertion library) to write powerful assertions in Cypress tests. In a single shot you can confirm both the values inside an object, and other conditions, like a property should be a string, or a number larger than N, etc.\n\nWhenever the cy-spok assertion passes or fails, it outputs all relevant information to the Cypress Command Log, showing you precisely what the values were, and why the assertion might have failed. Check out a small usage example in https://github.com/bahmutov/vue-vuex-todomvc repo.",
    "publishedAt": "2021-11-15T20:41:14Z"
  },
  {
    "videoId": "-Jr9vLpa1Ak",
    "title": "Disable The Input Element Until The Application Is Ready To Avoid Flake",
    "description": "In my previous video \"Avoid Flake When Typing Into The Input Elements Using cypress-recurse\" https://youtu.be/aYX7OVqp6AE I have shown how to use the cypress-recurse plugin to re-type text into the input element if the application clears the field suddenly. This avoids the test flake, but the ultimate solution is to look at the application's code and figure out why it allows the user interaction before the application is ready. \n\nIn this video, I add the \"disabled\" attribute to the input element and remove it only after the application stops re-rendering and clearing the input. By removing the attribute, the application signals to the user and to the test runner, that it is ready to accept the user actions. Cypress commands like cy.clear and cy.type automatically wait for the input elements to be enabled before trying to clear them or to type characters.",
    "publishedAt": "2021-11-15T14:48:41Z"
  },
  {
    "videoId": "aYX7OVqp6AE",
    "title": "Avoid Flake When Typing Into The Input Elements Using cypress-recurse",
    "description": "In this video, an input element resets its value several times after the page loads, simulating an input element that re-renders at the start. The fast test runner does not know about the re-renders and keeps \"losing\" part of the input string when typing into the visible element. We can get around this problem by using cypress-recurse plugin - it can type, then check the result, and if the input's value is different from expected, the plugin clears it and tries again. Find the plugin and the example spec in the repo https://github.com/bahmutov/cypress-recurse\n\nI have also recorded a second video showing how to solve the flake in this application example for good, see \"Disable The Input Element Until The Application Is Ready To Avoid Flake\" https://youtu.be/-Jr9vLpa1Ak",
    "publishedAt": "2021-11-12T21:04:58Z"
  },
  {
    "videoId": "pz_orYM-7xM",
    "title": "Request A Specific Comment Using Text From The Page",
    "description": "If the page is showing an ID text, and you want to make a request to the backend API using that text, this video is for you. We grab the element's text, clean it up by removing all non-digit characters, convert the text into a number, then make a request to the backend API using the cy.request command. We then assert the properties of the response object. Find this recipe at https://glebbahmutov.com/cypress-examples/",
    "publishedAt": "2021-11-12T15:42:49Z"
  },
  {
    "videoId": "-4_Pg5eJD7g",
    "title": "Cypress vs cy Difference Explanation",
    "description": "In this video, I explain the different between the global objects \"cy\" and \"Cypress\". In short: \"cy\" sets and chains everything inside a test, while \"Cypress\" is a global static object that has properties and methods you can call at any point: inside a test, outside it, or even from the DevTools console. For more details, read the blog post tip: https://glebbahmutov.com/blog/cypress-tips-and-tricks/#difference-between-cy-and-cypress-globals",
    "publishedAt": "2021-11-11T15:00:54Z"
  },
  {
    "videoId": "qkofPocd7lY",
    "title": "Test Each URL From Sitemap In Its Own Separate Cypress Test",
    "description": "In the previous video \"Check Sitemap And Verify Every URL Using Cypress.io\" https://youtu.be/QIuAcJO1klg I have shown how to fetch sitemap.xml and verify each URL. In this video, I fetch the sitemap.xml and generate a separate test for each URL to be verified separately. Find the source code at https://github.com/bahmutov/vuepress-cypress-test-example and the cypress-each plugin at https://github.com/bahmutov/cypress-each",
    "publishedAt": "2021-11-10T16:20:54Z"
  },
  {
    "videoId": "QIuAcJO1klg",
    "title": "Check Sitemap And Verify Every URL Using Cypress.io",
    "description": "We can request the sitemap file, parse XML response, and then check if every listed URL is valid using Cypress test. Find the full source code in the repo https://github.com/bahmutov/vuepress-cypress-test-example. Watch the next part of this demo in the video \"Test Each URL From Sitemap In Its Own Separate Cypress Test\" at https://youtu.be/qkofPocd7lY",
    "publishedAt": "2021-11-10T15:50:28Z"
  },
  {
    "videoId": "4YMAERddHYA",
    "title": "Debug cypress-grep Plugin",
    "description": "This video teaches you how to debug cypress-grep not behaving as you expect it to behave.\n1: check the \"env\" object\n2: enable debug messages in the browser\n3: enable debug messages in the terminal\n\nFor more, see the debugging section in the README file https://github.com/cypress-io/cypress-grep",
    "publishedAt": "2021-11-09T16:06:02Z"
  },
  {
    "videoId": "BbxjeXmIUeo",
    "title": "Confirm The Text On The Page Changes After A Click",
    "description": "In this video, I explain how to confirm that a value on the page (like the text of a particular element) changes when the user clicks on the button. We know neither the original text nor the final text. We just confirm from the test that the value changes. Find the code at the https://glebbahmutov.com/cypress-examples site",
    "publishedAt": "2021-11-08T18:32:57Z"
  },
  {
    "videoId": "MSalZBsbsNQ",
    "title": "Define A Window Property To Access A Cypress Aliased Element (Advanced)",
    "description": "This video shows how to abstract accessing an element via cy.get(aliasName) by defining a window object property with a getter method. The test looks like it is using \"normal\" variables, but each access calls the \"cy.get\" command under the hood. \n\n// create an aliased element\ncy.contains('button[role=tab]', 'Page 1').as('page1')\n// magic!\n// use \"page1\" to operate on the element\npage1.should('have.attr', 'aria-selected', 'true')\n\nFind the code in the repo https://github.com/bahmutov/emulate-navigation-allow-stopping-pure-css-native-js",
    "publishedAt": "2021-11-05T13:59:26Z"
  },
  {
    "videoId": "UNSCLtoHfgk",
    "title": "Search Part Of The List",
    "description": "In this video, I show how to take the entire list with multiple items, find a particular item, and then return a part of the list. We can then search that part for something specific. I use Lodash commands to work with jQuery objects (_.findIndex, _.slice), and you can find the shown recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-11-05T13:40:08Z"
  },
  {
    "videoId": "eBrUo8zDVXI",
    "title": "Use Cypress Aliases Created With cy.as Command to Access The Page Elements",
    "description": "This video shows how to abstract working with page elements by storing a reference to them using the cy.as command. Later we can access that element using the cy.get command and passing the alias name\n\n// creating an alias\ncy.contains('button[role=tab]', 'Page 1').as('page1')\n// using an element alias\ncy.get('@page1').should('have.attr', 'aria-selected', 'true')\n\nWe can refactor the aliases to be page objects, as shown in the video. Find the full source code in repo https://github.com/bahmutov/emulate-navigation-allow-stopping-pure-css-native-js",
    "publishedAt": "2021-11-04T13:05:35Z"
  },
  {
    "videoId": "7_gx2yp9oeE",
    "title": "Make The Test Faster Using cy.clock And cy.tick Commands",
    "description": "If the application uses a setTimeout or other time-related functions, you can speed it up by controlling the application's clock using the Cypress test commands cy.clock (to freeze the application's clock) and manually advance it instantly using cy.tick(ms) command. In our example test, we speed up the loading from 2 or 10 seconds to be almost instant. Find the example test in the repo https://github.com/bahmutov/emulate-navigation-allow-stopping-pure-css-native-js",
    "publishedAt": "2021-11-04T13:02:15Z"
  },
  {
    "videoId": "ccgBkageKB0",
    "title": "Test The Loading Element With Cancel Feature",
    "description": "In this video, I show how to test a page where the user can transition from state to state. The loading element that appears during the transition has an extra feature: if the user clicks on it, the transition is canceled. We confirm using the tests that the cancel works correctly. Find the source code in the repo https://github.com/bahmutov/emulate-navigation-allow-stopping-pure-css-native-js",
    "publishedAt": "2021-11-03T15:08:52Z"
  },
  {
    "videoId": "EIbSzT6QSxc",
    "title": "Cypress-highlight Plugin Introduction",
    "description": "This video shows https://github.com/bahmutov/cypress-highlight plugin that allows you to see which elements on the page have good data attributes for selecting elements during Cypress tests.",
    "publishedAt": "2021-11-01T18:15:31Z"
  },
  {
    "videoId": "jAU4dLRXVIA",
    "title": "Create High Resolution Videos And Screenshots In Cypress Using This Plugin",
    "description": "By using the https://github.com/bahmutov/cypress-high-resolution you can easily resize the browser window and generate super high resolution (like 4k) videos of your Cypress tests. As long as your machine is capable of it, the videos and screenshots can capture a lot of details.",
    "publishedAt": "2021-10-29T14:12:11Z"
  },
  {
    "videoId": "pHzroBFY5V0",
    "title": "Add A Red Border Around Elements That Have data-cy Attribute",
    "description": "By adding the red border around the elements that have data-cy attribute, we can highlight the elements that are selectable during Cypress.io test. To avoid modifying the production CSS resource, we intercept the css/style.css resource using cy.intercept command and append the additional style to the server's response. To avoid receiving 304 \"use cached resource\" from the server, we delete the caching headers on the request to the server. Find the source code in the repo https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-10-29T12:55:52Z"
  },
  {
    "videoId": "CtU43GzaicI",
    "title": "Run All Tests That Have No Tags Using cypress-grep Plugin",
    "description": "This video shows how to execute all tests that have no tags using cypress-grep plugin using \"grepUntagged=true\" option. I also show how to create a GitHub Actions job to run all untagged tests after parallel jobs running the specific tags. Find the plugin at https://github.com/cypress-io/cypress-grep and the shown source code at https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-10-28T13:50:12Z"
  },
  {
    "videoId": "44kkiCa7VJk",
    "title": "Implementing File Grep Extension To Cypress-Grep Plugin Using Cypress Config",
    "description": "In this video, I explain how to use the Cypress config object to change what specs it runs. We will use the configuration object to discover the specs ourselves, then filter them to only leave the specs that have a specific text in the title using the https://github.com/bahmutov/find-test-names utility. We set the filtered list of spec names as \"config.testFiles\" property allowing the cypress-grep plugin to deal with just those specs during the run. Find the cypress-grep plugin at https://github.com/bahmutov/find-test-names\n\nI have mentioned in the video my blog about Cypress test statuses: https://glebbahmutov.com/blog/cypress-test-statuses/",
    "publishedAt": "2021-10-27T13:30:24Z"
  },
  {
    "videoId": "0SgRYcJACjM",
    "title": "Interactive Cypress Skills Form",
    "description": "This video shows the interactive Cypress skills form hosted at https://cypress.tips/skills You can use this form for self-evaluation or while interviewing a candidate for a job position that requires writing Cypress tests. You can even copy the filled information and paste it into your recruitment system or share it by email. For more, read the blog post https://glebbahmutov.com/blog/cypress-skills-ladder/",
    "publishedAt": "2021-10-26T13:16:05Z"
  },
  {
    "videoId": "NdeHg0u8Wro",
    "title": "Stub window.prompt Method From Cypress",
    "description": "Using cy.stub we can stub the call to the window.prompt method, and return a test value. Then the video shows how to confirm the application receives that test value and calls the window.alert correctly. Find the test code in the https://github.com/bahmutov/cypress-examples repo",
    "publishedAt": "2021-10-25T13:40:31Z"
  },
  {
    "videoId": "wnFLb04iJp8",
    "title": "Stub window.alert From The Cypress Test",
    "description": "This video explains how to stub the window.alert method calls made by the application. The Cypress test can then confirm the details of the call. Find the example source code in the repo https://github.com/bahmutov/cypress-examples",
    "publishedAt": "2021-10-25T13:30:13Z"
  },
  {
    "videoId": "ujJVl5blk1g",
    "title": "Use GraphQL Cypress.io Stub With The Times Parameter To Return A Different Fixture On Each Call",
    "description": "In this video, I. respond to a question that asked how to efficiently intercept and mock GraphQL calls that all go through the same endpoint, but return a different fixture file on a different call. For example, return fixture A on the first call to operation Z, then return fixture B on the second call to the same operation Z, etc. Find the full source code in the repo https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-10-23T18:07:47Z"
  },
  {
    "videoId": "KHn7647xOz8",
    "title": "Use cypress-recurse To Scroll The Page Until It Loads The Text We Are Looking For",
    "description": "In this video, I use cypress-recurse function to keep scrolling the page until we find the word \"debug\". We yield that found quote and highlight it. The same technique can be used to find an element on the paginated sites, or when the content changes on reload. Find the plugin at https://github.com/bahmutov/cypress-recurse and the example test at",
    "publishedAt": "2021-10-22T13:46:17Z"
  },
  {
    "videoId": "918BqmTa-w4",
    "title": "Testing The Infinite Scroll With Cypress",
    "description": "In this video, I confirm the infinite scroll fetches the items as I scroll to the bottom of the page. Different tests confirm the loading element appears and disappears, the number of items gets incremented correctly, the backend API is called, and that the user can get back to the top of the page by clicking the \"Back to Top\" element. Find the source code at https://github.com/bahmutov/infinite-scroll-quotes",
    "publishedAt": "2021-10-20T19:30:15Z"
  },
  {
    "videoId": "E6P_rBt6caU",
    "title": "Prepare Intercept And Wait Using cypress-network-idle Plugin",
    "description": "In this video, I start listening to the network calls before the action that triggers them occurs. This gives the cypress-network-idle plugin an accurate view of the requests that are in flight or already finished. Find the plugin at https://github.com/bahmutov/cypress-network-idle",
    "publishedAt": "2021-10-19T19:56:48Z"
  },
  {
    "videoId": "adHjTf5j6uE",
    "title": "Cypress-network-idle plugin",
    "description": "This video introduces the cypress-network-idle plugin that can wait for the network activity to stop before continuing the test. Find the plugin at https://github.com/bahmutov/cypress-network-idle",
    "publishedAt": "2021-10-18T20:13:29Z"
  },
  {
    "videoId": "utPKRV_fL1E",
    "title": "Using cypress-each To Create Separate Tests",
    "description": "In this video, I refactor a test to create independent data-driven tests using cypress-each plugin. Find the plugin at https://github.com/bahmutov/cypress-each For more information read the blog post https://glebbahmutov.com/blog/dynamic-api-tests-using-cypress-each/",
    "publishedAt": "2021-10-14T13:13:07Z"
  },
  {
    "videoId": "DnmnzemS_HA",
    "title": "Refactor Common Command Repetition in Cypress Test",
    "description": "In this test, we will refactor repeated Cypress commands into a \"forEach\" loop. Each iteration will get the elements and check if they are visible. For more, see the tests in https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2021-10-13T16:45:29Z"
  },
  {
    "videoId": "G5CtE_LBIno",
    "title": "Using Cyclope Visual Testing Plugin With realHover Command",
    "description": "We can generate accurate and consistent application screenshots using the cyclope plugin (at https://github.com/bahmutov/cyclope), even if there is a hover state. The generated PNG images then can be used with any image-diffing service to check if the application data or styles have changed.",
    "publishedAt": "2021-10-06T20:05:35Z"
  },
  {
    "videoId": "7ipCvJQixI0",
    "title": "Introduction To cypress-data-session Plugin",
    "description": "Create the test data only when necessary in a TodoMVC GraphQL example application. Invalidate the data session from a test that changes the server data. See the full code in the repo https://github.com/bahmutov/todo-graphql-example and use the plugin https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2021-10-06T17:53:19Z"
  },
  {
    "videoId": "XIaA8k7TOA4",
    "title": "Load Global Cypress Types In VSCode Using jsconfig.json File",
    "description": "We can tell VSCode to load Cypress TypeScript definition and apply it to the global \"cy\" and \"Cypress\" objects. This lets the editor show intellisense warnings and type check our Cypress specs. To do this for all JavaScript spec files at once we can use jsconfig.json file (see https://code.visualstudio.com/docs/languages/jsconfig) in the cypress folder. Find the example source code in the repo https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-10-06T16:29:11Z"
  },
  {
    "videoId": "0KTGc83wSoA",
    "title": "Quickly Create A User And Log in Using Dependent Data Sessions",
    "description": "Let's say you need to create a user and log in. Do you recreate the user before each test? No, you use cy.dataSession from the cypress-data-session plugin to only create the user if needed. How do you log in? You use another cy.dataSession to execute the commands, and cache the session cookie. And the final step: if the user data session is invalidated, and the user is recreated, then the cookie data session is automatically invalidated using the \"dependsOn\" parameter linking the second data session to the first one. See the full source code in https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-10-05T21:27:09Z"
  },
  {
    "videoId": "HaX2VREEgYs",
    "title": "Testing Custom WebComponent With Shadow DOM",
    "description": "In this example, I show how Cypress can access the elements inside the Shadow DOM of a custom \"Tasty Toaster\" WebComponent. We will use cy.within command and cy.root command and custom timeouts.",
    "publishedAt": "2021-10-05T15:54:33Z"
  },
  {
    "videoId": "fy4qYGK690Q",
    "title": "Nodemon And cypress-watch-and-reload Utilities",
    "description": "In this video, I show how I typically set up file watch for my projects during the local development. Utility nodemon https://nodemon.io/ watches the server code and restarts my server on file changes. Cypress plugin cypress-watch-and-reload https://github.com/bahmutov/cypress-watch-and-reload watches the frontend source files and re-runs the Cypress tests on any changes (Cypress already re-runs the tests automatically on spec file changes).\n\nSee the project at https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-10-01T20:00:04Z"
  },
  {
    "videoId": "PTlcRBgFJaM",
    "title": "Use cy.dataSession To Create A User And Log In",
    "description": "In this example, I am using the plugin https://github.com/bahmutov/cypress-data-session to create a user if necessary, and then log in. The data session can store all sorts of data, including the user and the browser cookies, and I show in this video how the cy.dataSession can finish the login step after validating the stored user.\n\nFind the full source code in https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-30T18:15:31Z"
  },
  {
    "videoId": "ws4TitQJ7fQ",
    "title": "Share Data Across Specs Using cypress-data-session Plugin",
    "description": "This video shows how to use the \"shareAcrossSpecs\" parameter to cache the computed data not just in the current browser spec, but in the Cypress plugin process. This storage is persistent across browser reloads and different specs. Thus a database item created in one spec can be reused from another spec, speeding up the tests.\n\nSee the source code in https://github.com/bahmutov/chat.io and the plugin in https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2021-09-30T13:32:44Z"
  },
  {
    "videoId": "SyDz6l_EFoc",
    "title": "Invalidate cy.session From cypress-data-session",
    "description": "In this video, I use a combination of cy.dataSession and cy.session and if the data needs to be recomputed, we invalidate all saved Cypress sessions to have the user account log in again with the recomputed user.\n\nSee the source in https://github.com/bahmutov/chat.io and the plugin code in https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2021-09-29T19:25:09Z"
  },
  {
    "videoId": "P-sb5OHSNsM",
    "title": "Create User Using cypress-data-session Command",
    "description": "We can use multiple cy.dataSession commands to conditionally create separate pieces of data. In this video, I use the command to create the user, if the user is invalid or missing. Find the full test code in https://github.com/bahmutov/chat.io and the plugin code in https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2021-09-29T14:39:36Z"
  },
  {
    "videoId": "VQtjDGCuRzI",
    "title": "Use Data Alias Created Automatically By cypress-data-session",
    "description": "You can access the cached data yielded by the setup function via an alias. This alias is created by cypress-data-session automatically. Find the full example code in https://github.com/bahmutov/chat.io and the plugin itself in https://github.com/bahmutov/cypress-data-session",
    "publishedAt": "2021-09-29T14:20:47Z"
  },
  {
    "videoId": "As5yqkoZOx8",
    "title": "Introduction to cypress-data-session package",
    "description": "This video shows the cypress-data-session package that abstracts setting up the test data. We need to provide the data setup function and the data validation methods, and this custom command cy.dataSession takes care of the rest. The setup runs only if the data is not there already, or if the validation function returns false. This speeds up the test a lot, since you no longer need to unnecessarily recreate the data from scratch.\n\nPlugin code: https://github.com/bahmutov/cypress-data-session\nExample spec: https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-29T14:07:50Z"
  },
  {
    "videoId": "1SOn8NbZF4o",
    "title": "Use cy.session Command To Prepare Test Data But Only When Needed",
    "description": "In this video, I show how to use the Cypress command cy.session to prepare the test data. Then we use the \"validate\" option to run Cypress commands to tell the cy.session if the test data needs to be recreated again. This makes the test both fast and convenient. If the validate function passes, the data is still valid and does not need to be re-created. If the validate function returns false, or fails an assertion, the cy.session recreates the data.\n\nFind the full source code in the repository https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-28T17:56:34Z"
  },
  {
    "videoId": "Wk4l8p9JQNA",
    "title": "Connect And Send Socket Messages From Cypress Test",
    "description": "In this video, we connect to the Socket.io backend server from the Cypress test and send the \"make new room\" message. Then we check if the first connection from the application shows the created room and visit it. This proves that acting as another user from the test is possible. Find the full code in the repo https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-27T20:03:56Z"
  },
  {
    "videoId": "EKq7RC_uNsA",
    "title": "Use cy.request Command To Create A User And Log in",
    "description": "We can avoid using the page user interface to register a new user and to log in an existing user. Instead, a much faster test can use cy.request command to mimic form submissions. It also sets and sends all necessary cookies, thus no need to call cy.visit. Find the full source code in the repo https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-27T19:44:31Z"
  },
  {
    "videoId": "EXVwvJrUGJ8",
    "title": "Dynamic Tests From Cypress.io Fixture File",
    "description": "This video shows how you can import a JSON fixture file into the Cypress spec and create a separate test for each data item. This allows you to clearly separate the data from the test logic while creating multiple tests. For details, read the blog post https://glebbahmutov.com/blog/dynamic-tests-from-fixture/ and see the full source code in the repo https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-27T16:02:00Z"
  },
  {
    "videoId": "tjK_FCYikzI",
    "title": "Time Part Of A Cypress Test Or A Single Command",
    "description": "By taking timestamps around part of a Cypress test, we can confirm that the application performs a certain action within a certain time limit. Find the full source code in the repo https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2021-09-27T14:15:06Z"
  },
  {
    "videoId": "QiaphZibZsE",
    "title": "Use Docker Compose To Run Application Locally And On GitHub Actions",
    "description": "In this video, we are using docker-compose to run Redis and MongoDB containers locally. Our application then connects to those services using exposed ports and environment variables injected using as-a utility. We can run the same docker-compose command on GitHub Actions CI to run the services, and then start the application and run Cypress tests using cypress-io/github-action code.\n\n- as-a utility https://github.com/bahmutov/as-a\n- source code for the app https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-24T16:36:25Z"
  },
  {
    "videoId": "h-pXOjgZG24",
    "title": "Use MongoDB From The Plugin File Or Call Task From DevTools Console",
    "description": "In this video, I show how to connect to the MongoDB instance from the Cypress plugin file using the application code. Once we wrote the task to clear the rooms, we can call this task before each test to start from nothing. I also show how to use the super low-level cy.now command to call a task yourself from the DevTools Console. This lets you explore the application and perform actions right from the browser running the Cypress tests. Find the full source code in https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-24T16:12:18Z"
  },
  {
    "videoId": "vsH2SESJuik",
    "title": "Wait For jQuery slideDown Animation To Finish",
    "description": "In this video, I show how to wait for the JavaScript animation to finish before continuing with the test. The element slides down, using the style attribute to change its position. We can check if the element is visible and has an empty style attribute using Cypress assertions, before the test continues. Find the full source code in the application https://github.com/bahmutov/chat.io",
    "publishedAt": "2021-09-23T22:25:17Z"
  },
  {
    "videoId": "f2n6cZVMS34",
    "title": "Detect Document Reload",
    "description": "Here is a nice little trick that is useful when submitting the forms, or when the application reloads. Make the Cypress test wait until the reload happens by checking the document reference.\n\ncy.document().then(function (doc) {\n  cy.contains('button', 'create').click()\n  cy.document().should(function (d) {\n    assert(d !== doc, 'document changed')\n  })\n})\n\nSee more tricks like this in https://glebbahmutov.com/blog/cypress-tips-and-tricks/",
    "publishedAt": "2021-09-22T16:25:02Z"
  },
  {
    "videoId": "DlGQEQ2q35w",
    "title": "Introduction to cy.session command",
    "description": "In this video, I replace beforeEach hook with beforeEach + cy.session callback that creates todos and stores them in the local storage. Each test after that starts almost instantly because the session restores the local storage, the application reads the todos, and is ready to continue testing. Find the command documentation at https://on.cypress.io/session and the source code from my example in https://github.com/bahmutov/cyclope",
    "publishedAt": "2021-09-21T15:40:30Z"
  },
  {
    "videoId": "mmKOSQxQwEU",
    "title": "Test Dragging Items",
    "description": "In this video, we will drag an item by dispatching custom events to the right elements. Then we will confirm the correct updated order by checking the localStorage where the application writes the updated list. Find the source code in https://github.com/bahmutov/cyclope",
    "publishedAt": "2021-09-21T13:12:08Z"
  },
  {
    "videoId": "KZqYqsjgKco",
    "title": "Use LocalStorage From Cypress Test To Set Initial Data",
    "description": "We can set the initial data to be read by the application by using localStorage from the Cypress test. We can then verify the application shows that data correctly. If we interact with the page, we can confirm the localStorage is updated. Find the full source code in https://github.com/bahmutov/cyclope",
    "publishedAt": "2021-09-21T12:52:34Z"
  },
  {
    "videoId": "yt5eVUOxf_0",
    "title": "Cyclope: Save A Full Page With Styles If A Cypress Test Fails",
    "description": "One can save the full page DOM snapshot using the utility https://github.com/bahmutov/cyclope It uses Cypress DOM utility to extract static HTML with CSS and other resources but without any JavaScript. You can save such pages automatically if a test fails and store them on CI as test artifacts. Then you can inspect the page to understand its structure - and this is a nice addition to the Cypress images and videos.",
    "publishedAt": "2021-09-20T22:25:01Z"
  },
  {
    "videoId": "sG_ulvTKJzw",
    "title": "Conditionally Clear Items In A Cypress Test",
    "description": "In this example, we clear the items in the application by clicking the delete button on each item. But we have to be careful about writing this test to avoid the default assertions built inside Cypress commands like cy.get. \n\ncy.visit('/').wait(100)\n\ncy.get('.todo')\n  .should('have.length.gte', 0)\n  .then(function ($todos) {\n    if (!$todos.length) {\n      cy.log('nothing to delete')\n      return\n    }\n    cy.wrap($todos)\n      .find('.destroy')\n      .click({ force: true, multiple: true })\n  })\n\n// confirm there are no items\ncy.get('.todo', { timeout: 100 }).should('have.length', 0)\n\nSee the full source code in https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2021-09-20T12:59:02Z"
  },
  {
    "videoId": "raWgcTzPAww",
    "title": "Use Cypress Aliases Set Inside The beforeEach and before Hooks",
    "description": "We can conveniently avoid the pyramid of Doom of .then callbacks by using \"beforeEach\" hook to fetch our data. We can also fetch or prepare the data once using the \"before\" hook, but then we need to recreate the aliases from that data value using \"beforeEach\" hooks. See more details in https://github.com/bahmutov/cypress-workshop-basics",
    "publishedAt": "2021-09-18T17:18:00Z"
  },
  {
    "videoId": "-aptS3yvqcc",
    "title": "When To Use Cypress .Then Callback To Use The Value",
    "description": "Often, people ask when they should use .then callback in Cypress tests. This video answers it: when you are using a value from the application page, or from the application server, or from another Cypress command, you must use .then to have this value.\n\nFind more details in https://github.com/bahmutov/cypress-workshop-basics and read https://docs.cypress.io/guides/core-concepts/introduction-to-Cypress#Commands-Are-Asynchronous Also watch the video \"Why cy.log sometimes prints nothing\" https://www.youtube.com/watch?v=uGWWoq0ECY8",
    "publishedAt": "2021-09-18T17:16:15Z"
  },
  {
    "videoId": "XadOqS0YNJE",
    "title": "Directly Spying on GraphQL Calls Made By The Application",
    "description": "In this video, I show how to directly spy on the GraphQL client method calls like \"client.mutate\" made by the application. Find the source in the repo https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-17T13:47:07Z"
  },
  {
    "videoId": "CBQdo-22jzQ",
    "title": "Call API Using cy.request To Create Data For The Test",
    "description": "In this example (coming from https://github.com/bahmutov/cypress-workshop-basics) I am using the cy.request command and Lodash methods to create items on the server before visiting the page. This creates the data much faster than using the page itself to post new Todo items.",
    "publishedAt": "2021-09-17T13:20:43Z"
  },
  {
    "videoId": "l7E7K7x7V8g",
    "title": "Delete All Items Using GraphQL Client As Part Of Cypress Test",
    "description": "In this video, I am fetching all items using the Apollo GraphQL client. Then I call a mutation operation to delete each item one by one. Find the full source code in https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-16T13:38:51Z"
  },
  {
    "videoId": "IxgWmzy26gM",
    "title": "Stub The Initial Data Load Using A Fixture",
    "description": "When the application fetches all todos at the start, we can use a fixture to respond with the same list of items. This video is a good example of stubbing a GraphQL network call using cy.intercept and returning a fixture. We then check the number of items, including filtering the elements using the cy.not command and jQuery \":not\" selector. Find the full code in https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-15T19:21:49Z"
  },
  {
    "videoId": "6ykTS40_scM",
    "title": "Use Application GraphQL Client To Make Calls From The Cypress Test",
    "description": "In this video, instead of cy.request, we use the application's GraphQL client helper to make calls from the Cypress test. Find the full source code in https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-15T18:32:58Z"
  },
  {
    "videoId": "ubnJ9kWD1yQ",
    "title": "Add A New Item By Making GraphQL Call Using cy.request Command",
    "description": "In this video, I am making a GraphQL call from the Cypress test using the cy.request command. Then I verify that the new item has been added. Find the full spec in the repo https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-15T17:45:55Z"
  },
  {
    "videoId": "AcU5mkedchM",
    "title": "Set GraphQL Operation Name As Custom Header And Use It In cy.intercept",
    "description": "This video shows how to set the graphql operation name as a custom request header, and then use cy.intercept command to match the requests using this header. Find the full code in https://github.com/bahmutov/todo-graphql-example",
    "publishedAt": "2021-09-15T14:55:50Z"
  },
  {
    "videoId": "jN1vsGGXAjw",
    "title": "Set GraphQL Network Intercept Alias",
    "description": "We can set an alias using cy.intercept by inspecting the GraphQL request body object. For example, we could use the operation name property as an alias. Then our test can wait for that specific network call and confirm the request and response data. Find the full source code in the https://github.com/bahmutov/todo-graphql-example repo",
    "publishedAt": "2021-09-15T14:40:02Z"
  },
  {
    "videoId": "QA_moq_Yh5M",
    "title": "Toggle Todo When Using GraphQL Calls",
    "description": "This example Cypress.io test from https://github.com/bahmutov/todo-graphql-example shows how to spy on the GraphQL query and then confirm the page classes are set correctly.",
    "publishedAt": "2021-09-15T13:15:49Z"
  },
  {
    "videoId": "HGju0gZdZ6o",
    "title": "Overlapping Elements",
    "description": "In this video, I show how to get several DOM elements and then check if they are overlapping on the page. We are going to use the element's getBoundingClientRect method to get the rectangles, and then a small utility function to check if a pair of elements are overlapping. You can find the full source code at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-09-13T14:01:59Z"
  },
  {
    "videoId": "RAFdYqRO2vI",
    "title": "Mock ES6 Module From Cypress E2E Test",
    "description": "In this video, I show how without modifying the application code we can replace a module inside a Webpack dev bundle with a mock value or code. We will replace a named method that generates a Sudoku board, and then we will replace a Timer component with a different React component during the test. For more, see https://github.com/bahmutov/mock-in-bundle utility (this is still alpha-alpha-alpha work) and the demo repo https://github.com/bahmutov/sudoku-mock-module\n\nFollow my blog https://glebbahmutov.com/blog/ where I plan to describe how this utility works in detail.",
    "publishedAt": "2021-09-03T15:45:03Z"
  },
  {
    "videoId": "qDn-segvIhw",
    "title": "Cypress DOM Snapshot To Static HTML File",
    "description": "In this video, I show how to take DOM snapshots you can create using Cypress utility code, clean them up, and save them as a static HTML file.\nSee video https://youtu.be/pKi6nUMw6Tc for how the snapshot creation works.",
    "publishedAt": "2021-08-26T19:15:58Z"
  },
  {
    "videoId": "zRAjO6rccfI",
    "title": "Spy On Console Method From Component Tests",
    "description": "When using Cypress Component Testing https://on.cypress.io/component-testing you can stub console methods like console.error - and it is easier than you think. Components run in the same JavaScript context as the spec itself, thus you can directly stub \"console.error\" - it is the same console object in the spec as is in the component!\n\ncy.stub(console, 'error').as('consoleError')\nmount(your component)\ncy.get('@consoleError').should('have.been.calledOnce')",
    "publishedAt": "2021-08-26T15:36:25Z"
  },
  {
    "videoId": "CMOjrKoBBwc",
    "title": "How To Avoid Element Detached From DOM Error",
    "description": "In this video, I go through a Cypress test that gets the dreaded \"element is detached from the DOM\" error. This example is provided in the issue https://github.com/cypress-io/cypress/issues/9032 which is linked from the main issue https://github.com/cypress-io/cypress/issues/7306\n\nI explain why the problem happens and 3 different ways to solve it. The takeaway is to tell the test runner to wait for the application to finish doing whatever it is doing before the test proceeds. \n\nThis particular situation was described in the blog post https://cypress.io/blog/2020/11/17/when-can-the-test-submit-a-form/ and you can find similar bog posts for other situations under the tag https://cypress.io/blog/tag/flake/ For more info on how to minimize flake in your tests, read the Cypress retry-ability guide https://on.cypress.io/retry-ability",
    "publishedAt": "2021-08-25T21:47:40Z"
  },
  {
    "videoId": "HC0T9aEO6yM",
    "title": "Test A Downshift.js Dropdown Using Keyboard",
    "description": "The example comes from https://github.com/bahmutov/cypress-downshift-examples where we test the basic select widget using keyboard events only while checking the selection options.",
    "publishedAt": "2021-08-25T19:10:48Z"
  },
  {
    "videoId": "0lnOnO84nvY",
    "title": "Testing A Basic Downshift.js Dropdown Example",
    "description": "An example from https://github.com/bahmutov/cypress-downshift-examples where I test the basic dropdown created using Downshift.js library https://www.downshift-js.com/",
    "publishedAt": "2021-08-25T18:31:05Z"
  },
  {
    "videoId": "bbJ2ygOOZ4c",
    "title": "Confirm The List Of Items Is Sorted By Price",
    "description": "This video shows how to extract all elements that show the price number, convert them into actual floats, and then check that they are listed in the sorted order from the smallest price to the largest.\n\nYou can find this recipe at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-08-25T18:03:55Z"
  },
  {
    "videoId": "RaKbf1c2-9o",
    "title": "Scrape Reveal.js Slides Using Cypress Test Runner Into Algolia",
    "description": "In this video, I show the scraper for my slides.com https://slides.com/bahmutov Reveal.js decks. The scraper uses Cypress.io to browse the slides (see video https://www.youtube.com/watch?v=oq2P1wtIZYY explaining how all slides are visited), then transforms the individual headings, paragraphs, and list items into Algolia record to be uploaded. You can read the step-by-step instructions in the blog post \"Scrape Slides\" at https://glebbahmutov.com/blog/scrape-slides/ and find the full source code at https://github.com/bahmutov/scrape-book-quotes Finally, you can search my Cypress-related presentations using the https://cypress.tips/search page.",
    "publishedAt": "2021-08-24T22:00:16Z"
  },
  {
    "videoId": "oq2P1wtIZYY",
    "title": "Browse Reveal.js Slides Using Cypress and cypress-recurse",
    "description": "By using https://github.com/bahmutov/cypress-recurse we can browse vertical and horizontal slides at slides.com (made using Reveal.js). In this video I create a new project, add Cypress and implement the browse test. Find the full source code in https://github.com/bahmutov/browse-slides",
    "publishedAt": "2021-08-17T19:27:27Z"
  },
  {
    "videoId": "UMtvmVgpZdU",
    "title": "Upgrading Cypress",
    "description": "In this video, I show upgrading the Cypress version from 8.2.0 to 8.3.0\n- the update is available button\n- the changelog shows if upgrade is worth it https://on.cypress.io/changelog\n- renovate bot (see my blog post https://glebbahmutov.com/blog/renovate-app/)",
    "publishedAt": "2021-08-16T20:11:40Z"
  },
  {
    "videoId": "UjGONGE3vws",
    "title": "Cypress Voice Transcription",
    "description": "In this video, I set up voice transcription using Cypress and Chrome browser, play the video, and get the transcript when the video finishes. See the full source code in https://github.com/bahmutov/video-example",
    "publishedAt": "2021-08-14T17:56:39Z"
  },
  {
    "videoId": "w5vZspiCiuQ",
    "title": "Test And Play Video From Cypress",
    "description": "From a Cypress test, we can find the video element, check its properties, invoke play, and wait for the video to finish playing. See the full code in https://github.com/bahmutov/video-example\n\nit('plays video', function () {\n  cy.visit('index.html')\n  // https://html.spec.whatwg.org/multipage/media.html#playing-the-media-resource\n  cy.get('video')\n    .should('have.prop', 'paused', true)\n    .and('have.prop', 'ended', false)\n    .then(function ($video) {\n      $video[0].play()\n    })\n  cy.get('video', { timeout: 10000 }).should('have.prop', 'ended', true)\n})",
    "publishedAt": "2021-08-13T17:18:11Z"
  },
  {
    "videoId": "LV9Hm0cQ_lQ",
    "title": "Cypress And Promises",
    "description": "In this video, I explain how to create promises correctly during Cypress tests (because promises are eager), and how to make Cypress test wait for the promise to resolve using https://on.cypress.io/wrap and https://on.cypress.io/then The full code is below\n\nfunction delay(ms) {\n  console.log('delay start')\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      console.log('delay stop')\n      resolve(42)\n    }, ms)\n  })\n}\n\nit('delays by 2 seconds', function () {\n  cy.visit('/')\n    .then(function () {\n      // create the promise only after the visit\n      // has finished. Promises are eager\n      // so this promise starts running right away\n      // By returning it from the Cypress .then command\n      // you make Cypress wait for the promise to resolve\n      return delay(2000)\n    })\n    // the resolved value of the promise is passed\n    // to the assertion here\n    .should('eq', 42)\n})",
    "publishedAt": "2021-08-12T18:06:37Z"
  },
  {
    "videoId": "IEtK3QOMHYc",
    "title": "Cypress.tips Search Page",
    "description": "From a single page https://cypress.tips/search you can search my Cypress blog posts, my code examples, and even the official Cypress.io documentation.",
    "publishedAt": "2021-08-12T17:37:33Z"
  },
  {
    "videoId": "GyjCGKzFjWA",
    "title": "Use Utility as-a To Load Multiple Secrets And Pass To Cypress",
    "description": "Using NPM module as-a https://github.com/bahmutov/as-a I load multiple environment variables and launch Cypress command. The variables are only available to Cypress process and are gone when it exits. This is a perfect way to use secrets in Cypress tests without exposing them to the outside world.",
    "publishedAt": "2021-08-11T19:19:25Z"
  },
  {
    "videoId": "33Hq41O0bvU",
    "title": "Stub Network Calls Made by Next.js App in getServerSideProps Method",
    "description": "This video shows how to run Next.js server inside Cypress plugin process. We can mock network calls using \"nock\" utility in this process and thus the app returns the expected results, even if the network call happens in the getServerSideProps function. For more details, read https://glebbahmutov.com/blog/mock-network-from-server/",
    "publishedAt": "2021-08-10T16:12:40Z"
  },
  {
    "videoId": "mIyTBtUmmdE",
    "title": "Re-run Cypress Tests When Application Files Change",
    "description": "Using the plugin https://github.com/bahmutov/cypress-watch-and-reload we can watch the application's source files and re-run the tests on file save.",
    "publishedAt": "2021-08-09T18:38:18Z"
  },
  {
    "videoId": "Axr1Je9KKB8",
    "title": "How To Use PubSub From Cypress Test To Publish Events To Application",
    "description": "In this video, I show how to use the same PubSub from the Cypress test as the application uses. The test can deliver events to the application and then confirm the UI is updated correctly. Read the blog post https://glebbahmutov.com/blog/test-pubsub/",
    "publishedAt": "2021-08-06T17:46:28Z"
  },
  {
    "videoId": "Uo99lvfZLJQ",
    "title": "Testing DOM Events Sent to ref.current Element By React App",
    "description": "Cypress can listen to the events dispatched to the native DOM element from the React Application. \nRead the blog post https://glebbahmutov.com/blog/listen-to-events/ Find the source code in https://github.com/bahmutov/listen-to-custom-event\n\nThe relevant app code\nconsole.log('sending DOM event loading to the ref element')\n\nconst myEvent = new CustomEvent('clicked', {\n  detail: {\n    message: 'Button clicked',\n  },\n})\nref.current.dispatchEvent(myEvent)\n\nThe test code\ncy.visit('/')\ncy.get('[data-cy=ref]').invoke('on', 'clicked', cy.stub().as('clicked'))\ncy.get('button').click().click()\ncy.get('@clicked').should('have.been.calledTwice')",
    "publishedAt": "2021-08-05T14:15:15Z"
  },
  {
    "videoId": "h3O-ZxIItPk",
    "title": "Listen To The Application Dispatching Events To The Document",
    "description": "Sometimes an application dispatches a custom DOM to the document. This video shows how to listen to such events from the Cypress test. Read the blog post https://glebbahmutov.com/blog/listen-to-events/ Find the app in https://github.com/bahmutov/listen-to-custom-event\n\nThe application code:\n\nconst loadingEvent = new CustomEvent('loading', {\n  detail: {\n    message: 'Loading...',\n  },\n})\ndocument.dispatchEvent(loadingEvent)\n\nThe spec code:\ncy.document()\n  .invoke('addEventListener', 'loading', cy.stub().as('loading'))\n\n// on load the app should have sent an event\ncy.get('@loading')\n  .should('have.been.calledOnce')\n  .its('firstCall.args.0.detail')\n  .should('deep.equal', {\n    message: 'Loading...',\n  })",
    "publishedAt": "2021-08-05T13:50:05Z"
  },
  {
    "videoId": "09KbTRLrgWA",
    "title": "Install Node and Cypress",
    "description": "In this video, I install Node on a new development machine, install Cypress and open a sample test. You can download the Node installer from https://nodejs.org/en/download/ Pro tip: if you need to install multiple versions of Node, you can use NVM tool https://github.com/nvm-sh/nvm or a tool called \"n\" https://www.npmjs.com/package/n\n\nWatch my video https://youtu.be/CNnCz6StbbY to learn how to install and use NVM to install multiple Node versions on the same machine.",
    "publishedAt": "2021-08-04T14:23:43Z"
  },
  {
    "videoId": "q4bhaXl3pEc",
    "title": "Test The Custom jQuery Events Using Cypress",
    "description": "In this video, I show how to correctly listen to the custom jQuery events sent by the application from Cypress tests. Read the blog post https://glebbahmutov.com/blog/listen-to-events/ Find the full source code in repo https://github.com/bahmutov/jquery-custom-events-example",
    "publishedAt": "2021-08-03T14:58:23Z"
  },
  {
    "videoId": "pKi6nUMw6Tc",
    "title": "Cypress DOM Snapshots From DevTools Console",
    "description": "In this video, I show how to create a DOM snapshot of the application right from the DevTools console using Cypress utility method. Then I restore that DOM snapshot when I want to show it instead of the application.",
    "publishedAt": "2021-08-03T13:58:23Z"
  },
  {
    "videoId": "H04KlMirMYs",
    "title": "Visit The Blank Page Between The Tests",
    "description": "We will visit the blank page at the start of each test to make sure all code callbacks and network calls from the previous test are stopped and do not leak into the current test. For more details, read https://glebbahmutov.com/blog/visit-blank-page-between-tests/",
    "publishedAt": "2021-08-02T19:01:36Z"
  },
  {
    "videoId": "HxAjSUxr84w",
    "title": "Burn Tests Using cypress-grep And CircleCI Pipelines",
    "description": "This video shows how to run a particular test using cypress-grep multiple times in a row (called burning a test) from the browser DevTools Console. I also show how to set up burning using CircleCI pipeline parameters, so that we can start a new pipeline run and run a single test multiple times in a row on demand. \n\nSee the code in https://github.com/bahmutov/todomvc-tests-circleci and use the plugin https://github.com/cypress-io/cypress-grep\n\nRead the blog post https://glebbahmutov.com/blog/burn-tests-on-circle/",
    "publishedAt": "2021-07-29T17:56:39Z"
  },
  {
    "videoId": "MIIEndCTVxc",
    "title": "Avoid The Pyramid Of Doom Using Aliases",
    "description": "We will rewrite a test that uses nested \".then\" callbacks to get several elements into a test that uses aliases. We will access all the aliased values using \"this.alias name\" syntax.\n\nNote: you need to use \"function () { }\" callback format to correctly get the \"this\" object. Read the blog post https://glebbahmutov.com/blog/avoid-cypress-pyramid-of-doom/ for details.",
    "publishedAt": "2021-07-27T21:05:18Z"
  },
  {
    "videoId": "uGWWoq0ECY8",
    "title": "Why cy.log prints null or undefined",
    "description": "Sometimes we call cy.log(variable) yet it always prints null or undefined. In this video, I explain why this happens and how to solve this problem by moving the cy.log call into .then callback.\n\nSee the code in https://glebbahmutov.com/cypress-examples and read the blog post https://glebbahmutov.com/blog/why-cy-log-prints-nothing/ for full details.",
    "publishedAt": "2021-07-08T16:40:48Z"
  },
  {
    "videoId": "LtjAUzmPHIY",
    "title": "Play Video When The Videoplayer is Ready",
    "description": "In this video I show how to spy on the videoplayer to only execute \"play\" method call when the video is ready to be played.",
    "publishedAt": "2021-07-07T21:20:24Z"
  },
  {
    "videoId": "soNyOqpi_gQ",
    "title": "Mock WebSocket Connection from Cypress test using socket.io-mock",
    "description": "In this example, we will mock the socket used by the application. The mock will be created by the Cypress spec file and injected into the page using cy.intercept\n\nFind the code at https://github.com/bahmutov/cypress-socketio-chat",
    "publishedAt": "2021-06-28T14:42:59Z"
  },
  {
    "videoId": "MFGQB0nQ2J0",
    "title": "Testing WebBrowser.openBrowserAsync",
    "description": "We can confirm the RN application is calling WebBrowser.openBrowserAsync method by stubbing window.open method and confirming it was called with the right arguments. Find the source code at https://github.com/bahmutov/expo-cypress-examples",
    "publishedAt": "2021-06-18T20:32:54Z"
  },
  {
    "videoId": "y4Z5ywhd85s",
    "title": "Test React Native Tabs",
    "description": "In this test we will navigate from tab to tab using Cypress and confirm the React Native running inside the browser using Expo works correctly. Find the source code in https://github.com/bahmutov/expo-cypress-examples",
    "publishedAt": "2021-06-18T19:53:45Z"
  },
  {
    "videoId": "fg5ituAWexQ",
    "title": "Add Cypress Custom Commands To Access Elements By Aria Role",
    "description": "We will abstract finding elements by aria attribute into custom commands to be in the support file.\n\nThe code is at https://github.com/bahmutov/react-native-web-example and find the Cypress documentation at https://on.cypress.io/custom-commands",
    "publishedAt": "2021-06-17T14:21:12Z"
  },
  {
    "videoId": "rADMQUpUpSc",
    "title": "Add Cypress Test To React-Native-Web Example",
    "description": "I am adding the first Cypress test to a React Native project that uses react-native-web to show the app in the browser.\n\n- the source code is at https://github.com/bahmutov/react-native-web-example\n- https://necolas.github.io/react-native-web/",
    "publishedAt": "2021-06-17T14:13:48Z"
  },
  {
    "videoId": "Yaxi26X2wyg",
    "title": "Adding Code Coverage To React Native Tests",
    "description": "I have configured the code coverage following the Cypress code coverage guide at https://on.cypress.io/code-coverage The coverage shows that we missed testing what happens when the Ajax call to load the data fails. We add a test that simulates a network error using cy.intercept and get a 100% code coverage.",
    "publishedAt": "2021-06-16T20:36:00Z"
  },
  {
    "videoId": "3YfgZnlPSNo",
    "title": "Stub Ajax Network Call From The Application Using cy.intercept and Fixture File",
    "description": "The cy.intercept command can stub a network call using a fixture file. In this video we will save a JSON response from the server and then use it in our tests. Find the source code at https://github.com/bahmutov/my-react-native-project",
    "publishedAt": "2021-06-16T15:26:23Z"
  },
  {
    "videoId": "7YoHLJ69ijA",
    "title": "Testing The Loading Indicator by Slowing Down The Request",
    "description": "Using cy.intercept we slow down the Ajax call and confirm the loading indicator is first visible, then is removed from the DOM.\n\nThe source code is at https://github.com/bahmutov/my-react-native-project\nAlso read https://glebbahmutov.com/blog/negative-assertions/",
    "publishedAt": "2021-06-16T15:18:47Z"
  },
  {
    "videoId": "ChzzKbpXl9w",
    "title": "Test an Ajax Call From React Native App Using Cypress",
    "description": "We use cy.intercept command to spy on the Ajax call the React Native application is making to fetch the list of users. Then we verify the list is displayed by the application. Tip: we use testID and accessibilityLabel props in our application to be able to select elements using either \"[data-testid=user]\" or \"[aria-label=user]\" selectors.\n\nSee also:\n- the code at https://github.com/bahmutov/my-react-native-project\n- cy.intercept documentation at https://on.cypress.io/intercept",
    "publishedAt": "2021-06-16T14:49:26Z"
  },
  {
    "videoId": "nZnnqX6nMdI",
    "title": "Run Cypress React Native Tests Using GitHub Actions",
    "description": "We will set up a GitHub Actions workflow to run Expo + Cypress React Native tests on CI. See the code in https://github.com/bahmutov/my-react-native-project\n\nTools used:\n- https://github.com/cypress-io/github-action",
    "publishedAt": "2021-06-16T14:21:02Z"
  },
  {
    "videoId": "m0dAL83rnRc",
    "title": "Testing React Native Application Using Cypress: Introduction",
    "description": "In this video I create a new React Native project using Expo CLI, then add a simple test using Cypress. The application runs in the Web mode. You can find the application at https://github.com/bahmutov/my-react-native-project\n\nTools used:\n- https://expo.io/\n- https://www.cypress.io/\n- https://github.com/bahmutov/start-server-and-test",
    "publishedAt": "2021-06-16T13:55:37Z"
  },
  {
    "videoId": "m8gxagI4IM8",
    "title": "Confirm The Responsive Image is Loaded by the Picture Element",
    "description": "Using cy.intercept we can confirm from the Cypress test that the right image is loaded depending on the viewport width. Find the full recipe in the https://github.com/cypress-io/cypress-example-recipes repo",
    "publishedAt": "2021-06-10T20:40:19Z"
  },
  {
    "videoId": "Fo2S7l23eOA",
    "title": "Confirm Class Names using Custom Logic",
    "description": "Using have.prop \"classList\" we get the full class list from an element. We can convert that result into an Array and use \"some\" method with custom logic to check if the list of classes includes a name matching some predicate. See the full test at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-06-08T16:57:00Z"
  },
  {
    "videoId": "hjM-hhw4Llk",
    "title": "Check Elements Classes",
    "description": "Using should('have.class') assertions we can confirm the classes on the element. We can also get the entire class name using the prop assertion. Find this test at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-06-08T16:41:28Z"
  },
  {
    "videoId": "xdVRVhUUgCI",
    "title": "Cypress and StackBlitz: stubbing server-side Ajax call",
    "description": "StackBlitz has recently announced Node containers running right in the browser https://blog.stackblitz.com/posts/introducing-webcontainers/. This video shows a little experiment: running a Next.js server making a server-side Ajax call to fetch data, and stubbing this call using Cypress cy.intercept command. See the code in https://github.com/bahmutov/cypress-stackblitz",
    "publishedAt": "2021-06-04T20:43:15Z"
  },
  {
    "videoId": "EBzEEwCroIM",
    "title": "Running tests and suites of tests using cypress-grep",
    "description": "The https://github.com/bahmutov/cypress-grep plugin allows you to grep tests by tag. You can also run the entire suite of tests using tags.",
    "publishedAt": "2021-06-04T15:29:46Z"
  },
  {
    "videoId": "VSIaDbv4GyE",
    "title": "Use a Single cy.contains Command",
    "description": "You should use a single \"cy.contains(selector, text)\" command instead of \"cy.get(selector).contains(text)\" chain. The entire command will be retried, which is more robust (see https://on.cypress.io/retry-ability guide). You also do not need to add \"cy.contains(...).should('exist')` assertion, since the existence assertion is built-in, see https://on.cypress.io/contains page.",
    "publishedAt": "2021-06-04T14:01:25Z"
  },
  {
    "videoId": "SgTsCJCujNw",
    "title": "How to use Cypress cy.log command to output messages to the Command Log",
    "description": "We can use `.then(cy.log)` to quickly dump some info into the Cypress Command Log. If needed, we can use `.then(JSON.stringify).then(cy.log)` to print larger objects. For more Cypress tips like this, read the blog post  https://glebbahmutov.com/blog/cypress-tips-and-tricks/",
    "publishedAt": "2021-06-03T16:25:45Z"
  },
  {
    "videoId": "mML36U62-fQ",
    "title": "Replace window.location.replace from Cypress test",
    "description": "In this video, I show how to use cy.intercept to rewrite application code to avoid an application redirect via window.location.replace method call. For more details, read the blog post https://glebbahmutov.com/blog/cypress-tips-and-tricks/",
    "publishedAt": "2021-06-02T13:44:35Z"
  },
  {
    "videoId": "WGigbAupExQ",
    "title": "Canvas image diffing in the browser using pixelmatch",
    "description": "See the full source code in https://github.com/bahmutov/monalego repository. We will use pixelmatch library to compare the canvas to itself after a short delay to detect when the animation has finished. Then we can compare the image to the baseline image on disk, or save the baseline image.",
    "publishedAt": "2021-05-29T20:37:02Z"
  },
  {
    "videoId": "4eEc3x24D64",
    "title": "Give Chrome Browser Clipboard Permissions from Cypress Test",
    "description": "Using \"Cypress.automation\" command and Chrome Debugger Protocol we can access the clipboard text from the Cypress test to verify the application has copied the expected text there. Find the full Clipboard recipe at https://github.com/cypress-io/cypress-example-recipes",
    "publishedAt": "2021-05-26T20:21:53Z"
  },
  {
    "videoId": "N_VNS8ysUQc",
    "title": "Cypress Testing for HTML Emails Sent via SendGrid Service",
    "description": "This video shows how to receive HTML emails sent via SendGrid (or any other 3rd party SMTP service) using a test email account from Ethereal.email. The received email is then loaded in the Cypress browser to validate and interact with it. Read the blog post https://www.cypress.io/blog/2021/05/24/full-testing-of-html-emails-using-ethereal-accounts/ for full details. The source code is available in https://github.com/bahmutov/cypress-ethereal-email-example repository",
    "publishedAt": "2021-05-26T14:42:18Z"
  },
  {
    "videoId": "SExmed1dCL4",
    "title": "Access the clipboard from Cypress test using Electron browser",
    "description": "In this code example (available in the https://github.com/cypress-io/cypress-example-recipes) we see how to copy and read text from the clipboard using Electron browser.\n\nWatch the next video https://www.youtube.com/watch?v=4eEc3x24D64 for giving Chrome browser permission to access the clipboard",
    "publishedAt": "2021-05-26T13:14:51Z"
  },
  {
    "videoId": "LxkrhUEE2Qk",
    "title": "Multiple elements and should('be.visible') assertion",
    "description": "In this example, I show how the assertion should('be.visible') passes in the case of multiple elements when only some of them are visible. I also show how to filter elements by visibility to get just the visible elements or just the invisible ones. The demo uses Cypress v7.4.0, find the full test at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-05-26T12:35:14Z"
  },
  {
    "videoId": "kB2uyJ2W41I",
    "title": "Burning test using cypress-grep",
    "description": "In this video, I show how to run a test multiple times in a row (burning it) to figure out if it is flaky or not. I am using the https://github.com/bahmutov/cypress-grep plugin with \"burn\" parameter. By using this plugin we can run just a single test multiple times in a row without modifying the spec source file. Read the blog post https://glebbahmutov.com/blog/burning-tests/ for details.",
    "publishedAt": "2021-05-18T12:24:52Z"
  },
  {
    "videoId": "16WTH7XeIVw",
    "title": "Testing HTML emails using Cypress",
    "description": "In this example I explain how Cypress can be used to mock a local SMTP server and receive HTML emails sent by the local application. The full source code is at https://github.com/bahmutov/cypress-email-example and the corresponding blog post is at https://www.cypress.io/blog/2021/05/11/testing-html-emails-using-cypress/",
    "publishedAt": "2021-05-13T18:54:31Z"
  },
  {
    "videoId": "SFW7Ecj5TNE",
    "title": "How I organize pull request workflows by running smoke tests first",
    "description": "Using an example from the repository https://github.com/bahmutov/cypress-grep-example I show how I run smoke tests first (using https://github.com/bahmutov/cypress-grep plugin), before running all tests. Everything is recorded to the Cypress Dashboard, and I use Cypress GitHub Action to run everything.",
    "publishedAt": "2021-05-12T21:26:09Z"
  },
  {
    "videoId": "HS-Px-Sghd8",
    "title": "Plugin cypress-grep introduction",
    "description": "Introduction to the plugin https://github.com/bahmutov/cypress-grep that allows you to pick tests to run by part of the title or tags. Shows how to install the plugin and how to run tests by title or by tag. Also shows how to use the reference comment to include its TypeScript type definition for the test config \"tags\" field.",
    "publishedAt": "2021-05-12T14:24:11Z"
  },
  {
    "videoId": "Kkdkas9l3b0",
    "title": "Introduction to the cy.intercept \"times\" option",
    "description": "We will reply to the same network call with different stubs using cy.intercept \"times\" option. See the https://on.cypress.io/intercept API documentation page and find the full source code in the \"Intercept recipe\" in https://github.com/cypress-io/cypress-example-recipes",
    "publishedAt": "2021-05-11T16:33:09Z"
  },
  {
    "videoId": "Sp1NfcLPpwg",
    "title": "cypress-grep: filter tests dynamically from DevTools console",
    "description": "In this video, I show how to dynamically execute tagged tests or a particular test using the https://github.com/bahmutov/cypress-grep plugin. You can find the example repo at https://github.com/bahmutov/cypress-grep-example",
    "publishedAt": "2021-04-30T20:17:23Z"
  },
  {
    "videoId": "Cj1g_PWZJF8",
    "title": "Answering the user question by coding a new recipe",
    "description": "I show the entire process for coding an answer to a user question via https://github.com/bahmutov/cypress-examples. The recipe shows how to collect attributes from the multiple elements and confirm their values. This video is a good companion to the blog post https://glebbahmutov.com/blog/answer-cypress-question/",
    "publishedAt": "2021-04-26T13:53:33Z"
  },
  {
    "videoId": "RV7FoWu1w0c",
    "title": "Cypress aliases and before and beforeEach hooks",
    "description": "We will refactor the Cypress tests to visit the page just once using before hook. Then we will refactor the tests to access the same elements using an alias - but we will have to use the beforeEach hook to create the alias, as the aliases are reset before each test automatically. For more read the blog post https://glebbahmutov.com/blog/scrape-list-of-slides/",
    "publishedAt": "2021-04-23T20:18:29Z"
  },
  {
    "videoId": "AvsYI9kU0tA",
    "title": "Cypress test statuses",
    "description": "In this video I explain the four different statuses a finished Cypress test can have: passing, failing, pending, and skipped. The important thing to remember is that \"it.skip\" is the \"pending\" test. For more details, read the blog post https://glebbahmutov.com/blog/cypress-test-statuses/",
    "publishedAt": "2021-04-22T17:09:54Z"
  },
  {
    "videoId": "TZjphtLrRT4",
    "title": "Cypress hover example",
    "description": "In this example, we will look at testing DOM elements that are visible during mouse over and elements that are only visible during the true CSS hover state. For those events, we can use https://github.com/dmtrKovalenko/cypress-real-events#cyrealhover command. Find the full source code in https://github.com/bahmutov/cy-hover-example repo",
    "publishedAt": "2021-04-13T14:11:33Z"
  },
  {
    "videoId": "6CxZuolWlYM",
    "title": "Confirming the text with non breaking space entity",
    "description": "In this video I answer the question from https://github.com/cypress-io/cypress/issues/15863 by showing how to assert text that uses non-breaking space HTML entity. By searching the Cypress docs I find that cy.contains command handles non-breaking space, and if I want to use other assertions like \"should include.text\", I can use Unicode character \"\\u00a0\" where the non-breaking space is expected in the text.",
    "publishedAt": "2021-04-09T14:58:17Z"
  },
  {
    "videoId": "wkcot8eOcvs",
    "title": "cy.stub: stub a method on every window object",
    "description": "By using cy.on event listener we can stub the window.track on every window object created by the browser during the test. Even if the page reloads, or the browser navigates to another page, the stub will be attached.",
    "publishedAt": "2021-04-01T14:58:15Z"
  },
  {
    "videoId": "tkpz20haiCA",
    "title": "cy.stub: stub window method that will be defined later",
    "description": "By using Object.defineProperty we can prepare to stub window.track that will be set later by the application code. Then we can confirm it was called during the page load phase.",
    "publishedAt": "2021-03-30T12:38:11Z"
  },
  {
    "videoId": "eOEDCmqpMjE",
    "title": "cy.stub: stub a method on the window object",
    "description": "We will stub our \"analytics\" method window.track to confirm how it was called by our application. Find more information in the blog post https://glebbahmutov.com/blog/stub-window-open/ and in the workshop https://github.com/cypress-io/testing-workshop-cypress",
    "publishedAt": "2021-03-29T21:07:31Z"
  },
  {
    "videoId": "aeBclf9A92A",
    "title": "cypress-recurse: testing the canvas with bar chart",
    "description": "We are using the https://github.com/bahmutov/cypress-recurse to confirm the bar chart rendered on the canvas looks the same as the good image. This example comes from https://github.com/bahmutov/monalego",
    "publishedAt": "2021-03-17T23:02:33Z"
  },
  {
    "videoId": "6-xHHtAzNtk",
    "title": "cypress-recurse: pagination example",
    "description": "Using https://github.com/bahmutov/cypress-recurse we click the \"next page\" until it has class disabled, which means we are on the last page.",
    "publishedAt": "2021-03-16T14:27:54Z"
  },
  {
    "videoId": "CU8C6MRP_GU",
    "title": "cypress-recurse: Wait for the API to respond",
    "description": "Let's ping the API endpoint using cy.request until it responds with success, we can use https://github.com/bahmutov/cypress-recurse to do this. After the API responds we can continue with the rest test. Find the source code in the \"Wait for API\" recipe in https://github.com/cypress-io/cypress-example-recipes",
    "publishedAt": "2021-03-15T22:04:53Z"
  },
  {
    "videoId": "f2uXdCOkJb0",
    "title": "NPM Quick Run",
    "description": "In this video I am showing my utility https://github.com/bahmutov/npm-quick-run for running NPM scripts by prefix or word match. This utility makes running even complicated scripts a breeze. Find the full blog post at https://glebbahmutov.com/blog/organize-npm-scripts/",
    "publishedAt": "2021-03-11T15:17:40Z"
  },
  {
    "videoId": "6iDjbAXvLa0",
    "title": "Start server and test",
    "description": "I show the utility https://github.com/bahmutov/start-server-and-test to combine multiple scripts into a single command. Makes running the app and the tests a breeze. For the full blog post see https://glebbahmutov.com/blog/organize-npm-scripts/",
    "publishedAt": "2021-03-11T15:14:59Z"
  },
  {
    "videoId": "jJLMZ8k85OA",
    "title": "NPM Script Names",
    "description": "How I organize NPM script names in the package.json file in my projects. See the full discussion in https://glebbahmutov.com/blog/organize-npm-scripts/",
    "publishedAt": "2021-03-11T15:08:21Z"
  },
  {
    "videoId": "2EkOI-gO2VY",
    "title": "Debugging RegExp Cypress test",
    "description": "In this case I will refactor the original test that uses regular expression to assert an attribute's value. We will simplify the test to make the entire thing pretty small. \n\nShows https://on.cypress.io/fixture and https://on.cypress.io/assertions in action.",
    "publishedAt": "2021-03-10T16:19:53Z"
  },
  {
    "videoId": "g9ToLSD_lbQ",
    "title": "Fast Cypress project scaffolding",
    "description": "By using https://github.com/bahmutov/cly we can quickly scaffold new Cypress projects without Kitchensink spec files. We can also scaffold TypeScript and bare-bones projects.",
    "publishedAt": "2021-03-09T16:03:40Z"
  },
  {
    "videoId": "iP2tNhEbF8Y",
    "title": "Testing the SELECT options text",
    "description": "I will show how to confirm the options inside a SELECT element. Then we can look at comparing the arrays of strings. Find this example test at https://glebbahmutov.com/cypress-examples",
    "publishedAt": "2021-03-08T23:52:22Z"
  },
  {
    "videoId": "7ZSwrhh6BLk",
    "title": "Record to Cypress Dashboard from GitHub Actions",
    "description": "We set up Cypress Dashboard recording from the project that uses GH Actions. We use https://github.com/cypress-io/github-action to make it simple. The recording helps us watch the video of the test run to see that the test fails due to the different image size of the saved PNG file.",
    "publishedAt": "2021-03-06T21:53:08Z"
  },
  {
    "videoId": "7mEcUOo5fCk",
    "title": "Refactor clock control to for loop",
    "description": "In this video we refactor the visual canvas test with clock control to keep all state local. After a while we have exactly the same code in 4 steps and can switch to using a normal JavaScript for loop. Find the code in https://github.com/bahmutov/monalego repo.",
    "publishedAt": "2021-03-06T21:28:16Z"
  },
  {
    "videoId": "QvXDaRNYPDY",
    "title": "Pause canvas animation using cy.clock and cy.tick",
    "description": "We visually compare our canvas at different times by freezing the clock using cy.clock command and advancing it via cy.tick. Find the full source code in the https://github.com/bahmutov/monalego repository",
    "publishedAt": "2021-03-06T21:15:20Z"
  },
  {
    "videoId": "xSK6fe5WD1g",
    "title": "cypress-recurse: retries for visual canvas testing",
    "description": "We will use cypress-recurse to download and compare a canvas to a previously saved good PNG image. This retries until the command times out or the images match. Read the full info at https://glebbahmutov.com/blog/canvas-testing/ and find the finished code at https://github.com/bahmutov/monalego",
    "publishedAt": "2021-03-04T22:24:13Z"
  },
  {
    "videoId": "Ty5ltRdgr5M",
    "title": "cypress-recurse: use cypress-recurse to find the downloaded file",
    "description": "In this video, we are using https://github.com/bahmutov/cypress-recurse to find the downloaded file in the \"File download\" recipe. The code is in https://github.com/cypress-io/cypress-example-recipes/pull/663",
    "publishedAt": "2021-03-03T13:20:31Z"
  },
  {
    "videoId": "V82p7qTowXg",
    "title": "(7 of 7) Published cypress-recurse NPM package",
    "description": "The utility function for calling Cypress commands recursively until the predicate passes has been published in its own NPM package. Find the source code in https://github.com/bahmutov/cypress-recurse This video walks through the package explaining it.",
    "publishedAt": "2021-03-02T14:14:40Z"
  },
  {
    "videoId": "g4qispkHH-o",
    "title": "(6 of 7) Add JSDoc types to the options parameter",
    "description": "We will use JSDoc comments to quickly give types to the parameters our \"recurse\" function expects. See https://glebbahmutov.com/blog/trying-typescript/#types-from-jsdoc for more on using JSDoc with ts-check directive.",
    "publishedAt": "2021-02-28T23:37:57Z"
  },
  {
    "videoId": "DeMRtTD5p7s",
    "title": "(5 of 7) Convert recurse to use options object",
    "description": "Adding more positional arguments to our recurse function quickly becomes very tedious. In this video, I convert the function to accept the options object as the last argument. Find the source at https://github.com/bahmutov/avoid-while-loops-in-cypress repo",
    "publishedAt": "2021-02-28T21:28:56Z"
  },
  {
    "videoId": "Cn8Ubhd49Gw",
    "title": "(4 of 7) Recursion function with time limit",
    "description": "We improve our recursive function for running Cypress commands by replacing the iteration limit with a time limit. This is similar to the way Cypress commands are retried up until the command's timeout limit. Find the source code at https://github.com/bahmutov/avoid-while-loops-in-cypress",
    "publishedAt": "2021-02-27T21:09:55Z"
  },
  {
    "videoId": "I1oNKD6NNjg",
    "title": "(3 of 7) Reusable function for running Cypress commands with attempts limit",
    "description": "We continue working on the reusable recursive function for running Cypress commands until the expected value is produced. In this video, we add a limit to how many times the recursive function can be called. Find the source code at https://github.com/bahmutov/avoid-while-loops-in-cypress",
    "publishedAt": "2021-02-27T21:08:05Z"
  },
  {
    "videoId": "Q_7-gRQLLMA",
    "title": "(2 of 7) Reusable recursive function to running Cypress commands",
    "description": "We are making a reusable function that calls itself recursively until Cypress commands produce the expected value. Find the full code in https://github.com/bahmutov/avoid-while-loops-in-cypress",
    "publishedAt": "2021-02-27T21:04:28Z"
  },
  {
    "videoId": "r8_hFwYAo5c",
    "title": "(1 of 7) Call cy task until it returns an expected value",
    "description": "We implement a test that recursively calls cy.task until it returns the expected number 7. The source code is in the repo https://github.com/bahmutov/avoid-while-loops-in-cypress",
    "publishedAt": "2021-02-26T15:12:27Z"
  },
  {
    "videoId": "2qxbSmSRZQQ",
    "title": "Cypress viewport and window sizes",
    "description": "I show how Cypress scales the application's iframe to fit inside the available browser window while preserving the aspect ratio of the viewport. See the full recipe to learn how to generate high-quality screenshots and video recordings in https://github.com/cypress-io/cypress-example-recipes#fundamentals",
    "publishedAt": "2021-02-25T20:50:51Z"
  },
  {
    "videoId": "62cDLO533OY",
    "title": "A GitHub Actions workflow with separate install and test steps",
    "description": "I am showing the https://github.com/bahmutov/cypress-gh-action-split-jobs workflow where we use two jobs. The first job installs the dependencies and builds the site. The second job downloads the built site and runs Cypress tests. Splitting the workflow like this allows us to build the site just once and potentially run multiple tests in parallel using Cypress GitHub Action.",
    "publishedAt": "2021-02-24T19:55:11Z"
  },
  {
    "videoId": "5Z8BaPNDfvA",
    "title": "Avoid while loop in Cypress",
    "description": "This example shows how to reload the page in test multiple times until the expected number 7 appears. The test teaches how to properly execute the asynchronous commands while avoiding a runaway test scenario. Find the code in the https://github.com/cypress-io/cypress-example-recipes repository.",
    "publishedAt": "2021-02-22T23:05:26Z"
  },
  {
    "videoId": "OiVFiLnmXEM",
    "title": "Testing anchor element with ping attribute",
    "description": "How to use the cy.intercept to confirm the \"A\" DOM element with \"ping=/track\" attribute really is making the POST request to the backend. The source code is in https://github.com/cypress-io/cypress-example-recipes#stubbing-and-spying under \"Stubbing and Spying\" recipe, see \"cy.intercept\" recipe.",
    "publishedAt": "2021-02-21T22:44:12Z"
  },
  {
    "videoId": "sq6XbXbUXtA",
    "title": "How Cypress cy.intercept works",
    "description": "Explanation video showing the steps in cy.intercept command and how the browser and the Cypress network proxy layer communicate with your test. Taken from the presentation https://slides.com/bahmutov/how-cy-intercept-works",
    "publishedAt": "2021-02-20T20:05:18Z"
  },
  {
    "videoId": "4TeSOj2Iy_Q",
    "title": "Test External Site Using GitHub Actions",
    "description": "Using workflow_dispatch event I can start GitHub Actions workflow by clicking a button in GitHub Repo UI. It is convenient for testing external sites, like my personal site that does not have its own tests.\n\nThe video shows using Cypress GitHub Action https://github.com/cypress-io/github-action to testing my personal site http://glebbahmutov.com/. Find the source code at https://github.com/bahmutov/test-personal-site",
    "publishedAt": "2021-02-06T20:21:09Z"
  },
  {
    "videoId": "Qfo5ZVOdJNA",
    "title": "Showing GitHub Actions VSCode Plugin",
    "description": "How to see GitHub Actions CI status right from your VSCode editor, thanks to cschleiden.vscode-github-actions plugin. Also shows how to debug a failing Cypress test due to a stray character by looking at the error snapshot at Cypress Dashboard.",
    "publishedAt": "2021-02-03T20:14:30Z"
  },
  {
    "videoId": "mnctGqswGM0",
    "title": "Capture extra video for failed test",
    "description": "This video shows how you can capture extra video at the end of a failed test",
    "publishedAt": "2021-01-27T22:04:18Z"
  },
  {
    "videoId": "jAiYePsxPl4",
    "title": "Passing the environment variables to Cypress",
    "description": "Using either --env or plugin file. The plugin file way is the most powerful way to pass the environment variables, plus it makes it simple to create objects out of passed values. Watch out for single quotes, as they may prevent shell interpolation.\n\nRelated documentation: https://on.cypress.io/environment-variables",
    "publishedAt": "2021-01-27T15:05:41Z"
  },
  {
    "videoId": "f5UaXuAc52c",
    "title": "How to correctly use the baseUrl to visit a site in Cypress",
    "description": "Use baseUrl to avoid page reloads. This is much better than the alternatives: hardcoding the URL or passing it via the environment variables.\n\nSee https://on.cypress.io/visit and https://on.cypress.io/configuration",
    "publishedAt": "2021-01-22T18:26:06Z"
  },
  {
    "videoId": "pXpVAQZ-Gi4",
    "title": "Find DOM Elements From DevTools While Using Cypress",
    "description": "If you do not trust cy.get, cy.find, or cy.contains commands, if you want to confirm they find the expected DOM elements, this video shows how to correctly query the document yourself.\n\n- IMPORTANT: switch the DevTools console to the application iframe\n- use document.querySelector, document.querySelectorAll, or special DevTools aliases $ and $$ to find elements\n- you can query even when the Cypress Time-Traveling Debugger shows command DOM snapshots",
    "publishedAt": "2021-01-16T19:34:10Z"
  },
  {
    "videoId": "VY9yVle8LRQ",
    "title": "How to fail Cypress test if the application creates unhandled rejected promise",
    "description": "In this video, I show how to install a window event listener that catches unhandled rejected promises created by the application. When Cypress catches the event it can fail the test. For more details see the recipe \"Handling errors\" in https://github.com/cypress-io/cypress-example-recipes#fundamentals",
    "publishedAt": "2021-01-08T00:07:17Z"
  },
  {
    "videoId": "DwVezYq4zPM",
    "title": "Filtering app errors in Cypress tests",
    "description": "This video shows how Cypress catches exceptions thrown from the application code, and how to ignore some of the errors. Then it shows how to register the error handler for all tests. For more, see the \"Handling errors\" recipe https://github.com/cypress-io/cypress-example-recipes#fundamentals",
    "publishedAt": "2021-01-07T23:47:46Z"
  },
  {
    "videoId": "BrZbNCrrlx8",
    "title": "Cypress hosts configuration explanation",
    "description": "You can specify the hostname to IP using Cypress' config object, similar to how you can use /private/etc/hosts to map domains before going to the DNS server. This video shows an example of mapping a non-existent domain www.demo-site.com to localhost and testing it.",
    "publishedAt": "2021-01-02T21:40:19Z"
  },
  {
    "videoId": "3uQpeyBlw3w",
    "title": "Avoid using cy.writeFile inside cy.intercept command",
    "description": "In this video I show how to avoid using Cypress command like cy.writeFile inside the network interceptor code. Find the written guide in https://glebbahmutov.com/blog/cypress-intercept-problems blog post",
    "publishedAt": "2020-12-12T21:23:42Z"
  },
  {
    "videoId": "nSmHxxwceDU",
    "title": "Debug Cypress element visibility issues",
    "description": "This video shows how to step through the Cypress.dom.isVisible function to investigate why Cypress thinks an element is invisible, even though it is clearly shown in the browser. \n\nSee https://on.cypress.io/dom#is-visible",
    "publishedAt": "2020-12-03T17:13:39Z"
  },
  {
    "videoId": "_wfKbYQlP_Y",
    "title": "Cypress v6: Network control using cy.intercept introduction",
    "description": "In this video, I will give a glimpse of cy.intercept command (see https://on.cypress.io/intercept) which is a much more powerful replacement for the deprecated cy.route command. Find the source code at https://github.com/bahmutov/cy-intercept-example",
    "publishedAt": "2020-11-26T20:09:09Z"
  },
  {
    "videoId": "hMAXX9k1q-Q",
    "title": "Debugging A Failing Cypress Test Locally",
    "description": "Using an example from https://github.com/cypress-io/cypress-example-todomvc app I will show how to debug a failing Cypress test using its built-in time-traveling debugger, cy.pause command, and the standard JavaScript debugger keyword. For more Cypress tips & tricks, read the blog post https://glebbahmutov.com/blog/cypress-tips-and-tricks/",
    "publishedAt": "2020-10-28T23:10:11Z"
  },
  {
    "videoId": "inLue14mxm0",
    "title": "How to restore mocked clock",
    "description": "Shows how to mock the application's clock using \"cy.clock\" and how to restore it to let the application run normally. See https://on.cypress.io/clock",
    "publishedAt": "2020-06-23T16:05:02Z"
  },
  {
    "videoId": "AcM4Uhp3yOw",
    "title": "Refactor loading fixtures",
    "description": "We will first move loading JSON fixtures into \"before\" hook. Then we will refactor the loading of fixtures by using \"import\" statement.",
    "publishedAt": "2020-06-13T17:15:21Z"
  },
  {
    "videoId": "yVvCYtsmkZU",
    "title": "How to read code coverage report",
    "description": "We will look at code coverage HTML report generated after Cypress test run, and I will explain the line counters, if/else branching and JSX coverage.",
    "publishedAt": "2020-06-02T16:19:37Z"
  },
  {
    "videoId": "AlltFcsIFvc",
    "title": "Assert that the stub was called twice",
    "description": "We will assert the component invoked the stub prop twice when clicked in several ways. See https://on.cypress.io/retry-ability for more examples of Cypress retrying assertions automatically",
    "publishedAt": "2020-05-28T22:57:22Z"
  },
  {
    "videoId": "6JMVh8V7DcI",
    "title": "Open code editor at the right failed command from Cypress",
    "description": "Cypress 4.6.0 uses source maps to correctly open your code editor right at the failed command.",
    "publishedAt": "2020-05-20T21:42:03Z"
  },
  {
    "videoId": "9Eq_gIshK0o",
    "title": "Checking code coverage on pull request",
    "description": "We will compare current code coverage against the coverage badge in the README using https://github.com/bahmutov/check-code-coverage#set-gh-status to make sure a pull request does not skip tests accidentally. The source code is in https://github.com/bahmutov/instrument-example",
    "publishedAt": "2020-05-05T15:21:35Z"
  },
  {
    "videoId": "AAl4HmJ3YuM",
    "title": "Show code coverage in commit status check",
    "description": "Shows how to use https://github.com/bahmutov/check-code-coverage#set-gh-status to show the current code coverage as a status check on GitHub",
    "publishedAt": "2020-05-04T20:04:16Z"
  },
  {
    "videoId": "bNVRxb-MKGo",
    "title": "Adding code coverage badge to your project",
    "description": "This video shows how to add and update code coverage badge to your README without using external service, just https://shields.io and https://github.com/bahmutov/check-code-coverage#update-badge",
    "publishedAt": "2020-05-02T22:00:27Z"
  },
  {
    "videoId": "dwU5gUG2-EM",
    "title": "Check code coverage robustly using 3rd party tool",
    "description": "NYC will happily pass coverage check with an empty JSON file ... which is not what you probably want. In this video, I will show https://github.com/bahmutov/check-code-coverage scripts that are stricter.",
    "publishedAt": "2020-04-30T22:38:46Z"
  },
  {
    "videoId": "3LuVZgd4Ib4",
    "title": "Use Chromium Dev browser to run Cypress tests",
    "description": "Shows how to download Chromium browser from https://on.cypress.io/chromium-downloads and run Cypress tests",
    "publishedAt": "2020-04-28T21:01:53Z"
  },
  {
    "videoId": "-YgitwmwFo0",
    "title": "Linting Cypress code using ESLint and eslint-plugin-cypress",
    "description": "Installing ESLint, linting React application and using https://github.com/cypress-io/eslint-plugin-cypress to add settings for Cypress specs to pass the linter",
    "publishedAt": "2020-04-27T23:38:14Z"
  },
  {
    "videoId": "DlceMpRpbAw",
    "title": "Excluding code from code coverage reports",
    "description": "In this video, we will exclude a file, a branch, and an entire function from the code coverage report produced by Cypress. See https://github.com/cypress-io/code-coverage#exclude-code",
    "publishedAt": "2020-04-26T22:32:43Z"
  },
  {
    "videoId": "y8StkffYra0",
    "title": "Get code coverage reports from Cypress tests",
    "description": "Report code coverage using https://github.com/cypress-io/code-coverage plugin for Cypress",
    "publishedAt": "2020-04-25T20:57:26Z"
  },
  {
    "videoId": "mYXXSvcmQ6Y",
    "title": "Using start-server-and-test to start app, run tests and shut everything down",
    "description": "I will use https://github.com/bahmutov/start-server-and-test to run the web application, to wait for localhost:3000 to respond, then to run end-to-end Cypress tests. When the tests are done, the start-server-and-test shuts down the application.",
    "publishedAt": "2020-04-25T20:57:16Z"
  },
  {
    "videoId": "edgeQZ8UpD0",
    "title": "How to instrument react-scripts web application for code coverage",
    "description": "I will show how to instrument source code to collect code coverage. This method requires 1 dependency and works with any web application that uses react-scripts. We will use https://github.com/cypress-io/instrument-cra",
    "publishedAt": "2020-04-25T20:57:05Z"
  }
]
